
stm32f4_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e78  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800103c  0800103c  0000203c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800106c  0800106c  00003020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800106c  0800106c  0000206c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001074  08001074  00003020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001074  08001074  00002074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001078  08001078  00002078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800107c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000020  0800109c  00003020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  0800109c  00003060  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001935  00000000  00000000  0000304a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000060f  00000000  00000000  0000497f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00004f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00001a75  00000000  00000000  000052a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000009dc  00000000  00000000  00006d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000076f2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000064c  00000000  00000000  00007738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  00007d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001024 	.word	0x08001024

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08001024 	.word	0x08001024

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <USART2_GPIOInits>:


/*
 * Initialize GPIO pins as Usart 2 pins
 */
void USART2_GPIOInits(){
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART2Pin;

	USART2Pin.pGPIOx = GPIOA;
 800021a:	4b0d      	ldr	r3, [pc, #52]	@ (8000250 <USART2_GPIOInits+0x3c>)
 800021c:	607b      	str	r3, [r7, #4]
	USART2Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	USART2Pin.GPIO_PinConfig.GPIO_AltrFnMode = 7;
 8000222:	2307      	movs	r3, #7
 8000224:	737b      	strb	r3, [r7, #13]
	USART2Pin.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 8000226:	2302      	movs	r3, #2
 8000228:	72fb      	strb	r3, [r7, #11]
	USART2Pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	733b      	strb	r3, [r7, #12]

	USART2Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800022e:	2302      	movs	r3, #2
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2Pin);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f995 	bl	8000564 <GPIO_Init>

	USART2Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800023a:	2303      	movs	r3, #3
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2Pin);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f98f 	bl	8000564 <GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <GPIO_Button_Inits>:

/*
 * GPIO-Button INit
 */
void GPIO_Button_Inits(void){
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 800025a:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <GPIO_Button_Inits+0x2c>)
 800025c:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800025e:	230d      	movs	r3, #13
 8000260:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000262:	2300      	movs	r3, #0
 8000264:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 8000266:	2302      	movs	r3, #2
 8000268:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 800026a:	2300      	movs	r3, #0
 800026c:	733b      	strb	r3, [r7, #12]

	GPIO_Init(&GpioButton);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f977 	bl	8000564 <GPIO_Init>

}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40020800 	.word	0x40020800

08000284 <delay>:


/*
 * delay
 */
void delay (void){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
	/* ~200 msec when sys clock is 16 MHZ */
	for(uint32_t i = 0; i < 500000/2; i ++);
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	e002      	b.n	8000296 <delay+0x12>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a04      	ldr	r2, [pc, #16]	@ (80002ac <delay+0x28>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d9f8      	bls.n	8000290 <delay+0xc>
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	0003d08f 	.word	0x0003d08f

080002b0 <WAIT_ForButtonPress>:

/*
 * WAIT_ForButtonPress
 * Polling button
 */
void WAIT_ForButtonPress (void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_NOT_PRESSED);
 80002b4:	bf00      	nop
 80002b6:	210d      	movs	r1, #13
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <WAIT_ForButtonPress+0x1c>)
 80002ba:	f000 fb0d 	bl	80008d8 <GPIO_ReadFromInputPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d0f8      	beq.n	80002b6 <WAIT_ForButtonPress+0x6>

	/* debounce */
	delay();
 80002c4:	f7ff ffde 	bl	8000284 <delay>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40020800 	.word	0x40020800

080002d0 <USART2_Inits>:

/*
 * Usart 2 init
 */

void USART2_Inits(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0



	USART2Handle.pUSARTx = USART2;
 80002d4:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <USART2_Inits+0x3c>)
 80002d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000310 <USART2_Inits+0x40>)
 80002d8:	601a      	str	r2, [r3, #0]

	USART2Handle.USART_Config.USART_BaudRate = USART_BAUD_115200;
 80002da:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <USART2_Inits+0x3c>)
 80002dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e0:	605a      	str	r2, [r3, #4]
	USART2Handle.USART_Config.USART_DataSize = USART_DATA_8BITS;
 80002e2:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <USART2_Inits+0x3c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	725a      	strb	r2, [r3, #9]
	USART2Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <USART2_Inits+0x3c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	731a      	strb	r2, [r3, #12]
	USART2Handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80002ee:	4b07      	ldr	r3, [pc, #28]	@ (800030c <USART2_Inits+0x3c>)
 80002f0:	2202      	movs	r2, #2
 80002f2:	721a      	strb	r2, [r3, #8]
	USART2Handle.USART_Config.USART_NoOfStopbits = USART_STOPBITS_1;
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <USART2_Inits+0x3c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	729a      	strb	r2, [r3, #10]
	USART2Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002fa:	4b04      	ldr	r3, [pc, #16]	@ (800030c <USART2_Inits+0x3c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	72da      	strb	r2, [r3, #11]

	USART_Init(&USART2Handle);
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <USART2_Inits+0x3c>)
 8000302:	f000 fc43 	bl	8000b8c <USART_Init>


}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000003c 	.word	0x2000003c
 8000310:	40004400 	.word	0x40004400

08000314 <main>:



int main (void){
 8000314:	b598      	push	{r3, r4, r7, lr}
 8000316:	af00      	add	r7, sp, #0

	/* Initialize the button */
	GPIO_Button_Inits();
 8000318:	f7ff ff9c 	bl	8000254 <GPIO_Button_Inits>

	/* Initialize I2C pins : Configure the GPIO pins to behave as I2C1 */
	USART2_GPIOInits();
 800031c:	f7ff ff7a 	bl	8000214 <USART2_GPIOInits>

	/* Configure I2C peripheral */
	USART2_Inits();
 8000320:	f7ff ffd6 	bl	80002d0 <USART2_Inits>


	/* Enable USART2 peripheral control */
	USART_PeripheralControl(USART2, ENABLE);
 8000324:	2101      	movs	r1, #1
 8000326:	480f      	ldr	r0, [pc, #60]	@ (8000364 <main+0x50>)
 8000328:	f000 fcb8 	bl	8000c9c <USART_PeripheralControl>

	/* configure priority for usart2 irq*/
	USART_IRQPriorityConfig(IRQ_NO_USART2, NVIC_IRQ_PR10);
 800032c:	210a      	movs	r1, #10
 800032e:	2026      	movs	r0, #38	@ 0x26
 8000330:	f000 fe26 	bl	8000f80 <USART_IRQPriorityConfig>

	/*Enable USART2 IRQ */
	USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE);
 8000334:	2101      	movs	r1, #1
 8000336:	2026      	movs	r0, #38	@ 0x26
 8000338:	f000 fd78 	bl	8000e2c <USART_IRQInterruptConfig>

	while(1){

		WAIT_ForButtonPress();
 800033c:	f7ff ffb8 	bl	80002b0 <WAIT_ForButtonPress>


		while (!(USART_SendDataIT(&USART2Handle, (uint8_t *)tx_data, strlen(tx_data)) == USART_STATUS_BUSY_TX)) ;
 8000340:	bf00      	nop
 8000342:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <main+0x54>)
 8000344:	681c      	ldr	r4, [r3, #0]
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <main+0x54>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff5a 	bl	8000204 <strlen>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	4621      	mov	r1, r4
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <main+0x58>)
 8000358:	f000 fd44 	bl	8000de4 <USART_SendDataIT>
 800035c:	4603      	mov	r3, r0
 800035e:	2b01      	cmp	r3, #1
 8000360:	d1ef      	bne.n	8000342 <main+0x2e>
		WAIT_ForButtonPress();
 8000362:	e7eb      	b.n	800033c <main+0x28>
 8000364:	40004400 	.word	0x40004400
 8000368:	20000000 	.word	0x20000000
 800036c:	2000003c 	.word	0x2000003c

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	@ (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 fe1d 	bl	8000fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ffb7 	bl	8000314 <main>

080003a6 <LoopForever>:

LoopForever:
  b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003b4:	0800107c 	.word	0x0800107c
  ldr r2, =_sbss
 80003b8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003bc:	20000060 	.word	0x20000060

080003c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <GPIO_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80003d0:	78fb      	ldrb	r3, [r7, #3]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d157      	bne.n	8000486 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a59      	ldr	r2, [pc, #356]	@ (8000540 <GPIO_PeriClockControl+0x17c>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x28>
 80003de:	4b59      	ldr	r3, [pc, #356]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a58      	ldr	r2, [pc, #352]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 80003ea:	e0a3      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a56      	ldr	r2, [pc, #344]	@ (8000548 <GPIO_PeriClockControl+0x184>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x3e>
 80003f4:	4b53      	ldr	r3, [pc, #332]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a52      	ldr	r2, [pc, #328]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80003fa:	f043 0302 	orr.w	r3, r3, #2
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	e098      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a51      	ldr	r2, [pc, #324]	@ (800054c <GPIO_PeriClockControl+0x188>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x54>
 800040a:	4b4e      	ldr	r3, [pc, #312]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040e:	4a4d      	ldr	r2, [pc, #308]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000416:	e08d      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a4d      	ldr	r2, [pc, #308]	@ (8000550 <GPIO_PeriClockControl+0x18c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x6a>
 8000420:	4b48      	ldr	r3, [pc, #288]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000424:	4a47      	ldr	r2, [pc, #284]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042c:	e082      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a48      	ldr	r2, [pc, #288]	@ (8000554 <GPIO_PeriClockControl+0x190>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x80>
 8000436:	4b43      	ldr	r3, [pc, #268]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043a:	4a42      	ldr	r2, [pc, #264]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000442:	e077      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a44      	ldr	r2, [pc, #272]	@ (8000558 <GPIO_PeriClockControl+0x194>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriClockControl+0x96>
 800044c:	4b3d      	ldr	r3, [pc, #244]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000450:	4a3c      	ldr	r2, [pc, #240]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000458:	e06c      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_EN();
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a3f      	ldr	r2, [pc, #252]	@ (800055c <GPIO_PeriClockControl+0x198>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0xac>
 8000462:	4b38      	ldr	r3, [pc, #224]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000466:	4a37      	ldr	r2, [pc, #220]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046e:	e061      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a3b      	ldr	r2, [pc, #236]	@ (8000560 <GPIO_PeriClockControl+0x19c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d15d      	bne.n	8000534 <GPIO_PeriClockControl+0x170>
 8000478:	4b32      	ldr	r3, [pc, #200]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047c:	4a31      	ldr	r2, [pc, #196]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 800047e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000482:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000484:	e056      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a2d      	ldr	r2, [pc, #180]	@ (8000540 <GPIO_PeriClockControl+0x17c>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0xd8>
 800048e:	4b2d      	ldr	r3, [pc, #180]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000492:	4a2c      	ldr	r2, [pc, #176]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049a:	e04b      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a2a      	ldr	r2, [pc, #168]	@ (8000548 <GPIO_PeriClockControl+0x184>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0xee>
 80004a4:	4b27      	ldr	r3, [pc, #156]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a26      	ldr	r2, [pc, #152]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004aa:	f023 0302 	bic.w	r3, r3, #2
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b0:	e040      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a25      	ldr	r2, [pc, #148]	@ (800054c <GPIO_PeriClockControl+0x188>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x104>
 80004ba:	4b22      	ldr	r3, [pc, #136]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	4a21      	ldr	r2, [pc, #132]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004c0:	f023 0304 	bic.w	r3, r3, #4
 80004c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c6:	e035      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a21      	ldr	r2, [pc, #132]	@ (8000550 <GPIO_PeriClockControl+0x18c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d106      	bne.n	80004de <GPIO_PeriClockControl+0x11a>
 80004d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004d6:	f023 0308 	bic.w	r3, r3, #8
 80004da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004dc:	e02a      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000554 <GPIO_PeriClockControl+0x190>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d106      	bne.n	80004f4 <GPIO_PeriClockControl+0x130>
 80004e6:	4b17      	ldr	r3, [pc, #92]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ea:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004ec:	f023 0310 	bic.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f2:	e01f      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a18      	ldr	r2, [pc, #96]	@ (8000558 <GPIO_PeriClockControl+0x194>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d106      	bne.n	800050a <GPIO_PeriClockControl+0x146>
 80004fc:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000500:	4a10      	ldr	r2, [pc, #64]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000502:	f023 0320 	bic.w	r3, r3, #32
 8000506:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000508:	e014      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a13      	ldr	r2, [pc, #76]	@ (800055c <GPIO_PeriClockControl+0x198>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d106      	bne.n	8000520 <GPIO_PeriClockControl+0x15c>
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 8000518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800051c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800051e:	e009      	b.n	8000534 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a0f      	ldr	r2, [pc, #60]	@ (8000560 <GPIO_PeriClockControl+0x19c>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d105      	bne.n	8000534 <GPIO_PeriClockControl+0x170>
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052c:	4a05      	ldr	r2, [pc, #20]	@ (8000544 <GPIO_PeriClockControl+0x180>)
 800052e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000532:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40020000 	.word	0x40020000
 8000544:	40023800 	.word	0x40023800
 8000548:	40020400 	.word	0x40020400
 800054c:	40020800 	.word	0x40020800
 8000550:	40020c00 	.word	0x40020c00
 8000554:	40021000 	.word	0x40021000
 8000558:	40021400 	.word	0x40021400
 800055c:	40021800 	.word	0x40021800
 8000560:	40021c00 	.word	0x40021c00

08000564 <GPIO_Init>:
 *
 * @return		-
 *
 * @note		-
 ************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

	/* Enable GPIO peripheral Clock */
	GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2101      	movs	r1, #1
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff26 	bl	80003c4 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
	/* 1. Configure the mode for the given gpio pin */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d820      	bhi.n	80005c6 <GPIO_Init+0x62>
		/*Normal GPIO configurations */
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	461a      	mov	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //need to clear bit field before sets
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	2103      	movs	r1, #3
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	400a      	ands	r2, r1
 80005b2:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6819      	ldr	r1, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	430a      	orrs	r2, r1
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	e0c8      	b.n	8000758 <GPIO_Init+0x1f4>
	}
	else{
		/* Interrupt configuration */

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d117      	bne.n	80005fe <GPIO_Init+0x9a>
			/* 1. configure falling edge FTSR */
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005ce:	4b47      	ldr	r3, [pc, #284]	@ (80006ec <GPIO_Init+0x188>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	4a43      	ldr	r2, [pc, #268]	@ (80006ec <GPIO_Init+0x188>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	60d3      	str	r3, [r2, #12]

			/* clear same bit in RTSR */
			EXTI -> RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005e4:	4b41      	ldr	r3, [pc, #260]	@ (80006ec <GPIO_Init+0x188>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	4611      	mov	r1, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	408a      	lsls	r2, r1
 80005f2:	43d2      	mvns	r2, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a3d      	ldr	r2, [pc, #244]	@ (80006ec <GPIO_Init+0x188>)
 80005f8:	400b      	ands	r3, r1
 80005fa:	6093      	str	r3, [r2, #8]
 80005fc:	e035      	b.n	800066a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	2b04      	cmp	r3, #4
 8000604:	d117      	bne.n	8000636 <GPIO_Init+0xd2>
			/* 1. configure raising edge RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000606:	4b39      	ldr	r3, [pc, #228]	@ (80006ec <GPIO_Init+0x188>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a35      	ldr	r2, [pc, #212]	@ (80006ec <GPIO_Init+0x188>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6093      	str	r3, [r2, #8]

			/* clear same bit in FTSR */
			EXTI -> FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b33      	ldr	r3, [pc, #204]	@ (80006ec <GPIO_Init+0x188>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	43d2      	mvns	r2, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a2f      	ldr	r2, [pc, #188]	@ (80006ec <GPIO_Init+0x188>)
 8000630:	400b      	ands	r3, r1
 8000632:	60d3      	str	r3, [r2, #12]
 8000634:	e019      	b.n	800066a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	795b      	ldrb	r3, [r3, #5]
 800063a:	2b06      	cmp	r3, #6
 800063c:	d115      	bne.n	800066a <GPIO_Init+0x106>
			/* 1. configure both falling and raising edge FTSR, RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800063e:	4b2b      	ldr	r3, [pc, #172]	@ (80006ec <GPIO_Init+0x188>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	7912      	ldrb	r2, [r2, #4]
 8000646:	4611      	mov	r1, r2
 8000648:	2201      	movs	r2, #1
 800064a:	408a      	lsls	r2, r1
 800064c:	4611      	mov	r1, r2
 800064e:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <GPIO_Init+0x188>)
 8000650:	430b      	orrs	r3, r1
 8000652:	6093      	str	r3, [r2, #8]
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000654:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <GPIO_Init+0x188>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	7912      	ldrb	r2, [r2, #4]
 800065c:	4611      	mov	r1, r2
 800065e:	2201      	movs	r2, #1
 8000660:	408a      	lsls	r2, r1
 8000662:	4611      	mov	r1, r2
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <GPIO_Init+0x188>)
 8000666:	430b      	orrs	r3, r1
 8000668:	60d3      	str	r3, [r2, #12]
		}
		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 4; //selects SYSCFG_EXTIR 0 to 3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4; //selects position in SYSCFG_EXTIR 0 to 3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	f003 0303 	and.w	r3, r3, #3
 800067a:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1b      	ldr	r2, [pc, #108]	@ (80006f0 <GPIO_Init+0x18c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d044      	beq.n	8000710 <GPIO_Init+0x1ac>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a1a      	ldr	r2, [pc, #104]	@ (80006f4 <GPIO_Init+0x190>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d02b      	beq.n	80006e8 <GPIO_Init+0x184>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <GPIO_Init+0x194>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d024      	beq.n	80006e4 <GPIO_Init+0x180>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a17      	ldr	r2, [pc, #92]	@ (80006fc <GPIO_Init+0x198>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d01d      	beq.n	80006e0 <GPIO_Init+0x17c>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a15      	ldr	r2, [pc, #84]	@ (8000700 <GPIO_Init+0x19c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d016      	beq.n	80006dc <GPIO_Init+0x178>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a14      	ldr	r2, [pc, #80]	@ (8000704 <GPIO_Init+0x1a0>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d00f      	beq.n	80006d8 <GPIO_Init+0x174>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <GPIO_Init+0x1a4>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d008      	beq.n	80006d4 <GPIO_Init+0x170>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <GPIO_Init+0x1a8>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d101      	bne.n	80006d0 <GPIO_Init+0x16c>
 80006cc:	2307      	movs	r3, #7
 80006ce:	e020      	b.n	8000712 <GPIO_Init+0x1ae>
 80006d0:	2300      	movs	r3, #0
 80006d2:	e01e      	b.n	8000712 <GPIO_Init+0x1ae>
 80006d4:	2306      	movs	r3, #6
 80006d6:	e01c      	b.n	8000712 <GPIO_Init+0x1ae>
 80006d8:	2305      	movs	r3, #5
 80006da:	e01a      	b.n	8000712 <GPIO_Init+0x1ae>
 80006dc:	2304      	movs	r3, #4
 80006de:	e018      	b.n	8000712 <GPIO_Init+0x1ae>
 80006e0:	2303      	movs	r3, #3
 80006e2:	e016      	b.n	8000712 <GPIO_Init+0x1ae>
 80006e4:	2302      	movs	r3, #2
 80006e6:	e014      	b.n	8000712 <GPIO_Init+0x1ae>
 80006e8:	2301      	movs	r3, #1
 80006ea:	e012      	b.n	8000712 <GPIO_Init+0x1ae>
 80006ec:	40013c00 	.word	0x40013c00
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40021000 	.word	0x40021000
 8000704:	40021400 	.word	0x40021400
 8000708:	40021800 	.word	0x40021800
 800070c:	40021c00 	.word	0x40021c00
 8000710:	2300      	movs	r3, #0
 8000712:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000714:	4b6d      	ldr	r3, [pc, #436]	@ (80008cc <GPIO_Init+0x368>)
 8000716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000718:	4a6c      	ldr	r2, [pc, #432]	@ (80008cc <GPIO_Init+0x368>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG -> EXTICR[temp1] |= (portcode << (4 *temp2));
 8000720:	4a6b      	ldr	r2, [pc, #428]	@ (80008d0 <GPIO_Init+0x36c>)
 8000722:	7afb      	ldrb	r3, [r7, #11]
 8000724:	3302      	adds	r3, #2
 8000726:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072a:	7a79      	ldrb	r1, [r7, #9]
 800072c:	7abb      	ldrb	r3, [r7, #10]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	4618      	mov	r0, r3
 8000736:	4966      	ldr	r1, [pc, #408]	@ (80008d0 <GPIO_Init+0x36c>)
 8000738:	7afb      	ldrb	r3, [r7, #11]
 800073a:	4302      	orrs	r2, r0
 800073c:	3302      	adds	r3, #2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. Enable EXTI interrupt delivery using IMR */
		EXTI -> IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000742:	4b64      	ldr	r3, [pc, #400]	@ (80008d4 <GPIO_Init+0x370>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	7912      	ldrb	r2, [r2, #4]
 800074a:	4611      	mov	r1, r2
 800074c:	2201      	movs	r2, #1
 800074e:	408a      	lsls	r2, r1
 8000750:	4611      	mov	r1, r2
 8000752:	4a60      	ldr	r2, [pc, #384]	@ (80008d4 <GPIO_Init+0x370>)
 8000754:	430b      	orrs	r3, r1
 8000756:	6013      	str	r3, [r2, #0]
	}

	/* 3. Configure the speed */
	temp = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	79db      	ldrb	r3, [r3, #7]
 8000760:	461a      	mov	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	2103      	movs	r1, #3
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	400a      	ands	r2, r1
 800078a:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6899      	ldr	r1, [r3, #8]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	430a      	orrs	r2, r1
 800079a:	609a      	str	r2, [r3, #8]

	/* 4. Configure the Pull-up / Pull-down */
	temp = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7a1b      	ldrb	r3, [r3, #8]
 80007a4:	461a      	mov	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2103      	movs	r1, #3
 80007c0:	fa01 f303 	lsl.w	r3, r1, r3
 80007c4:	43db      	mvns	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	400a      	ands	r2, r1
 80007ce:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68d9      	ldr	r1, [r3, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	430a      	orrs	r2, r1
 80007de:	60da      	str	r2, [r3, #12]

	/* 5. Configure the output type */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d81f      	bhi.n	8000828 <GPIO_Init+0x2c4>
		temp = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	799b      	ldrb	r3, [r3, #6]
 80007f0:	461a      	mov	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	4619      	mov	r1, r3
 8000808:	2301      	movs	r3, #1
 800080a:	408b      	lsls	r3, r1
 800080c:	43db      	mvns	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	400a      	ands	r2, r1
 8000816:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6859      	ldr	r1, [r3, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	430a      	orrs	r2, r1
 8000826:	605a      	str	r2, [r3, #4]
	}

	/* Configure Alternate Function mode */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	795b      	ldrb	r3, [r3, #5]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d149      	bne.n	80008c4 <GPIO_Init+0x360>

		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	791b      	ldrb	r3, [r3, #4]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	723b      	strb	r3, [r7, #8]

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber <= 7){
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	2b07      	cmp	r3, #7
 8000840:	d820      	bhi.n	8000884 <GPIO_Init+0x320>
			temp = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a5b      	ldrb	r3, [r3, #9]
 800084a:	461a      	mov	r2, r3
 800084c:	7a3b      	ldrb	r3, [r7, #8]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRL &= ~(0xf << (4 * temp1));
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6a1a      	ldr	r2, [r3, #32]
 800085c:	7a3b      	ldrb	r3, [r7, #8]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	210f      	movs	r1, #15
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	4619      	mov	r1, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	400a      	ands	r2, r1
 8000870:	621a      	str	r2, [r3, #32]
			pGPIOHandle -> pGPIOx ->AFRL |= temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a19      	ldr	r1, [r3, #32]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	430a      	orrs	r2, r1
 8000880:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
		}
	}
}
 8000882:	e01f      	b.n	80008c4 <GPIO_Init+0x360>
			temp = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	7a5b      	ldrb	r3, [r3, #9]
 800088c:	461a      	mov	r2, r3
 800088e:	7a3b      	ldrb	r3, [r7, #8]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800089e:	7a3b      	ldrb	r3, [r7, #8]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	210f      	movs	r1, #15
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	4619      	mov	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	400a      	ands	r2, r1
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	430a      	orrs	r2, r1
 80008c2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40013c00 	.word	0x40013c00

080008d8 <GPIO_ReadFromInputPin>:
 *
 * @return		- 0 or 1
 *
 * @note		-
 ************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t) ((pGPIOx -> IDR >> PinNumber) & 0x00000001);  //read pin value
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691a      	ldr	r2, [r3, #16]
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	fa22 f303 	lsr.w	r3, r2, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
	return value;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <RCC_GetPCLK1Value>:
 *
 * @return		-uint32_t periperal clk1 value
 *
 * @note		-
 */
uint32_t  RCC_GetPCLK1Value (void){
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0

	uint32_t  pclk1, systemClk;
	uint16_t ahbp;
	uint8_t clkSrc, temp, apb1p;

	clkSrc = (RCC -> CFGR >> 2) & 0x3;
 800090a:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <RCC_GetPCLK1Value+0x90>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	089b      	lsrs	r3, r3, #2
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	723b      	strb	r3, [r7, #8]

	/* get system clk freq */
	if(clkSrc == 0) systemClk = HSI_CLK_FREQ;
 8000918:	7a3b      	ldrb	r3, [r7, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <RCC_GetPCLK1Value+0x20>
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <RCC_GetPCLK1Value+0x94>)
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e004      	b.n	800092e <RCC_GetPCLK1Value+0x2a>
	else if(clkSrc == 1) systemClk = HSE_CLK_FREQ;
 8000924:	7a3b      	ldrb	r3, [r7, #8]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d101      	bne.n	800092e <RCC_GetPCLK1Value+0x2a>
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <RCC_GetPCLK1Value+0x98>)
 800092c:	60fb      	str	r3, [r7, #12]

	/* get ahb prescaler */
	temp = (RCC -> CFGR >> 4) & 0xF;
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <RCC_GetPCLK1Value+0x90>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	091b      	lsrs	r3, r3, #4
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	71fb      	strb	r3, [r7, #7]

	if(temp < 8) ahbp = 1;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b07      	cmp	r3, #7
 8000940:	d802      	bhi.n	8000948 <RCC_GetPCLK1Value+0x44>
 8000942:	2301      	movs	r3, #1
 8000944:	817b      	strh	r3, [r7, #10]
 8000946:	e005      	b.n	8000954 <RCC_GetPCLK1Value+0x50>
	else ahbp = ahb_PreScaler[temp - 8];
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	3b08      	subs	r3, #8
 800094c:	4a14      	ldr	r2, [pc, #80]	@ (80009a0 <RCC_GetPCLK1Value+0x9c>)
 800094e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000952:	817b      	strh	r3, [r7, #10]

	/* get apb2 prescaler */
	temp = (RCC -> CFGR >> 13) & 0x7;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <RCC_GetPCLK1Value+0x90>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	0b5b      	lsrs	r3, r3, #13
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	71fb      	strb	r3, [r7, #7]

	if(temp < 4) apb1p = 1;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d802      	bhi.n	800096e <RCC_GetPCLK1Value+0x6a>
 8000968:	2301      	movs	r3, #1
 800096a:	727b      	strb	r3, [r7, #9]
 800096c:	e004      	b.n	8000978 <RCC_GetPCLK1Value+0x74>
	else apb1p = abp1_PreScaler[temp - 4];
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	3b04      	subs	r3, #4
 8000972:	4a0c      	ldr	r2, [pc, #48]	@ (80009a4 <RCC_GetPCLK1Value+0xa0>)
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	727b      	strb	r3, [r7, #9]

	pclk1 = (systemClk / ahbp /apb1p);
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000980:	7a7b      	ldrb	r3, [r7, #9]
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000988:	683b      	ldr	r3, [r7, #0]


}
 800098a:	4618      	mov	r0, r3
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40023800 	.word	0x40023800
 8000998:	00f42400 	.word	0x00f42400
 800099c:	007a1200 	.word	0x007a1200
 80009a0:	20000004 	.word	0x20000004
 80009a4:	20000018 	.word	0x20000018

080009a8 <RCC_GetPCLK2Value>:
 *
 * @return		-uint32_t periperal clk2 value
 *
 * @note		-
 */
uint32_t  RCC_GetPCLK2Value (void){
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0

	uint32_t  pclk2, systemClk;
	uint16_t ahbp;
	uint8_t clkSrc, temp, apb2p;

	clkSrc = (RCC -> CFGR >> 2) & 0x3;
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <RCC_GetPCLK2Value+0x90>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	723b      	strb	r3, [r7, #8]

	if(clkSrc == 0) systemClk = HSI_CLK_FREQ;
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <RCC_GetPCLK2Value+0x20>
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <RCC_GetPCLK2Value+0x94>)
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e004      	b.n	80009d2 <RCC_GetPCLK2Value+0x2a>
	else if(clkSrc == 1) systemClk = HSE_CLK_FREQ;
 80009c8:	7a3b      	ldrb	r3, [r7, #8]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d101      	bne.n	80009d2 <RCC_GetPCLK2Value+0x2a>
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <RCC_GetPCLK2Value+0x98>)
 80009d0:	60fb      	str	r3, [r7, #12]

	temp = (RCC -> CFGR >> 4) & 0xF;
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <RCC_GetPCLK2Value+0x90>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	091b      	lsrs	r3, r3, #4
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	71fb      	strb	r3, [r7, #7]

	if(temp < 8) ahbp = 1;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b07      	cmp	r3, #7
 80009e4:	d802      	bhi.n	80009ec <RCC_GetPCLK2Value+0x44>
 80009e6:	2301      	movs	r3, #1
 80009e8:	817b      	strh	r3, [r7, #10]
 80009ea:	e005      	b.n	80009f8 <RCC_GetPCLK2Value+0x50>
	else ahbp = ahb_PreScaler[temp - 8];
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	3b08      	subs	r3, #8
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <RCC_GetPCLK2Value+0x9c>)
 80009f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f6:	817b      	strh	r3, [r7, #10]


	temp = (RCC -> CFGR >> 10) & 0x7;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <RCC_GetPCLK2Value+0x90>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	0a9b      	lsrs	r3, r3, #10
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	f003 0307 	and.w	r3, r3, #7
 8000a04:	71fb      	strb	r3, [r7, #7]

	if(temp < 4) apb2p = 1;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d802      	bhi.n	8000a12 <RCC_GetPCLK2Value+0x6a>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	727b      	strb	r3, [r7, #9]
 8000a10:	e004      	b.n	8000a1c <RCC_GetPCLK2Value+0x74>
	else apb2p = abp2_PreScaler[temp - 4];
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	3b04      	subs	r3, #4
 8000a16:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <RCC_GetPCLK2Value+0xa0>)
 8000a18:	5cd3      	ldrb	r3, [r2, r3]
 8000a1a:	727b      	strb	r3, [r7, #9]

	pclk2 = (systemClk / ahbp /apb2p);
 8000a1c:	897b      	ldrh	r3, [r7, #10]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000a2c:	683b      	ldr	r3, [r7, #0]


}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	00f42400 	.word	0x00f42400
 8000a40:	007a1200 	.word	0x007a1200
 8000a44:	20000004 	.word	0x20000004
 8000a48:	2000001c 	.word	0x2000001c

08000a4c <USART_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE){
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d141      	bne.n	8000ae2 <USART_PeriClockControl+0x96>
		if(pUSARTx == USART1) USART1_PCLK_EN();
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a43      	ldr	r2, [pc, #268]	@ (8000b70 <USART_PeriClockControl+0x124>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d106      	bne.n	8000a74 <USART_PeriClockControl+0x28>
 8000a66:	4b43      	ldr	r3, [pc, #268]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a42      	ldr	r2, [pc, #264]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (pUSARTx == UART5) UART5_PCLK_DI();
		else if (pUSARTx == USART6) USART6_PCLK_DI();

	}

}
 8000a72:	e077      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2) USART2_PCLK_EN();
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a40      	ldr	r2, [pc, #256]	@ (8000b78 <USART_PeriClockControl+0x12c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d106      	bne.n	8000a8a <USART_PeriClockControl+0x3e>
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a3c      	ldr	r2, [pc, #240]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a88:	e06c      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3) USART3_PCLK_EN();
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b7c <USART_PeriClockControl+0x130>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d106      	bne.n	8000aa0 <USART_PeriClockControl+0x54>
 8000a92:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a37      	ldr	r2, [pc, #220]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a9e:	e061      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4) UART4_PCLK_EN();
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a37      	ldr	r2, [pc, #220]	@ (8000b80 <USART_PeriClockControl+0x134>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d106      	bne.n	8000ab6 <USART_PeriClockControl+0x6a>
 8000aa8:	4b32      	ldr	r3, [pc, #200]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	4a31      	ldr	r2, [pc, #196]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000aae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ab2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ab4:	e056      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5) UART5_PCLK_EN();
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <USART_PeriClockControl+0x138>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d106      	bne.n	8000acc <USART_PeriClockControl+0x80>
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000ac4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000aca:	e04b      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6) USART6_PCLK_EN();
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a2e      	ldr	r2, [pc, #184]	@ (8000b88 <USART_PeriClockControl+0x13c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d147      	bne.n	8000b64 <USART_PeriClockControl+0x118>
 8000ad4:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad8:	4a26      	ldr	r2, [pc, #152]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ae0:	e040      	b.n	8000b64 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1) USART1_PCLK_EN();
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <USART_PeriClockControl+0x124>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d106      	bne.n	8000af8 <USART_PeriClockControl+0xac>
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a21      	ldr	r2, [pc, #132]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000af6:	e035      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2) USART2_PCLK_DI();
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <USART_PeriClockControl+0x12c>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d106      	bne.n	8000b0e <USART_PeriClockControl+0xc2>
 8000b00:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	4a1b      	ldr	r2, [pc, #108]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b06:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000b0a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b0c:	e02a      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3) USART3_PCLK_DI();
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a1a      	ldr	r2, [pc, #104]	@ (8000b7c <USART_PeriClockControl+0x130>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d106      	bne.n	8000b24 <USART_PeriClockControl+0xd8>
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b22:	e01f      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4) UART4_PCLK_DI();
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a16      	ldr	r2, [pc, #88]	@ (8000b80 <USART_PeriClockControl+0x134>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d106      	bne.n	8000b3a <USART_PeriClockControl+0xee>
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	4a10      	ldr	r2, [pc, #64]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b32:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b38:	e014      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5) UART5_PCLK_DI();
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a11      	ldr	r2, [pc, #68]	@ (8000b84 <USART_PeriClockControl+0x138>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d106      	bne.n	8000b50 <USART_PeriClockControl+0x104>
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a0b      	ldr	r2, [pc, #44]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b4e:	e009      	b.n	8000b64 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6) USART6_PCLK_DI();
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <USART_PeriClockControl+0x13c>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d105      	bne.n	8000b64 <USART_PeriClockControl+0x118>
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5c:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <USART_PeriClockControl+0x128>)
 8000b5e:	f023 0320 	bic.w	r3, r3, #32
 8000b62:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40004800 	.word	0x40004800
 8000b80:	40004c00 	.word	0x40004c00
 8000b84:	40005000 	.word	0x40005000
 8000b88:	40011400 	.word	0x40011400

08000b8c <USART_Init>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]

	/*Enable Peripheral clock */
	USART_PeriClockControl(pUSARTHandle -> pUSARTx, ENABLE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff54 	bl	8000a4c <USART_PeriClockControl>

	/******************************** Configuration of CR1******************************************/

	/* Enable USART Tx and Rx engines according to the USART_Mode configuration item */
	if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7a1b      	ldrb	r3, [r3, #8]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <USART_Init+0x2a>
	{
		/* enable the Receiver bit field*/
		tempreg |= (1 << USART_CR1_RE);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e010      	b.n	8000bd8 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7a1b      	ldrb	r3, [r3, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d104      	bne.n	8000bc8 <USART_Init+0x3c>
	{
		/* enable the Transmitter bit field */
		tempreg |= ( 1 << USART_CR1_TE );
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e007      	b.n	8000bd8 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7a1b      	ldrb	r3, [r3, #8]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d103      	bne.n	8000bd8 <USART_Init+0x4c>
	{
		/* enable the both Transmitter and Receiver bit fields */
		tempreg |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f043 030c 	orr.w	r3, r3, #12
 8000bd6:	60fb      	str	r3, [r7, #12]
	}

	/* Word length configuration item */
	tempreg |= pUSARTHandle->USART_Config.USART_DataSize << USART_CR1_M ;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7a5b      	ldrb	r3, [r3, #9]
 8000bdc:	031b      	lsls	r3, r3, #12
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]


	/*Configuration of parity control bit fields */
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7adb      	ldrb	r3, [r3, #11]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d104      	bne.n	8000bf6 <USART_Init+0x6a>
	{
		/* enale the parity control */
		tempreg |= ( 1 << USART_CR1_PCE);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e00b      	b.n	8000c0e <USART_Init+0x82>

		/*enable EVEN parity */
		/* Not required because by default EVEN parity will be selected once you enable the parity control */

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7adb      	ldrb	r3, [r3, #11]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d107      	bne.n	8000c0e <USART_Init+0x82>
	{
		/* enable the parity control */
		tempreg |= ( 1 << USART_CR1_PCE);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c04:	60fb      	str	r3, [r7, #12]

		/* enable ODD parity */
		tempreg |= ( 1 << USART_CR1_PS);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c0c:	60fb      	str	r3, [r7, #12]

	}

   /*Program the CR1 register */
	pUSARTHandle->pUSARTx->CR1 |= tempreg;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68d9      	ldr	r1, [r3, #12]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	60da      	str	r2, [r3, #12]


	/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]

	/* configure the number of stop bits inserted during USART frame transmission */
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopbits << USART_CR2_STOP1_0;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7a9b      	ldrb	r3, [r3, #10]
 8000c26:	031b      	lsls	r3, r3, #12
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]

	/* Program the CR2 register */
	pUSARTHandle->pUSARTx->CR2 |= tempreg;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6919      	ldr	r1, [r3, #16]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]

	/* Configuration of USART hardware flow control */
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7b1b      	ldrb	r3, [r3, #12]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d104      	bne.n	8000c54 <USART_Init+0xc8>
	{
		/* enable CTS flow control */
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e014      	b.n	8000c7e <USART_Init+0xf2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7b1b      	ldrb	r3, [r3, #12]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d104      	bne.n	8000c66 <USART_Init+0xda>
	{
		/* enable RTS flow control */
		tempreg |= (1 << USART_CR3_RTSE);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e00b      	b.n	8000c7e <USART_Init+0xf2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7b1b      	ldrb	r3, [r3, #12]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d107      	bne.n	8000c7e <USART_Init+0xf2>
	{
		/* enable both CTS and RTS Flow control */
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c74:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c7c:	60fb      	str	r3, [r7, #12]

	}

	/* program the CR3 reg */
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	/*code to configure the baud rate */

	USART_SetBaudRate(pUSARTHandle ->pUSARTx, USART_BAUD_9600);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f820 	bl	8000cd4 <USART_SetBaudRate>

}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <USART_PeripheralControl>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d106      	bne.n	8000cbc <USART_PeripheralControl+0x20>
		pUSARTx -> CR1 |= (1 << USART_CR1_UE);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60da      	str	r2, [r3, #12]
	}
	else{
		pUSARTx -> CR1 &= ~(1 << USART_CR1_UE);
	}

}
 8000cba:	e005      	b.n	8000cc8 <USART_PeripheralControl+0x2c>
		pUSARTx -> CR1 &= ~(1 << USART_CR1_UE);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	60da      	str	r2, [r3, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
	uint32_t usart_clkfreq;

	/* variables to hold mantissa and fraction */
	uint32_t  usartdiv, usartdiv_mpart, usartdiv_fpart;

	uint32_t temp = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]

	if( (pUSARTx == USART1) || (pUSARTx == USART6)){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8000dd8 <USART_SetBaudRate+0x104>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d003      	beq.n	8000cf2 <USART_SetBaudRate+0x1e>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a3b      	ldr	r2, [pc, #236]	@ (8000ddc <USART_SetBaudRate+0x108>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d103      	bne.n	8000cfa <USART_SetBaudRate+0x26>

		usart_clkfreq = RCC_GetPCLK2Value();
 8000cf2:	f7ff fe59 	bl	80009a8 <RCC_GetPCLK2Value>
 8000cf6:	61f8      	str	r0, [r7, #28]
 8000cf8:	e002      	b.n	8000d00 <USART_SetBaudRate+0x2c>
	}
	else{

		usart_clkfreq = RCC_GetPCLK1Value();
 8000cfa:	f7ff fe03 	bl	8000904 <RCC_GetPCLK1Value>
 8000cfe:	61f8      	str	r0, [r7, #28]

	}

	if(pUSARTx ->CR1 & (1 << USART_CR1_OVER8)){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d02a      	beq.n	8000d62 <USART_SetBaudRate+0x8e>

		/* over8 = 1 */
		/* usartdiv = (pclk/(8*(2-OVER8)*Baudrate) * 100 = 12.5*pclk/1* Baudrate  => 25 *pclk/ 2* Baudrate */

		usartdiv = 25 * usart_clkfreq /(2 * BaudRate);
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	009a      	lsls	r2, r3, #2
 8000d16:	441a      	add	r2, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d20:	60fb      	str	r3, [r7, #12]
		/* calculate mantissa */
		usartdiv_mpart = usartdiv / 100 ;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4a2e      	ldr	r2, [pc, #184]	@ (8000de0 <USART_SetBaudRate+0x10c>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	61bb      	str	r3, [r7, #24]

		/* calculate fraction. add 50 to round it up */
		usartdiv_fpart = ((usartdiv - (usartdiv_mpart * 100)) * 8) + 50;
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2264      	movs	r2, #100	@ 0x64
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	3332      	adds	r3, #50	@ 0x32
 8000d3e:	617b      	str	r3, [r7, #20]
		usartdiv_fpart /= 100;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	4a27      	ldr	r2, [pc, #156]	@ (8000de0 <USART_SetBaudRate+0x10c>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	095b      	lsrs	r3, r3, #5
 8000d4a:	617b      	str	r3, [r7, #20]

		if(usartdiv_fpart > 7){
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b07      	cmp	r3, #7
 8000d50:	d902      	bls.n	8000d58 <USART_SetBaudRate+0x84>
			usartdiv_mpart += 1;
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	3301      	adds	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
		}
		usartdiv_fpart &= (uint8_t)(0x07);
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e029      	b.n	8000db6 <USART_SetBaudRate+0xe2>
	else {

		/* over8 = 0 */
		/* usartdiv = (pclk/(8*(2-OVER8)*Baudrate) * 100 = 12.5*pclk/2* Baudrate  => 25 *pclk/ 4* Baudrate */

		usartdiv = 25 * usart_clkfreq /(4 * BaudRate);
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	009a      	lsls	r2, r3, #2
 8000d6c:	441a      	add	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	60fb      	str	r3, [r7, #12]

		/* calculate mantissa */
		usartdiv_mpart = usartdiv / 100 ;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4a19      	ldr	r2, [pc, #100]	@ (8000de0 <USART_SetBaudRate+0x10c>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	095b      	lsrs	r3, r3, #5
 8000d82:	61bb      	str	r3, [r7, #24]

		/* calculate fraction. add 50 to round it up */
		usartdiv_fpart = ((usartdiv - (usartdiv_mpart * 100)) * 16) + 50;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	2264      	movs	r2, #100	@ 0x64
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	3332      	adds	r3, #50	@ 0x32
 8000d94:	617b      	str	r3, [r7, #20]
		usartdiv_fpart /= 100;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <USART_SetBaudRate+0x10c>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	617b      	str	r3, [r7, #20]

		if(usartdiv_fpart > 15){
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d902      	bls.n	8000dae <USART_SetBaudRate+0xda>
			usartdiv_mpart += 1;
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	3301      	adds	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
		}
		usartdiv_fpart &= (uint8_t)(0x0F);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	617b      	str	r3, [r7, #20]

	}


	/* program the baud rate usartdiv in BRR */
	temp = (usartdiv_mpart << 4);
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
	temp |= usartdiv_fpart;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]

	pUSARTx ->BRR |= temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	609a      	str	r2, [r3, #8]


}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400
 8000de0:	51eb851f 	.word	0x51eb851f

08000de4 <USART_SendDataIT>:
 *
 * @return		- returns the api state : USART_STATUS_BUSY_TX /USART_STATUS_BUSY_RX /USART_STATUS_READY
 *
 * @note		-
 */
uint8_t  USART_SendDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]

	uint8_t busystate = pUSARTHandle -> TxState;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	7e1b      	ldrb	r3, [r3, #24]
 8000df4:	75fb      	strb	r3, [r7, #23]

	if(pUSARTHandle ->TxState != USART_STATUS_BUSY_TX) {
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d010      	beq.n	8000e20 <USART_SendDataIT+0x3c>

		pUSARTHandle ->TxState = USART_STATUS_BUSY_TX;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2201      	movs	r2, #1
 8000e02:	761a      	strb	r2, [r3, #24]
		pUSARTHandle ->TxBuffer = pTxBuffer;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	611a      	str	r2, [r3, #16]
		pUSARTHandle ->TxLen = Len;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	621a      	str	r2, [r3, #32]

		/* Enable TX interrupt */
		pUSARTHandle ->pUSARTx ->CR1 |= (1 << USART_CR1_TXEIE);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e1e:	60da      	str	r2, [r3, #12]

	}

	return busystate;
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <USART_IRQInterruptConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d144      	bne.n	8000ecc <USART_IRQInterruptConfig+0xa0>
		if(IRQNumber <= 31){
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b1f      	cmp	r3, #31
 8000e46:	d809      	bhi.n	8000e5c <USART_IRQInterruptConfig+0x30>
			/* configure ISER0 */
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000e48:	4b45      	ldr	r3, [pc, #276]	@ (8000f60 <USART_IRQInterruptConfig+0x134>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f202 	lsl.w	r2, r1, r2
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a42      	ldr	r2, [pc, #264]	@ (8000f60 <USART_IRQInterruptConfig+0x134>)
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 32 && IRQNumber < 64){
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b1f      	cmp	r3, #31
 8000e60:	d90e      	bls.n	8000e80 <USART_IRQInterruptConfig+0x54>
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e66:	d80b      	bhi.n	8000e80 <USART_IRQInterruptConfig+0x54>
			/* configure ISER1 */
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000e68:	4b3e      	ldr	r3, [pc, #248]	@ (8000f64 <USART_IRQInterruptConfig+0x138>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	79fa      	ldrb	r2, [r7, #7]
 8000e6e:	f002 021f 	and.w	r2, r2, #31
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f64 <USART_IRQInterruptConfig+0x138>)
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 64 && IRQNumber < 96){
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e84:	d90e      	bls.n	8000ea4 <USART_IRQInterruptConfig+0x78>
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e8a:	d80b      	bhi.n	8000ea4 <USART_IRQInterruptConfig+0x78>
			/* configure ISER2 */
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000e8c:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <USART_IRQInterruptConfig+0x13c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	79fa      	ldrb	r2, [r7, #7]
 8000e92:	f002 021f 	and.w	r2, r2, #31
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4a32      	ldr	r2, [pc, #200]	@ (8000f68 <USART_IRQInterruptConfig+0x13c>)
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 96 && IRQNumber < 128){
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ea8:	d954      	bls.n	8000f54 <USART_IRQInterruptConfig+0x128>
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db50      	blt.n	8000f54 <USART_IRQInterruptConfig+0x128>
			/* configure ISER3 */
			*NVIC_ISER3 |= (1 << (IRQNumber % 32));
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f6c <USART_IRQInterruptConfig+0x140>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	f002 021f 	and.w	r2, r2, #31
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4a29      	ldr	r2, [pc, #164]	@ (8000f6c <USART_IRQInterruptConfig+0x140>)
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	6013      	str	r3, [r2, #0]
		}

	}


}
 8000eca:	e043      	b.n	8000f54 <USART_IRQInterruptConfig+0x128>
		if(IRQNumber <= 31){
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b1f      	cmp	r3, #31
 8000ed0:	d809      	bhi.n	8000ee6 <USART_IRQInterruptConfig+0xba>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000ed2:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <USART_IRQInterruptConfig+0x144>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4a23      	ldr	r2, [pc, #140]	@ (8000f70 <USART_IRQInterruptConfig+0x144>)
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 32 && IRQNumber < 64){
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b1f      	cmp	r3, #31
 8000eea:	d90e      	bls.n	8000f0a <USART_IRQInterruptConfig+0xde>
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ef0:	d80b      	bhi.n	8000f0a <USART_IRQInterruptConfig+0xde>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000ef2:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <USART_IRQInterruptConfig+0x148>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	f002 021f 	and.w	r2, r2, #31
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f202 	lsl.w	r2, r1, r2
 8000f02:	4611      	mov	r1, r2
 8000f04:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <USART_IRQInterruptConfig+0x148>)
 8000f06:	430b      	orrs	r3, r1
 8000f08:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 64 && IRQNumber < 96){
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f0e:	d90e      	bls.n	8000f2e <USART_IRQInterruptConfig+0x102>
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b5f      	cmp	r3, #95	@ 0x5f
 8000f14:	d80b      	bhi.n	8000f2e <USART_IRQInterruptConfig+0x102>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8000f16:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <USART_IRQInterruptConfig+0x14c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	f002 021f 	and.w	r2, r2, #31
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4a13      	ldr	r2, [pc, #76]	@ (8000f78 <USART_IRQInterruptConfig+0x14c>)
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 96 && IRQNumber < 128){
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b5f      	cmp	r3, #95	@ 0x5f
 8000f32:	d90f      	bls.n	8000f54 <USART_IRQInterruptConfig+0x128>
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0b      	blt.n	8000f54 <USART_IRQInterruptConfig+0x128>
			*NVIC_ICER3 |= (1 << (IRQNumber % 32));
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <USART_IRQInterruptConfig+0x150>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	79fa      	ldrb	r2, [r7, #7]
 8000f42:	f002 021f 	and.w	r2, r2, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <USART_IRQInterruptConfig+0x150>)
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000e104 	.word	0xe000e104
 8000f68:	e000e108 	.word	0xe000e108
 8000f6c:	e000e10c 	.word	0xe000e10c
 8000f70:	e000e180 	.word	0xe000e180
 8000f74:	e000e184 	.word	0xe000e184
 8000f78:	e000e188 	.word	0xe000e188
 8000f7c:	e000e18c 	.word	0xe000e18c

08000f80 <USART_IRQPriorityConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	460a      	mov	r2, r1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]

	uint8_t iprx = IRQNumber / 4;  			/* ipr reg number offset address */
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;    /* position in iprx reg */
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_position = (8 * iprx_section) + (8 - NO_IPR_BITS_IMPLEMENTED);  //only upper 4 bits are implemented in IPR
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_position);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000fb0:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	79b9      	ldrb	r1, [r7, #6]
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000fc8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]


}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
	...

08000fdc <__libc_init_array>:
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	4d0d      	ldr	r5, [pc, #52]	@ (8001014 <__libc_init_array+0x38>)
 8000fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8001018 <__libc_init_array+0x3c>)
 8000fe2:	1b64      	subs	r4, r4, r5
 8000fe4:	10a4      	asrs	r4, r4, #2
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	42a6      	cmp	r6, r4
 8000fea:	d109      	bne.n	8001000 <__libc_init_array+0x24>
 8000fec:	4d0b      	ldr	r5, [pc, #44]	@ (800101c <__libc_init_array+0x40>)
 8000fee:	4c0c      	ldr	r4, [pc, #48]	@ (8001020 <__libc_init_array+0x44>)
 8000ff0:	f000 f818 	bl	8001024 <_init>
 8000ff4:	1b64      	subs	r4, r4, r5
 8000ff6:	10a4      	asrs	r4, r4, #2
 8000ff8:	2600      	movs	r6, #0
 8000ffa:	42a6      	cmp	r6, r4
 8000ffc:	d105      	bne.n	800100a <__libc_init_array+0x2e>
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	f855 3b04 	ldr.w	r3, [r5], #4
 8001004:	4798      	blx	r3
 8001006:	3601      	adds	r6, #1
 8001008:	e7ee      	b.n	8000fe8 <__libc_init_array+0xc>
 800100a:	f855 3b04 	ldr.w	r3, [r5], #4
 800100e:	4798      	blx	r3
 8001010:	3601      	adds	r6, #1
 8001012:	e7f2      	b.n	8000ffa <__libc_init_array+0x1e>
 8001014:	08001074 	.word	0x08001074
 8001018:	08001074 	.word	0x08001074
 800101c:	08001074 	.word	0x08001074
 8001020:	08001078 	.word	0x08001078

08001024 <_init>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	bf00      	nop
 8001028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102a:	bc08      	pop	{r3}
 800102c:	469e      	mov	lr, r3
 800102e:	4770      	bx	lr

08001030 <_fini>:
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001032:	bf00      	nop
 8001034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001036:	bc08      	pop	{r3}
 8001038:	469e      	mov	lr, r3
 800103a:	4770      	bx	lr
