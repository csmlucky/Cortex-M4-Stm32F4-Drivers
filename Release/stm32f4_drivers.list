
stm32f4_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003560  08003560  00004560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003638  08003638  00005074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003638  08003638  00004638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003640  08003640  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003640  08003640  00004640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003644  08003644  00004644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08003648  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000074  080036bc  00005074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080036bc  0000524c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034c9  00000000  00000000  0000509e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d58  00000000  00000000  00008567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  000092c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000336  00000000  00000000  000096f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000035c7  00000000  00000000  00009a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000116c  00000000  00000000  0000cfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0000e159  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000192c  00000000  00000000  0000e19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  0000fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003548 	.word	0x08003548

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08003548 	.word	0x08003548

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NOP>:
 #define RTC_DR_YT3_0				20



 static inline void __NOP(void)
 {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
     __asm volatile ("nop");
 80002b4:	bf00      	nop
 }
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr

080002be <LCD_Init>:
 *
 * @return		-
 *
 * @note		-
 */
void LCD_Init(void){
 80002be:	b580      	push	{r7, lr}
 80002c0:	af00      	add	r7, sp, #0

	LCD_I2C_GPIOInits();
 80002c2:	f000 f859 	bl	8000378 <LCD_I2C_GPIOInits>

	LCD_I2CInits();
 80002c6:	f000 f87d 	bl	80003c4 <LCD_I2CInits>

	delay_ms(50);
 80002ca:	2032      	movs	r0, #50	@ 0x32
 80002cc:	f000 f952 	bl	8000574 <delay_ms>

	//LCD_AddrTest();
	/* for some reason lcd is not acking for the first byte work around*/
	LCD_SendDummy();
 80002d0:	f000 f9b0 	bl	8000634 <LCD_SendDummy>

	LCD_StartupCmds();
 80002d4:	f000 f898 	bl	8000408 <LCD_StartupCmds>

	LCD_CustmConfigCmds();
 80002d8:	f000 f8b6 	bl	8000448 <LCD_CustmConfigCmds>


}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <LCD_PrintString>:
 *
 * @return		-
 *
 * @note		-
 */
void LCD_PrintString(char *lcdBuf){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]

	while(*lcdBuf != '\0'){
 80002e8:	e008      	b.n	80002fc <LCD_PrintString+0x1c>

		LCD_Write((uint8_t)*lcdBuf, LCD_RS_DATA);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2101      	movs	r1, #1
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f8cb 	bl	800048c <LCD_Write>
		lcdBuf ++;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3301      	adds	r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
	while(*lcdBuf != '\0'){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f2      	bne.n	80002ea <LCD_PrintString+0xa>

	}
}
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <LCD_DisplayClr>:
 *
 * @note		-
 */

/********************* **********************************/
void LCD_DisplayClr(void){
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0

	/* Send Display clear */
	LCD_Write((LCD_CNFG_CMD_DIS_CLEAR), LCD_RS_CMD);
 8000312:	2100      	movs	r1, #0
 8000314:	2001      	movs	r0, #1
 8000316:	f000 f8b9 	bl	800048c <LCD_Write>
	delay_ms(2);
 800031a:	2002      	movs	r0, #2
 800031c:	f000 f92a 	bl	8000574 <delay_ms>

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <LCD_SetCursor>:
 *
 * @note		-
 */

/********************* **********************************/
void LCD_SetCursor(uint8_t row, uint8_t column){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	460a      	mov	r2, r1
 800032e:	71fb      	strb	r3, [r7, #7]
 8000330:	4613      	mov	r3, r2
 8000332:	71bb      	strb	r3, [r7, #6]

	column--;
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	3b01      	subs	r3, #1
 8000338:	71bb      	strb	r3, [r7, #6]
	  switch (row)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d002      	beq.n	8000346 <LCD_SetCursor+0x22>
 8000340:	2b02      	cmp	r3, #2
 8000342:	d00a      	beq.n	800035a <LCD_SetCursor+0x36>
	    case 2:
	      /* Set cursor to 2nd row address and add index*/
	        LCD_Write((column |= 0xC0), LCD_RS_CMD);
	      break;
	    default:
	      break;
 8000344:	e013      	b.n	800036e <LCD_SetCursor+0x4a>
	      LCD_Write((column |= 0x80), LCD_RS_CMD);
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800034c:	71bb      	strb	r3, [r7, #6]
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f89a 	bl	800048c <LCD_Write>
	      break;
 8000358:	e009      	b.n	800036e <LCD_SetCursor+0x4a>
	        LCD_Write((column |= 0xC0), LCD_RS_CMD);
 800035a:	79bb      	ldrb	r3, [r7, #6]
 800035c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000360:	71bb      	strb	r3, [r7, #6]
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f890 	bl	800048c <LCD_Write>
	      break;
 800036c:	bf00      	nop
	  }

}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <LCD_I2C_GPIOInits>:
/*****************************************************************************************************
 * Helperfns
 *********************************************************************************************************/

/************************ Configure GPIO pin as I2C fn *******************************************/
static void LCD_I2C_GPIOInits(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

		GPIO_I2CPins.pGPIOx = LCD_I2C_GPIO_PORT;
 800037c:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 800037e:	4a10      	ldr	r2, [pc, #64]	@ (80003c0 <LCD_I2C_GPIOInits+0x48>)
 8000380:	601a      	str	r2, [r3, #0]
		GPIO_I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 8000384:	2202      	movs	r2, #2
 8000386:	715a      	strb	r2, [r3, #5]
		GPIO_I2CPins.GPIO_PinConfig.GPIO_AltrFnMode = 4;
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 800038a:	2204      	movs	r2, #4
 800038c:	725a      	strb	r2, [r3, #9]
		GPIO_I2CPins.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_HIGH;
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 8000390:	2203      	movs	r2, #3
 8000392:	71da      	strb	r2, [r3, #7]
		GPIO_I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000394:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 8000396:	2201      	movs	r2, #1
 8000398:	719a      	strb	r2, [r3, #6]
		GPIO_I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = LCD_I2C_PU;
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 800039c:	2201      	movs	r2, #1
 800039e:	721a      	strb	r2, [r3, #8]

		/* SDA */
		GPIO_I2CPins.GPIO_PinConfig.GPIO_PinNumber = LCD_I2C_SDA;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 80003a2:	2209      	movs	r2, #9
 80003a4:	711a      	strb	r2, [r3, #4]
		GPIO_Init(&GPIO_I2CPins);
 80003a6:	4805      	ldr	r0, [pc, #20]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 80003a8:	f000 fc58 	bl	8000c5c <GPIO_Init>

		/* SCL */
		GPIO_I2CPins.GPIO_PinConfig.GPIO_PinNumber = LCD_I2C_SCL;
 80003ac:	4b03      	ldr	r3, [pc, #12]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 80003ae:	2208      	movs	r2, #8
 80003b0:	711a      	strb	r2, [r3, #4]
		GPIO_Init(&GPIO_I2CPins);
 80003b2:	4802      	ldr	r0, [pc, #8]	@ (80003bc <LCD_I2C_GPIOInits+0x44>)
 80003b4:	f000 fc52 	bl	8000c5c <GPIO_Init>

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200000bc 	.word	0x200000bc
 80003c0:	40020400 	.word	0x40020400

080003c4 <LCD_I2CInits>:


/*****************************Configure I2C ***********************************************/
static void LCD_I2CInits(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

		I2CHandle.pI2Cx = LCD_I2C;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <LCD_I2CInits+0x38>)
 80003ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000400 <LCD_I2CInits+0x3c>)
 80003cc:	601a      	str	r2, [r3, #0]
		I2CHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <LCD_I2CInits+0x38>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	725a      	strb	r2, [r3, #9]
		I2CHandle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <LCD_I2CInits+0x38>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
		I2CHandle.I2C_Config.I2C_SCLSpeed = I2C_SCLK_SPEED_SM;
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <LCD_I2CInits+0x38>)
 80003dc:	4a09      	ldr	r2, [pc, #36]	@ (8000404 <LCD_I2CInits+0x40>)
 80003de:	605a      	str	r2, [r3, #4]

		I2C_Init(&I2CHandle);
 80003e0:	4806      	ldr	r0, [pc, #24]	@ (80003fc <LCD_I2CInits+0x38>)
 80003e2:	f000 fe63 	bl	80010ac <I2C_Init>

		/* Enable I2C peripheral  */
		I2C_PeripheralControl(LCD_I2C, ENABLE);
 80003e6:	2101      	movs	r1, #1
 80003e8:	4805      	ldr	r0, [pc, #20]	@ (8000400 <LCD_I2CInits+0x3c>)
 80003ea:	f000 ff33 	bl	8001254 <I2C_PeripheralControl>

		/* configure ack control in CR1 after enabling the peripheral i2c*/
		I2C_ManageAcking(LCD_I2C, I2C_ACK_ENABLE);
 80003ee:	2101      	movs	r1, #1
 80003f0:	4803      	ldr	r0, [pc, #12]	@ (8000400 <LCD_I2CInits+0x3c>)
 80003f2:	f000 ff4a 	bl	800128a <I2C_ManageAcking>
		/* Enable I2C1_EV IRQ and I2C_ER IRQ */
		I2C_IRQInterruptConfig(LCD_I2C_ER_IRQ, ENABLE);
		I2C_IRQInterruptConfig(LCD_I2C_EV_IRQ, ENABLE);
#endif

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000090 	.word	0x20000090
 8000400:	40005400 	.word	0x40005400
 8000404:	000186a0 	.word	0x000186a0

08000408 <LCD_StartupCmds>:

/********************************LCD initialization commands **********************************/
static void LCD_StartupCmds(void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0


	/* Send 0x3 in cmd mode */
	LCD_Write4Bits((LCD_INIT_CMD1 << 4), LCD_RS_CMD);
 800040c:	2100      	movs	r1, #0
 800040e:	2030      	movs	r0, #48	@ 0x30
 8000410:	f000 f859 	bl	80004c6 <LCD_Write4Bits>
	delay_ms(5);
 8000414:	2005      	movs	r0, #5
 8000416:	f000 f8ad 	bl	8000574 <delay_ms>

	LCD_Write4Bits((LCD_INIT_CMD1 << 4), LCD_RS_CMD);
 800041a:	2100      	movs	r1, #0
 800041c:	2030      	movs	r0, #48	@ 0x30
 800041e:	f000 f852 	bl	80004c6 <LCD_Write4Bits>
	delay_us(150);
 8000422:	2096      	movs	r0, #150	@ 0x96
 8000424:	f000 f8c1 	bl	80005aa <delay_us>

	LCD_Write4Bits((LCD_INIT_CMD1 << 4), LCD_RS_CMD);
 8000428:	2100      	movs	r1, #0
 800042a:	2030      	movs	r0, #48	@ 0x30
 800042c:	f000 f84b 	bl	80004c6 <LCD_Write4Bits>
	delay_us(150);
 8000430:	2096      	movs	r0, #150	@ 0x96
 8000432:	f000 f8ba 	bl	80005aa <delay_us>

	LCD_Write4Bits((LCD_INIT_CMD2 << 4), LCD_RS_CMD);
 8000436:	2100      	movs	r1, #0
 8000438:	2020      	movs	r0, #32
 800043a:	f000 f844 	bl	80004c6 <LCD_Write4Bits>
	delay_us(150);
 800043e:	2096      	movs	r0, #150	@ 0x96
 8000440:	f000 f8b3 	bl	80005aa <delay_us>

}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <LCD_CustmConfigCmds>:


/********************************LCD custom Configuration commands **********************************/
static void LCD_CustmConfigCmds(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

	/* Send Function set cmd */
	LCD_Write((LCD_CNFG_CMD_4BIT_2LN_5X8F), LCD_RS_CMD);
 800044c:	2100      	movs	r1, #0
 800044e:	2028      	movs	r0, #40	@ 0x28
 8000450:	f000 f81c 	bl	800048c <LCD_Write>
	delay_ms(2);
 8000454:	2002      	movs	r0, #2
 8000456:	f000 f88d 	bl	8000574 <delay_ms>

	/* Send Display on cursor on */
	LCD_Write((LCD_CNFG_CMD_DON_CON), LCD_RS_CMD);
 800045a:	2100      	movs	r1, #0
 800045c:	200e      	movs	r0, #14
 800045e:	f000 f815 	bl	800048c <LCD_Write>
	delay_us(100);
 8000462:	2064      	movs	r0, #100	@ 0x64
 8000464:	f000 f8a1 	bl	80005aa <delay_us>

	/* Send Display clear */
	LCD_DisplayClr();
 8000468:	f7ff ff51 	bl	800030e <LCD_DisplayClr>

	/* Send Entry mode set */
	LCD_Write((LCD_CNFG_CMD_INCADD), LCD_RS_CMD);
 800046c:	2100      	movs	r1, #0
 800046e:	2006      	movs	r0, #6
 8000470:	f000 f80c 	bl	800048c <LCD_Write>
	delay_us(100);
 8000474:	2064      	movs	r0, #100	@ 0x64
 8000476:	f000 f898 	bl	80005aa <delay_us>

	/* Send DDRAM addr */
	LCD_Write((LCD_DDRAM_LN1), LCD_RS_CMD);
 800047a:	2100      	movs	r1, #0
 800047c:	2080      	movs	r0, #128	@ 0x80
 800047e:	f000 f805 	bl	800048c <LCD_Write>
	delay_us(100);
 8000482:	2064      	movs	r0, #100	@ 0x64
 8000484:	f000 f891 	bl	80005aa <delay_us>


}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <LCD_Write>:


/***************************LCD write ***************************************/
static void LCD_Write (uint8_t val, uint8_t mode){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	460a      	mov	r2, r1
 8000496:	71fb      	strb	r3, [r7, #7]
 8000498:	4613      	mov	r3, r2
 800049a:	71bb      	strb	r3, [r7, #6]

	/* first send upper nibble */
	LCD_Write4Bits((val & 0xF0), mode);
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	f023 030f 	bic.w	r3, r3, #15
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	79ba      	ldrb	r2, [r7, #6]
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f80c 	bl	80004c6 <LCD_Write4Bits>

	/* lower nibble */
	LCD_Write4Bits((val << 4), mode);
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	79ba      	ldrb	r2, [r7, #6]
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 f804 	bl	80004c6 <LCD_Write4Bits>


}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <LCD_Write4Bits>:


/**************************LCD write nibble **************************************/
static void LCD_Write4Bits(uint8_t nible, uint8_t mode){
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	4603      	mov	r3, r0
 80004ce:	460a      	mov	r2, r1
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	4613      	mov	r3, r2
 80004d4:	71bb      	strb	r3, [r7, #6]

	uint8_t temp = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]

	temp = (nible & 0xF0) | (mode ? 1:0);
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	f023 030f 	bic.w	r3, r3, #15
 80004e2:	b25a      	sxtb	r2, r3
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	4313      	orrs	r3, r2
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	73fb      	strb	r3, [r7, #15]

	// Always write mode
	temp &= ~(1U << LCD_RW_POSI);
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	f023 0302 	bic.w	r3, r3, #2
 80004fe:	73fb      	strb	r3, [r7, #15]

	LCD_Enable(temp);
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f804 	bl	8000510 <LCD_Enable>

}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <LCD_Enable>:


/*********************LCD I2C write with enable **********************************/
static void LCD_Enable(uint8_t val){
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]

	uint8_t temp = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]

	delay_us(100);

#endif

	temp = val | (1U << LCD_EN_POSI) |(1U << LCD_BL_POSI);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	f043 030c 	orr.w	r3, r3, #12
 8000524:	b2db      	uxtb	r3, r3
 8000526:	73fb      	strb	r3, [r7, #15]
	I2C_MasterSendData(&I2CHandle, &temp, 1, LCD_I2C_ADDR, I2C_DISABLE_SR);
 8000528:	f107 010f 	add.w	r1, r7, #15
 800052c:	2300      	movs	r3, #0
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2327      	movs	r3, #39	@ 0x27
 8000532:	2201      	movs	r2, #1
 8000534:	480e      	ldr	r0, [pc, #56]	@ (8000570 <LCD_Enable+0x60>)
 8000536:	f000 ff2b 	bl	8001390 <I2C_MasterSendData>

	delay_us(50);
 800053a:	2032      	movs	r0, #50	@ 0x32
 800053c:	f000 f835 	bl	80005aa <delay_us>

	temp = (val & ~(1U << LCD_EN_POSI)) | (1U << LCD_BL_POSI);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	f023 030c 	bic.w	r3, r3, #12
 8000546:	b2db      	uxtb	r3, r3
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	b2db      	uxtb	r3, r3
 800054e:	73fb      	strb	r3, [r7, #15]
	I2C_MasterSendData(&I2CHandle, &temp, 1, LCD_I2C_ADDR, I2C_DISABLE_SR);
 8000550:	f107 010f 	add.w	r1, r7, #15
 8000554:	2300      	movs	r3, #0
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2327      	movs	r3, #39	@ 0x27
 800055a:	2201      	movs	r2, #1
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <LCD_Enable+0x60>)
 800055e:	f000 ff17 	bl	8001390 <I2C_MasterSendData>

	delay_us(50);
 8000562:	2032      	movs	r0, #50	@ 0x32
 8000564:	f000 f821 	bl	80005aa <delay_us>

}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000090 	.word	0x20000090

08000574 <delay_ms>:



/*********************delay msec**********************************/
static void delay_ms(uint16_t value)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	80fb      	strh	r3, [r7, #6]
    for(uint32_t i = 0 ; i < (value * 16000); i++){
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	e004      	b.n	800058e <delay_ms+0x1a>
    	__NOP();
 8000584:	f7ff fe94 	bl	80002b0 <__NOP>
    for(uint32_t i = 0 ; i < (value * 16000); i++){
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000594:	fb02 f303 	mul.w	r3, r2, r3
 8000598:	461a      	mov	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	4293      	cmp	r3, r2
 800059e:	d3f1      	bcc.n	8000584 <delay_ms+0x10>
    }
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <delay_us>:


/*********************delay micro sec**********************************/
static void delay_us(uint8_t value)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	4603      	mov	r3, r0
 80005b2:	71fb      	strb	r3, [r7, #7]
    for(uint32_t i = 0 ; i < (value * 16); i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e004      	b.n	80005c4 <delay_us+0x1a>
    	__NOP();
 80005ba:	f7ff fe79 	bl	80002b0 <__NOP>
    for(uint32_t i = 0 ; i < (value * 16); i++){
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	461a      	mov	r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d3f4      	bcc.n	80005ba <delay_us+0x10>
    }
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <I2C1_EV_IRQHandler>:


/**********************************************************************************
 * 					LCD - I2C interrupt
 * *********************************************************************************/
void I2C1_EV_IRQHandler (void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	I2C_EV_IRQHandling(&I2CHandle);
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <I2C1_EV_IRQHandler+0x10>)
 80005e2:	f001 f823 	bl	800162c <I2C_EV_IRQHandling>

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000090 	.word	0x20000090

080005f0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler (void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	I2C_ER_IRQHandling(&I2CHandle);
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <I2C1_ER_IRQHandler+0x10>)
 80005f6:	f001 f8d4 	bl	80017a2 <I2C_ER_IRQHandling>

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000090 	.word	0x20000090

08000604 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
    if(AppEv == I2C_EV_TX_CMPLT)
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d105      	bne.n	8000622 <I2C_ApplicationEventCallback+0x1e>
    {
        printf("Tx is completed\n");
 8000616:	4805      	ldr	r0, [pc, #20]	@ (800062c <I2C_ApplicationEventCallback+0x28>)
 8000618:	f001 ff62 	bl	80024e0 <puts>
        i2c_tx_done = 1;
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <I2C_ApplicationEventCallback+0x2c>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
    }
    if(AppEv == I2C_ERROR_AF){
    	//I2C_CloseSendData(pI2CHandle);

    }
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	08003560 	.word	0x08003560
 8000630:	200000c8 	.word	0x200000c8

08000634 <LCD_SendDummy>:


/*******************************************work around ***************************************/
static void LCD_SendDummy(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

	uint8_t addr = 0x27;
 800063a:	2327      	movs	r3, #39	@ 0x27
 800063c:	72fb      	strb	r3, [r7, #11]
	uint32_t guard = 1000;
 800063e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000642:	60fb      	str	r3, [r7, #12]

// If BUSY, try to free with STOP
	if (LCD_I2C->SR2 & (1 << I2C_SR2_BUSY)) {
 8000644:	4b34      	ldr	r3, [pc, #208]	@ (8000718 <LCD_SendDummy+0xe4>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	2b00      	cmp	r3, #0
 800064e:	d010      	beq.n	8000672 <LCD_SendDummy+0x3e>
		LCD_I2C->CR1 |= (1 << I2C_CR1_STOP);
 8000650:	4b31      	ldr	r3, [pc, #196]	@ (8000718 <LCD_SendDummy+0xe4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a30      	ldr	r2, [pc, #192]	@ (8000718 <LCD_SendDummy+0xe4>)
 8000656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800065a:	6013      	str	r3, [r2, #0]
		// small guard to allow release
		for (volatile uint32_t d=0; d<1000; ++d) __asm__ volatile("nop");
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	e003      	b.n	800066a <LCD_SendDummy+0x36>
 8000662:	bf00      	nop
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000670:	d3f7      	bcc.n	8000662 <LCD_SendDummy+0x2e>
	}

	// START
	LCD_I2C->CR1 |= (1 << I2C_CR1_START);
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <LCD_SendDummy+0xe4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <LCD_SendDummy+0xe4>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800067c:	6013      	str	r3, [r2, #0]
	// Wait SB
	while (!(LCD_I2C->SR1 & (1 << I2C_SR1_SB))) {
 800067e:	e005      	b.n	800068c <LCD_SendDummy+0x58>
		if (!--guard) goto nack_stop;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3b01      	subs	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d032      	beq.n	80006f2 <LCD_SendDummy+0xbe>
	while (!(LCD_I2C->SR1 & (1 << I2C_SR1_SB))) {
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <LCD_SendDummy+0xe4>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f3      	beq.n	8000680 <LCD_SendDummy+0x4c>
	}

	// Send address (write): (addr7<<1) | 0
	LCD_I2C->DR = (uint32_t)(addr << 1);
 8000698:	7afb      	ldrb	r3, [r7, #11]
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <LCD_SendDummy+0xe4>)
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	6113      	str	r3, [r2, #16]

	// Wait for ADDR (ACK) or AF (NACK)
	while (1) {
		uint32_t sr1 = LCD_I2C->SR1;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <LCD_SendDummy+0xe4>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	607b      	str	r3, [r7, #4]
		if (sr1 & (1 << I2C_SR1_ADDR)) {
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00d      	beq.n	80006cc <LCD_SendDummy+0x98>
			(void)LCD_I2C->SR2;              // clear ADDR
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <LCD_SendDummy+0xe4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
			LCD_I2C->CR1 |= (1 <<I2C_CR1_STOP) ;    // STOP
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <LCD_SendDummy+0xe4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <LCD_SendDummy+0xe4>)
 80006ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006be:	6013      	str	r3, [r2, #0]
			printf("ACK at %u\n", addr);// ACKed
 80006c0:	7afb      	ldrb	r3, [r7, #11]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4815      	ldr	r0, [pc, #84]	@ (800071c <LCD_SendDummy+0xe8>)
 80006c6:	f001 fea3 	bl	8002410 <iprintf>
			goto end;
 80006ca:	e021      	b.n	8000710 <LCD_SendDummy+0xdc>
		}
		if (sr1 & (1 << I2C_SR1_AF)) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <LCD_SendDummy+0xb0>
			// NACK: clear AF and STOP
			LCD_I2C->SR1 &= ~(1 << I2C_SR1_AF);
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <LCD_SendDummy+0xe4>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <LCD_SendDummy+0xe4>)
 80006dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80006e0:	6153      	str	r3, [r2, #20]
			goto nack_stop;
 80006e2:	e009      	b.n	80006f8 <LCD_SendDummy+0xc4>
		}
		if (!--guard) {
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <LCD_SendDummy+0xc2>
	while (1) {
 80006f0:	e7d6      	b.n	80006a0 <LCD_SendDummy+0x6c>
		if (!--guard) goto nack_stop;
 80006f2:	bf00      	nop
 80006f4:	e000      	b.n	80006f8 <LCD_SendDummy+0xc4>
			goto nack_stop;
 80006f6:	bf00      	nop
		}
	}

	nack_stop:
	LCD_I2C->CR1 |= (1 << I2C_CR1_STOP);
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <LCD_SendDummy+0xe4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a06      	ldr	r2, [pc, #24]	@ (8000718 <LCD_SendDummy+0xe4>)
 80006fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000702:	6013      	str	r3, [r2, #0]
	// Optional: wait until BUSY clears (short guard)
	printf("NO ACK at %u\n", addr);// ACKed
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <LCD_SendDummy+0xec>)
 800070a:	f001 fe81 	bl	8002410 <iprintf>
	end:




}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40005400 	.word	0x40005400
 800071c:	08003570 	.word	0x08003570
 8000720:	0800357c 	.word	0x0800357c

08000724 <GPIO_Button_Inits>:
uint8_t newRTCRead = 0;

/*
 * GPIO-Button INit
 */
void GPIO_Button_Inits(void){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <GPIO_Button_Inits+0x2c>)
 800072c:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800072e:	230d      	movs	r3, #13
 8000730:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000732:	2300      	movs	r3, #0
 8000734:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 8000736:	2302      	movs	r3, #2
 8000738:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 800073a:	2300      	movs	r3, #0
 800073c:	733b      	strb	r3, [r7, #12]

	GPIO_Init(&GpioButton);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fa8b 	bl	8000c5c <GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020800 	.word	0x40020800

08000754 <delay>:

/*
 * delay
 */
void delay (void){
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
	/* ~200 msec when sys clock is 16 MHZ */
	for(uint32_t i = 0; i < 500000/2; i ++);
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	e002      	b.n	8000766 <delay+0x12>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <delay+0x28>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d9f8      	bls.n	8000760 <delay+0xc>
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	0003d08f 	.word	0x0003d08f

08000780 <WAIT_ForButtonPress>:

/*
 * WAIT_ForButtonPress
 * Polling button
 */
void WAIT_ForButtonPress (void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_NOT_PRESSED);
 8000784:	bf00      	nop
 8000786:	210d      	movs	r1, #13
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <WAIT_ForButtonPress+0x1c>)
 800078a:	f000 fc21 	bl	8000fd0 <GPIO_ReadFromInputPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	d0f8      	beq.n	8000786 <WAIT_ForButtonPress+0x6>

	/* debounce */
	delay();
 8000794:	f7ff ffde 	bl	8000754 <delay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40020800 	.word	0x40020800

080007a0 <main>:



int main(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	@ 0x70
 80007a4:	af02      	add	r7, sp, #8

	char lcdBuff[100] = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2264      	movs	r2, #100	@ 0x64
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 ff99 	bl	80026e4 <memset>

	/* Initialize the button */
	GPIO_Button_Inits();
 80007b2:	f7ff ffb7 	bl	8000724 <GPIO_Button_Inits>


	/* LCD init */
	LCD_Init();
 80007b6:	f7ff fd82 	bl	80002be <LCD_Init>

	/*rtc clk initialization */
	rtcHandle.RTC_Config.Sync_Prescaler = RTC_SYNCPRESCALER_1HZ;
 80007ba:	4b34      	ldr	r3, [pc, #208]	@ (800088c <main+0xec>)
 80007bc:	22ff      	movs	r2, #255	@ 0xff
 80007be:	609a      	str	r2, [r3, #8]
	rtcHandle.RTC_Config.Clock_Source = RTC_CLKSRC_LSE;
 80007c0:	4b32      	ldr	r3, [pc, #200]	@ (800088c <main+0xec>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
	rtcHandle.RTC_Config.Async_Prescaler = RTC_ASYNCPRESCALER_1HZ;
 80007c6:	4b31      	ldr	r3, [pc, #196]	@ (800088c <main+0xec>)
 80007c8:	227f      	movs	r2, #127	@ 0x7f
 80007ca:	605a      	str	r2, [r3, #4]
	rtcHandle.RTC_Config.hour_format = RTC_HOUR_FMT_24;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <main+0xec>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	731a      	strb	r2, [r3, #12]

	/* rtc date and time init */
	rtcHandle.RTC_Time.Day = 30;
 80007d2:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <main+0xec>)
 80007d4:	221e      	movs	r2, #30
 80007d6:	755a      	strb	r2, [r3, #21]
	rtcHandle.RTC_Time.Month = 8;
 80007d8:	4b2c      	ldr	r3, [pc, #176]	@ (800088c <main+0xec>)
 80007da:	2208      	movs	r2, #8
 80007dc:	759a      	strb	r2, [r3, #22]
	rtcHandle.RTC_Time.Year = 25;
 80007de:	4b2b      	ldr	r3, [pc, #172]	@ (800088c <main+0xec>)
 80007e0:	2219      	movs	r2, #25
 80007e2:	75da      	strb	r2, [r3, #23]

	rtcHandle.RTC_Time.Hours = 11;
 80007e4:	4b29      	ldr	r3, [pc, #164]	@ (800088c <main+0xec>)
 80007e6:	220b      	movs	r2, #11
 80007e8:	741a      	strb	r2, [r3, #16]
	rtcHandle.RTC_Time.Minutes = 45;
 80007ea:	4b28      	ldr	r3, [pc, #160]	@ (800088c <main+0xec>)
 80007ec:	222d      	movs	r2, #45	@ 0x2d
 80007ee:	745a      	strb	r2, [r3, #17]
	rtcHandle.RTC_Time.Seconds = 0;
 80007f0:	4b26      	ldr	r3, [pc, #152]	@ (800088c <main+0xec>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	749a      	strb	r2, [r3, #18]
	rtcHandle.RTC_Time.Weekday = 6;
 80007f6:	4b25      	ldr	r3, [pc, #148]	@ (800088c <main+0xec>)
 80007f8:	2206      	movs	r2, #6
 80007fa:	751a      	strb	r2, [r3, #20]

	RTC_Init(&rtcHandle);
 80007fc:	4823      	ldr	r0, [pc, #140]	@ (800088c <main+0xec>)
 80007fe:	f001 fa39 	bl	8001c74 <RTC_Init>

	/* wait until the button is pressed */
	WAIT_ForButtonPress();
 8000802:	f7ff ffbd 	bl	8000780 <WAIT_ForButtonPress>

	/*wake up timer for every 60 sec */
	WUTConfig.Auto_Reload = 4; 		/* wut runs wutr-value +1 secs */
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <main+0xf0>)
 8000808:	2204      	movs	r2, #4
 800080a:	605a      	str	r2, [r3, #4]
	WUTConfig.Clk = RTC_WUT_CLK_SPRE_1HZ;
 800080c:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <main+0xf0>)
 800080e:	2204      	movs	r2, #4
 8000810:	701a      	strb	r2, [r3, #0]
	WUTConfig.Interrupt_EnorDi = ENABLE;
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <main+0xf0>)
 8000814:	2201      	movs	r2, #1
 8000816:	721a      	strb	r2, [r3, #8]

	RTC_WUTConfig(&WUTConfig);
 8000818:	481d      	ldr	r0, [pc, #116]	@ (8000890 <main+0xf0>)
 800081a:	f001 f8db 	bl	80019d4 <RTC_WUTConfig>

	while(1){


		if(newRTCRead){
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <main+0xf4>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0fb      	beq.n	800081e <main+0x7e>

			/* print Date in LCD row 1 */
			sprintf(lcdBuff, "Date: %02u:%02u:%02u", readTimeDate.Day, readTimeDate.Month, readTimeDate.Year);
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <main+0xf8>)
 8000828:	795b      	ldrb	r3, [r3, #5]
 800082a:	461a      	mov	r2, r3
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <main+0xf8>)
 800082e:	799b      	ldrb	r3, [r3, #6]
 8000830:	4619      	mov	r1, r3
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <main+0xf8>)
 8000834:	79db      	ldrb	r3, [r3, #7]
 8000836:	1d38      	adds	r0, r7, #4
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	460b      	mov	r3, r1
 800083c:	4917      	ldr	r1, [pc, #92]	@ (800089c <main+0xfc>)
 800083e:	f001 fe57 	bl	80024f0 <siprintf>
			LCD_DisplayClr();
 8000842:	f7ff fd64 	bl	800030e <LCD_DisplayClr>
			LCD_SetCursor(1, 1);
 8000846:	2101      	movs	r1, #1
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff fd6b 	bl	8000324 <LCD_SetCursor>
			LCD_PrintString(lcdBuff);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fd45 	bl	80002e0 <LCD_PrintString>

			/* print Time in LCD row 2 */
			sprintf(lcdBuff, "Time: %02u:%02u:%02u", readTimeDate.Hours, readTimeDate.Minutes, readTimeDate.Seconds);
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <main+0xf8>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <main+0xf8>)
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	4619      	mov	r1, r3
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <main+0xf8>)
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	1d38      	adds	r0, r7, #4
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	460b      	mov	r3, r1
 800086c:	490c      	ldr	r1, [pc, #48]	@ (80008a0 <main+0x100>)
 800086e:	f001 fe3f 	bl	80024f0 <siprintf>
			LCD_SetCursor(2, 1);
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fd55 	bl	8000324 <LCD_SetCursor>
			LCD_PrintString(lcdBuff);
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fd2f 	bl	80002e0 <LCD_PrintString>

			newRTCRead = 0;
 8000882:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <main+0xf4>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
		if(newRTCRead){
 8000888:	e7c9      	b.n	800081e <main+0x7e>
 800088a:	bf00      	nop
 800088c:	200000d4 	.word	0x200000d4
 8000890:	200000ec 	.word	0x200000ec
 8000894:	200000f8 	.word	0x200000f8
 8000898:	200000cc 	.word	0x200000cc
 800089c:	080035d8 	.word	0x080035d8
 80008a0:	080035f0 	.word	0x080035f0

080008a4 <RTC_WKUP_IRQHandler>:
}



/******************************Interrupt **************************************************************/
void RTC_WKUP_IRQHandler (void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

	RTC_WUTIRQHandling();
 80008a8:	f001 fcca 	bl	8002240 <RTC_WUTIRQHandling>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <RTC_ApplicationEventCallback>:


/*
 * Call backs
 */
void RTC_ApplicationEventCallback (uint8_t AppEv){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]

	if(AppEv == RTC_EV_WUTI){
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d105      	bne.n	80008cc <RTC_ApplicationEventCallback+0x1c>

		/* Read Time and Date */
		RTC_GetTimeDate(&readTimeDate);
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <RTC_ApplicationEventCallback+0x24>)
 80008c2:	f001 f903 	bl	8001acc <RTC_GetTimeDate>

		newRTCRead = 1;
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <RTC_ApplicationEventCallback+0x28>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]


	}
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000cc 	.word	0x200000cc
 80008d8:	200000f8 	.word	0x200000f8

080008dc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <ITM_SendChar+0x44>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <ITM_SendChar+0x44>)
 80008ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008f0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <ITM_SendChar+0x48>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <ITM_SendChar+0x48>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008fe:	bf00      	nop
 8000900:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0f8      	beq.n	8000900 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800090e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	6013      	str	r3, [r2, #0]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	e000edfc 	.word	0xe000edfc
 8000924:	e0000e00 	.word	0xe0000e00

08000928 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	e00a      	b.n	8000950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800093a:	f3af 8000 	nop.w
 800093e:	4601      	mov	r1, r0
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60ba      	str	r2, [r7, #8]
 8000946:	b2ca      	uxtb	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf0      	blt.n	800093a <_read+0x12>
  }

  return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	e009      	b.n	8000988 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	/* calling ITM trace mode to write into Serial wire viewer */
	ITM_SendChar(*ptr++);
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	60ba      	str	r2, [r7, #8]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ffad 	bl	80008dc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3301      	adds	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	dbf1      	blt.n	8000974 <_write+0x12>
  }
  return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <_close>:

int _close(int file)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009c0:	605a      	str	r2, [r3, #4]
  return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <_isatty>:

int _isatty(int file)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b085      	sub	sp, #20
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
	...

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f001 fea8 	bl	8002780 <__errno>
 8000a30:	4603      	mov	r3, r0
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20020000 	.word	0x20020000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	200000fc 	.word	0x200000fc
 8000a64:	20000250 	.word	0x20000250

08000a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a96:	f001 fe79 	bl	800278c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9a:	f7ff fe81 	bl	80007a0 <main>

08000a9e <LoopForever>:

LoopForever:
  b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   r0, =_estack
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000aac:	08003648 	.word	0x08003648
  ldr r2, =_sbss
 8000ab0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ab4:	2000024c 	.word	0x2000024c

08000ab8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <GPIO_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d157      	bne.n	8000b7e <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a59      	ldr	r2, [pc, #356]	@ (8000c38 <GPIO_PeriClockControl+0x17c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d106      	bne.n	8000ae4 <GPIO_PeriClockControl+0x28>
 8000ad6:	4b59      	ldr	r3, [pc, #356]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a58      	ldr	r2, [pc, #352]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 8000ae2:	e0a3      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a56      	ldr	r2, [pc, #344]	@ (8000c40 <GPIO_PeriClockControl+0x184>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d106      	bne.n	8000afa <GPIO_PeriClockControl+0x3e>
 8000aec:	4b53      	ldr	r3, [pc, #332]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	4a52      	ldr	r2, [pc, #328]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000af8:	e098      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a51      	ldr	r2, [pc, #324]	@ (8000c44 <GPIO_PeriClockControl+0x188>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d106      	bne.n	8000b10 <GPIO_PeriClockControl+0x54>
 8000b02:	4b4e      	ldr	r3, [pc, #312]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a4d      	ldr	r2, [pc, #308]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b0e:	e08d      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4d      	ldr	r2, [pc, #308]	@ (8000c48 <GPIO_PeriClockControl+0x18c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d106      	bne.n	8000b26 <GPIO_PeriClockControl+0x6a>
 8000b18:	4b48      	ldr	r3, [pc, #288]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	4a47      	ldr	r2, [pc, #284]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b24:	e082      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a48      	ldr	r2, [pc, #288]	@ (8000c4c <GPIO_PeriClockControl+0x190>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d106      	bne.n	8000b3c <GPIO_PeriClockControl+0x80>
 8000b2e:	4b43      	ldr	r3, [pc, #268]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a42      	ldr	r2, [pc, #264]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b3a:	e077      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a44      	ldr	r2, [pc, #272]	@ (8000c50 <GPIO_PeriClockControl+0x194>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d106      	bne.n	8000b52 <GPIO_PeriClockControl+0x96>
 8000b44:	4b3d      	ldr	r3, [pc, #244]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a3c      	ldr	r2, [pc, #240]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b4a:	f043 0320 	orr.w	r3, r3, #32
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b50:	e06c      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_EN();
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a3f      	ldr	r2, [pc, #252]	@ (8000c54 <GPIO_PeriClockControl+0x198>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d106      	bne.n	8000b68 <GPIO_PeriClockControl+0xac>
 8000b5a:	4b38      	ldr	r3, [pc, #224]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a37      	ldr	r2, [pc, #220]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b66:	e061      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c58 <GPIO_PeriClockControl+0x19c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d15d      	bne.n	8000c2c <GPIO_PeriClockControl+0x170>
 8000b70:	4b32      	ldr	r3, [pc, #200]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	4a31      	ldr	r2, [pc, #196]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b7a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b7c:	e056      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a2d      	ldr	r2, [pc, #180]	@ (8000c38 <GPIO_PeriClockControl+0x17c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d106      	bne.n	8000b94 <GPIO_PeriClockControl+0xd8>
 8000b86:	4b2d      	ldr	r3, [pc, #180]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b8c:	f023 0301 	bic.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000b92:	e04b      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a2a      	ldr	r2, [pc, #168]	@ (8000c40 <GPIO_PeriClockControl+0x184>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d106      	bne.n	8000baa <GPIO_PeriClockControl+0xee>
 8000b9c:	4b27      	ldr	r3, [pc, #156]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba0:	4a26      	ldr	r2, [pc, #152]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000ba2:	f023 0302 	bic.w	r3, r3, #2
 8000ba6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ba8:	e040      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a25      	ldr	r2, [pc, #148]	@ (8000c44 <GPIO_PeriClockControl+0x188>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d106      	bne.n	8000bc0 <GPIO_PeriClockControl+0x104>
 8000bb2:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000bb8:	f023 0304 	bic.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bbe:	e035      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a21      	ldr	r2, [pc, #132]	@ (8000c48 <GPIO_PeriClockControl+0x18c>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d106      	bne.n	8000bd6 <GPIO_PeriClockControl+0x11a>
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000bce:	f023 0308 	bic.w	r3, r3, #8
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bd4:	e02a      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c4c <GPIO_PeriClockControl+0x190>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d106      	bne.n	8000bec <GPIO_PeriClockControl+0x130>
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a16      	ldr	r2, [pc, #88]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000be4:	f023 0310 	bic.w	r3, r3, #16
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bea:	e01f      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a18      	ldr	r2, [pc, #96]	@ (8000c50 <GPIO_PeriClockControl+0x194>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d106      	bne.n	8000c02 <GPIO_PeriClockControl+0x146>
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	4a10      	ldr	r2, [pc, #64]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000bfa:	f023 0320 	bic.w	r3, r3, #32
 8000bfe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c00:	e014      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a13      	ldr	r2, [pc, #76]	@ (8000c54 <GPIO_PeriClockControl+0x198>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d106      	bne.n	8000c18 <GPIO_PeriClockControl+0x15c>
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c16:	e009      	b.n	8000c2c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <GPIO_PeriClockControl+0x19c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d105      	bne.n	8000c2c <GPIO_PeriClockControl+0x170>
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <GPIO_PeriClockControl+0x180>)
 8000c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c2a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020400 	.word	0x40020400
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020c00 	.word	0x40020c00
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40021400 	.word	0x40021400
 8000c54:	40021800 	.word	0x40021800
 8000c58:	40021c00 	.word	0x40021c00

08000c5c <GPIO_Init>:
 *
 * @return		-
 *
 * @note		-
 ************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

	/* Enable GPIO peripheral Clock */
	GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff26 	bl	8000abc <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	/* 1. Configure the mode for the given gpio pin */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	795b      	ldrb	r3, [r3, #5]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d820      	bhi.n	8000cbe <GPIO_Init+0x62>
		/*Normal GPIO configurations */
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	795b      	ldrb	r3, [r3, #5]
 8000c80:	461a      	mov	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //need to clear bit field before sets
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	791b      	ldrb	r3, [r3, #4]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2103      	movs	r1, #3
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	400a      	ands	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e0c8      	b.n	8000e50 <GPIO_Init+0x1f4>
	}
	else{
		/* Interrupt configuration */

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	795b      	ldrb	r3, [r3, #5]
 8000cc2:	2b05      	cmp	r3, #5
 8000cc4:	d117      	bne.n	8000cf6 <GPIO_Init+0x9a>
			/* 1. configure falling edge FTSR */
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000cc6:	4b47      	ldr	r3, [pc, #284]	@ (8000de4 <GPIO_Init+0x188>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	7912      	ldrb	r2, [r2, #4]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	408a      	lsls	r2, r1
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4a43      	ldr	r2, [pc, #268]	@ (8000de4 <GPIO_Init+0x188>)
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	60d3      	str	r3, [r2, #12]

			/* clear same bit in RTSR */
			EXTI -> RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000cdc:	4b41      	ldr	r3, [pc, #260]	@ (8000de4 <GPIO_Init+0x188>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7912      	ldrb	r2, [r2, #4]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	408a      	lsls	r2, r1
 8000cea:	43d2      	mvns	r2, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a3d      	ldr	r2, [pc, #244]	@ (8000de4 <GPIO_Init+0x188>)
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	6093      	str	r3, [r2, #8]
 8000cf4:	e035      	b.n	8000d62 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	795b      	ldrb	r3, [r3, #5]
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d117      	bne.n	8000d2e <GPIO_Init+0xd2>
			/* 1. configure raising edge RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000cfe:	4b39      	ldr	r3, [pc, #228]	@ (8000de4 <GPIO_Init+0x188>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	7912      	ldrb	r2, [r2, #4]
 8000d06:	4611      	mov	r1, r2
 8000d08:	2201      	movs	r2, #1
 8000d0a:	408a      	lsls	r2, r1
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4a35      	ldr	r2, [pc, #212]	@ (8000de4 <GPIO_Init+0x188>)
 8000d10:	430b      	orrs	r3, r1
 8000d12:	6093      	str	r3, [r2, #8]

			/* clear same bit in FTSR */
			EXTI -> FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000d14:	4b33      	ldr	r3, [pc, #204]	@ (8000de4 <GPIO_Init+0x188>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	7912      	ldrb	r2, [r2, #4]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	2201      	movs	r2, #1
 8000d20:	408a      	lsls	r2, r1
 8000d22:	43d2      	mvns	r2, r2
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a2f      	ldr	r2, [pc, #188]	@ (8000de4 <GPIO_Init+0x188>)
 8000d28:	400b      	ands	r3, r1
 8000d2a:	60d3      	str	r3, [r2, #12]
 8000d2c:	e019      	b.n	8000d62 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	795b      	ldrb	r3, [r3, #5]
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d115      	bne.n	8000d62 <GPIO_Init+0x106>
			/* 1. configure both falling and raising edge FTSR, RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <GPIO_Init+0x188>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	7912      	ldrb	r2, [r2, #4]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	2201      	movs	r2, #1
 8000d42:	408a      	lsls	r2, r1
 8000d44:	4611      	mov	r1, r2
 8000d46:	4a27      	ldr	r2, [pc, #156]	@ (8000de4 <GPIO_Init+0x188>)
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	6093      	str	r3, [r2, #8]
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000d4c:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <GPIO_Init+0x188>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	7912      	ldrb	r2, [r2, #4]
 8000d54:	4611      	mov	r1, r2
 8000d56:	2201      	movs	r2, #1
 8000d58:	408a      	lsls	r2, r1
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <GPIO_Init+0x188>)
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	60d3      	str	r3, [r2, #12]
		}
		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 4; //selects SYSCFG_EXTIR 0 to 3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	791b      	ldrb	r3, [r3, #4]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4; //selects position in SYSCFG_EXTIR 0 to 3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <GPIO_Init+0x18c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d044      	beq.n	8000e08 <GPIO_Init+0x1ac>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1a      	ldr	r2, [pc, #104]	@ (8000dec <GPIO_Init+0x190>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d02b      	beq.n	8000de0 <GPIO_Init+0x184>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a18      	ldr	r2, [pc, #96]	@ (8000df0 <GPIO_Init+0x194>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d024      	beq.n	8000ddc <GPIO_Init+0x180>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a17      	ldr	r2, [pc, #92]	@ (8000df4 <GPIO_Init+0x198>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d01d      	beq.n	8000dd8 <GPIO_Init+0x17c>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <GPIO_Init+0x19c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d016      	beq.n	8000dd4 <GPIO_Init+0x178>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <GPIO_Init+0x1a0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00f      	beq.n	8000dd0 <GPIO_Init+0x174>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <GPIO_Init+0x1a4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d008      	beq.n	8000dcc <GPIO_Init+0x170>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a11      	ldr	r2, [pc, #68]	@ (8000e04 <GPIO_Init+0x1a8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d101      	bne.n	8000dc8 <GPIO_Init+0x16c>
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	e020      	b.n	8000e0a <GPIO_Init+0x1ae>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e01e      	b.n	8000e0a <GPIO_Init+0x1ae>
 8000dcc:	2306      	movs	r3, #6
 8000dce:	e01c      	b.n	8000e0a <GPIO_Init+0x1ae>
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	e01a      	b.n	8000e0a <GPIO_Init+0x1ae>
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e018      	b.n	8000e0a <GPIO_Init+0x1ae>
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e016      	b.n	8000e0a <GPIO_Init+0x1ae>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e014      	b.n	8000e0a <GPIO_Init+0x1ae>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e012      	b.n	8000e0a <GPIO_Init+0x1ae>
 8000de4:	40013c00 	.word	0x40013c00
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40020c00 	.word	0x40020c00
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40021400 	.word	0x40021400
 8000e00:	40021800 	.word	0x40021800
 8000e04:	40021c00 	.word	0x40021c00
 8000e08:	2300      	movs	r3, #0
 8000e0a:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000e0c:	4b6d      	ldr	r3, [pc, #436]	@ (8000fc4 <GPIO_Init+0x368>)
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e10:	4a6c      	ldr	r2, [pc, #432]	@ (8000fc4 <GPIO_Init+0x368>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e16:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG -> EXTICR[temp1] |= (portcode << (4 *temp2));
 8000e18:	4a6b      	ldr	r2, [pc, #428]	@ (8000fc8 <GPIO_Init+0x36c>)
 8000e1a:	7afb      	ldrb	r3, [r7, #11]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e22:	7a79      	ldrb	r1, [r7, #9]
 8000e24:	7abb      	ldrb	r3, [r7, #10]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	4966      	ldr	r1, [pc, #408]	@ (8000fc8 <GPIO_Init+0x36c>)
 8000e30:	7afb      	ldrb	r3, [r7, #11]
 8000e32:	4302      	orrs	r2, r0
 8000e34:	3302      	adds	r3, #2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. Enable EXTI interrupt delivery using IMR */
		EXTI -> IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000e3a:	4b64      	ldr	r3, [pc, #400]	@ (8000fcc <GPIO_Init+0x370>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	7912      	ldrb	r2, [r2, #4]
 8000e42:	4611      	mov	r1, r2
 8000e44:	2201      	movs	r2, #1
 8000e46:	408a      	lsls	r2, r1
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a60      	ldr	r2, [pc, #384]	@ (8000fcc <GPIO_Init+0x370>)
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6013      	str	r3, [r2, #0]
	}

	/* 3. Configure the speed */
	temp = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	79db      	ldrb	r3, [r3, #7]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	791b      	ldrb	r3, [r3, #4]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	791b      	ldrb	r3, [r3, #4]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2103      	movs	r1, #3
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	400a      	ands	r2, r1
 8000e82:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6899      	ldr	r1, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	609a      	str	r2, [r3, #8]

	/* 4. Configure the Pull-up / Pull-down */
	temp = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7a1b      	ldrb	r3, [r3, #8]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68d9      	ldr	r1, [r3, #12]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	60da      	str	r2, [r3, #12]

	/* 5. Configure the output type */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	795b      	ldrb	r3, [r3, #5]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d81f      	bhi.n	8000f20 <GPIO_Init+0x2c4>
		temp = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	799b      	ldrb	r3, [r3, #6]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	791b      	ldrb	r3, [r3, #4]
 8000efe:	4619      	mov	r1, r3
 8000f00:	2301      	movs	r3, #1
 8000f02:	408b      	lsls	r3, r1
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6859      	ldr	r1, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]
	}

	/* Configure Alternate Function mode */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	795b      	ldrb	r3, [r3, #5]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d149      	bne.n	8000fbc <GPIO_Init+0x360>

		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	791b      	ldrb	r3, [r3, #4]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	723b      	strb	r3, [r7, #8]

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber <= 7){
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	791b      	ldrb	r3, [r3, #4]
 8000f36:	2b07      	cmp	r3, #7
 8000f38:	d820      	bhi.n	8000f7c <GPIO_Init+0x320>
			temp = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7a5b      	ldrb	r3, [r3, #9]
 8000f42:	461a      	mov	r2, r3
 8000f44:	7a3b      	ldrb	r3, [r7, #8]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRL &= ~(0xf << (4 * temp1));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6a1a      	ldr	r2, [r3, #32]
 8000f54:	7a3b      	ldrb	r3, [r7, #8]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	210f      	movs	r1, #15
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	400a      	ands	r2, r1
 8000f68:	621a      	str	r2, [r3, #32]
			pGPIOHandle -> pGPIOx ->AFRL |= temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a19      	ldr	r1, [r3, #32]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
		}
	}
}
 8000f7a:	e01f      	b.n	8000fbc <GPIO_Init+0x360>
			temp = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7a5b      	ldrb	r3, [r3, #9]
 8000f84:	461a      	mov	r2, r3
 8000f86:	7a3b      	ldrb	r3, [r7, #8]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f96:	7a3b      	ldrb	r3, [r7, #8]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	400a      	ands	r2, r1
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40013c00 	.word	0x40013c00

08000fd0 <GPIO_ReadFromInputPin>:
 *
 * @return		- 0 or 1
 *
 * @note		-
 ************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t) ((pGPIOx -> IDR >> PinNumber) & 0x00000001);  //read pin value
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
	return value;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <I2C_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE){
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d120      	bne.n	8001050 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1) I2C1_PCLK_EN();
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a22      	ldr	r2, [pc, #136]	@ (800109c <I2C_PeriClockControl+0xa0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d106      	bne.n	8001024 <I2C_PeriClockControl+0x28>
 8001016:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a21      	ldr	r2, [pc, #132]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 800101c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C2) I2C2_PCLK_DI();
		else if (pI2Cx == I2C3) I2C3_PCLK_DI();

	}

}
 8001022:	e035      	b.n	8001090 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2) I2C2_PCLK_EN();
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <I2C_PeriClockControl+0xa8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d106      	bne.n	800103a <I2C_PeriClockControl+0x3e>
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 8001032:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001038:	e02a      	b.n	8001090 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3) I2C3_PCLK_EN();
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a1a      	ldr	r2, [pc, #104]	@ (80010a8 <I2C_PeriClockControl+0xac>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d126      	bne.n	8001090 <I2C_PeriClockControl+0x94>
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 8001048:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800104c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800104e:	e01f      	b.n	8001090 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1) I2C1_PCLK_DI();
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <I2C_PeriClockControl+0xa0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d106      	bne.n	8001066 <I2C_PeriClockControl+0x6a>
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 800105e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001062:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001064:	e014      	b.n	8001090 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2) I2C2_PCLK_DI();
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <I2C_PeriClockControl+0xa8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d106      	bne.n	800107c <I2C_PeriClockControl+0x80>
 800106e:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	4a0b      	ldr	r2, [pc, #44]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 8001074:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001078:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800107a:	e009      	b.n	8001090 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3) I2C3_PCLK_DI();
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <I2C_PeriClockControl+0xac>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d105      	bne.n	8001090 <I2C_PeriClockControl+0x94>
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <I2C_PeriClockControl+0xa4>)
 800108a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40005400 	.word	0x40005400
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40005800 	.word	0x40005800
 80010a8:	40005c00 	.word	0x40005c00

080010ac <I2C_Init>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]

	/*Enable Peripheral clock */
	I2C_PeriClockControl(pI2CHandle -> pI2Cx, ENABLE);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff9c 	bl	8000ffc <I2C_PeriClockControl>

	/* configure ack control in CR1*/
	tempreg |= ((pI2CHandle -> I2C_Config.I2C_AckControl) << 10);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7a5b      	ldrb	r3, [r3, #9]
 80010c8:	029b      	lsls	r3, r3, #10
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> CR1 |= (tempreg & 0xFFFF);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6819      	ldr	r1, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

	/* configure FREQ field in CR2 */
	tempreg = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U);
 80010e6:	f000 fbff 	bl	80018e8 <RCC_GetPCLK1Value>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001220 <I2C_Init+0x174>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9b      	lsrs	r3, r3, #18
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> CR2 |= (tempreg & 0x3F);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6859      	ldr	r1, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]

	/* program the device own address */
	tempreg = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle -> I2C_Config.I2C_DeviceAddress << 1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7a1b      	ldrb	r3, [r3, #8]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
	/* I2C_OAR1 14 bit always should be kept at 1 as per reference manual */
	tempreg |= (1 << 14);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> OAR1 |= tempreg;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6899      	ldr	r1, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	430a      	orrs	r2, r1
 8001134:	609a      	str	r2, [r3, #8]

	/*CCR calculation */
	uint16_t ccrValue = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle -> I2C_Config.I2C_SCLSpeed <= I2C_SCLK_SPEED_SM){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a38      	ldr	r2, [pc, #224]	@ (8001224 <I2C_Init+0x178>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d80f      	bhi.n	8001168 <I2C_Init+0xbc>
		/* standard freq mode*/
		ccrValue = (RCC_GetPCLK1Value() / (2 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 8001148:	f000 fbce 	bl	80018e8 <RCC_GetPCLK1Value>
 800114c:	4602      	mov	r2, r0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fbb2 f3f3 	udiv	r3, r2, r3
 8001158:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccrValue & 0xFFF);
 800115a:	897b      	ldrh	r3, [r7, #10]
 800115c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e02c      	b.n	80011c2 <I2C_Init+0x116>
	}
	else{
		/* Fast freq mode */

		/* set F/S bit in CCR to enable fast mode*/
		tempreg |= (1 << 15);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800116e:	60fb      	str	r3, [r7, #12]
		/* configure duty cycle */
		tempreg |= (pI2CHandle ->I2C_Config.I2C_FMDutyCycle << 14);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	039b      	lsls	r3, r3, #14
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

		/* ccr calc */
		if(pI2CHandle ->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10b      	bne.n	800119c <I2C_Init+0xf0>
			ccrValue = (RCC_GetPCLK1Value() / (3 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 8001184:	f000 fbb0 	bl	80018e8 <RCC_GetPCLK1Value>
 8001188:	4601      	mov	r1, r0
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	fbb1 f3f3 	udiv	r3, r1, r3
 8001198:	817b      	strh	r3, [r7, #10]
 800119a:	e00c      	b.n	80011b6 <I2C_Init+0x10a>
		}
		else{
			ccrValue = (RCC_GetPCLK1Value() / (25 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 800119c:	f000 fba4 	bl	80018e8 <RCC_GetPCLK1Value>
 80011a0:	4601      	mov	r1, r0
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	009a      	lsls	r2, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b4:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccrValue & 0xFFF);
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle -> pI2Cx -> CCR |= tempreg;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	69d9      	ldr	r1, [r3, #28]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	61da      	str	r2, [r3, #28]

	/* configure TRISE reg */
	if(pI2CHandle -> I2C_Config.I2C_SCLSpeed <= I2C_SCLK_SPEED_SM){
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <I2C_Init+0x178>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d809      	bhi.n	80011f0 <I2C_Init+0x144>
		/* standard mode */
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80011dc:	f000 fb84 	bl	80018e8 <RCC_GetPCLK1Value>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <I2C_Init+0x174>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	0c9b      	lsrs	r3, r3, #18
 80011ea:	3301      	adds	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e00d      	b.n	800120c <I2C_Init+0x160>
	}
	else{
		/* Fast mode */
		tempreg = (RCC_GetPCLK1Value() * 300/ 1000000000U) + 1;
 80011f0:	f000 fb7a 	bl	80018e8 <RCC_GetPCLK1Value>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <I2C_Init+0x17c>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	09db      	lsrs	r3, r3, #7
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle -> pI2Cx ->TRISE = (tempreg & 0x3F);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001216:	621a      	str	r2, [r3, #32]
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	431bde83 	.word	0x431bde83
 8001224:	000186a0 	.word	0x000186a0
 8001228:	00044b83 	.word	0x00044b83

0800122c <I2C_GetFlagStatus>:
 *
 * @return		-FLAG_RESET or FLAG_SET macros
 *
 * @note		-
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint8_t flagName){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]

	if(pI2Cx ->SR1 & flagName)return FLAG_SET;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <I2C_GetFlagStatus+0x1c>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <I2C_GetFlagStatus+0x1e>
	return FLAG_RESET;
 8001248:	2300      	movs	r3, #0

}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <I2C_PeripheralControl>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d106      	bne.n	8001274 <I2C_PeripheralControl+0x20>
		pI2Cx -> CR1 |= (1 << I2C_CR1_PE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
	}
	else{
		pI2Cx -> CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8001272:	e005      	b.n	8001280 <I2C_PeripheralControl+0x2c>
		pI2Cx -> CR1 &= ~(1 << I2C_CR1_PE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 0201 	bic.w	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	601a      	str	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <I2C_ManageAcking>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == I2C_ACK_ENABLE) pI2Cx -> CR1 |= (1 << 10);
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d106      	bne.n	80012aa <I2C_ManageAcking+0x20>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	601a      	str	r2, [r3, #0]
	else pI2Cx -> CR1 &= ~(1 << 10);
}
 80012a8:	e005      	b.n	80012b6 <I2C_ManageAcking+0x2c>
	else pI2Cx -> CR1 &= ~(1 << 10);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <I2C_GenerateStopCondition>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    pI2Cx-> CR1 |= (1 << I2C_CR1_STOP);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <I2C_CloseSendData>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]

	/* disable ITBUFEN Control Bit */
	pI2CHandle -> pI2Cx -> CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012f4:	605a      	str	r2, [r3, #4]

	/* disable ITEVFEN Control Bit */
	pI2CHandle -> pI2Cx -> CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001304:	605a      	str	r2, [r3, #4]

	/*resets all members in handle structure */
	pI2CHandle ->TxLen = 0;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
	pI2CHandle ->TxBuffer = NULL;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
	pI2CHandle ->TxRxState = I2C_STATUS_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	761a      	strb	r2, [r3, #24]

	if(pI2CHandle ->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7a5b      	ldrb	r3, [r3, #9]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <I2C_CloseSendData+0x4e>
		I2C_ManageAcking(pI2CHandle ->pI2Cx, ENABLE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffaf 	bl	800128a <I2C_ManageAcking>
	}

}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <I2C_CloseReceiveData>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

	/* disable ITBUFEN Control Bit */
	pI2CHandle -> pI2Cx -> CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800134a:	605a      	str	r2, [r3, #4]

	/* disable ITEVFEN Control Bit */
	pI2CHandle -> pI2Cx -> CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800135a:	605a      	str	r2, [r3, #4]

	/*resets all members in handle structure */
	pI2CHandle ->RxLen = 0;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
	pI2CHandle ->RxSize = 0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	@ 0x24
	pI2CHandle ->RxBuffer = NULL;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
	pI2CHandle ->TxRxState = I2C_STATUS_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	761a      	strb	r2, [r3, #24]

	if(pI2CHandle ->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7a5b      	ldrb	r3, [r3, #9]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle ->pI2Cx, ENABLE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff81 	bl	800128a <I2C_ManageAcking>
	}

}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <I2C_MasterSendData>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	70fb      	strb	r3, [r7, #3]

	/* Generate the start condition */
	I2C_GenerateStartCondition(pI2CHandle ->pI2Cx);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f857 	bl	8001456 <I2C_GenerateStartCondition>

	/*Confirm the start generation is completed by using the SB flag in SR1 reg */
	/* Note: until SB flag is cleared SCL will be stretched (pulled low) */
	while(I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_SB) == RESET);
 80013a8:	bf00      	nop
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2101      	movs	r1, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff3b 	bl	800122c <I2C_GetFlagStatus>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f6      	beq.n	80013aa <I2C_MasterSendData+0x1a>

	/* send the slave address with r(1) / w(0) bit as lsb */
	I2C_ExecuteAddressPhase(pI2CHandle ->pI2Cx, SlaveAddr, I2C_MASTER_WR);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	78f9      	ldrb	r1, [r7, #3]
 80013c2:	2200      	movs	r2, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f855 	bl	8001474 <I2C_ExecuteAddressPhase>

	/* Confirm sending address is completed by checking the ADDR bit in SR1 reg */
	while(I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_ADDR) == RESET);
 80013ca:	bf00      	nop
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2102      	movs	r1, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff2a 	bl	800122c <I2C_GetFlagStatus>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f6      	beq.n	80013cc <I2C_MasterSendData+0x3c>

	/* clear ADDR bit Note: until ADDR flag is cleared SCL will be stretched (pulled low)*/
	I2C_ClearADDRFlag(pI2CHandle);
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 f86a 	bl	80014b8 <I2C_ClearADDRFlag>

	/* Send the Data until Len becomes 0 */
	while (Len > 0){
 80013e4:	e014      	b.n	8001410 <I2C_MasterSendData+0x80>

		/*wait until TXE bit is set*/
		while(I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_TXE) == RESET);
 80013e6:	bf00      	nop
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2180      	movs	r1, #128	@ 0x80
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff1c 	bl	800122c <I2C_GetFlagStatus>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f6      	beq.n	80013e8 <I2C_MasterSendData+0x58>
		pI2CHandle -> pI2Cx -> DR = *pTxBuffer;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	611a      	str	r2, [r3, #16]
		Len --;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	607b      	str	r3, [r7, #4]
		pTxBuffer ++;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3301      	adds	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
	while (Len > 0){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1e7      	bne.n	80013e6 <I2C_MasterSendData+0x56>
	}

	/* Waiting for TXE=1 and BTF=1 before generating STOP condition */
	while(I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_TXE) == RESET);
 8001416:	bf00      	nop
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2180      	movs	r1, #128	@ 0x80
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff04 	bl	800122c <I2C_GetFlagStatus>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f6      	beq.n	8001418 <I2C_MasterSendData+0x88>
	while(I2C_GetFlagStatus(pI2CHandle ->pI2Cx, I2C_FLAG_BTF) == RESET);
 800142a:	bf00      	nop
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2104      	movs	r1, #4
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fefa 	bl	800122c <I2C_GetFlagStatus>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f6      	beq.n	800142c <I2C_MasterSendData+0x9c>

 /* Generate STOP condition and master not need to wait for the completion of stop condition */
	if (Sr == I2C_DISABLE_SR){
 800143e:	7e3b      	ldrb	r3, [r7, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d104      	bne.n	800144e <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle ->pI2Cx);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff39 	bl	80012c0 <I2C_GenerateStopCondition>
	}
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <I2C_GenerateStartCondition>:
*
* @return		-
*
* @note		-
*/
static void I2C_GenerateStartCondition (I2C_RegDef_t *pI2Cx){
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]

	/* set START bit in CR1 */
	pI2Cx -> CR1 |= (1 << I2C_CR1_START);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]

}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <I2C_ExecuteAddressPhase>:
*
* @return		- none
*
* @note		-
*/
static void I2C_ExecuteAddressPhase (I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t mode){
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
 8001480:	4613      	mov	r3, r2
 8001482:	70bb      	strb	r3, [r7, #2]

	SlaveAddr <<= 1;
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	70fb      	strb	r3, [r7, #3]

	if( mode == I2C_MASTER_WR){
 800148a:	78bb      	ldrb	r3, [r7, #2]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d104      	bne.n	800149a <I2C_ExecuteAddressPhase+0x26>
		/*  write mode */
		SlaveAddr &= ~( 1 );
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	70fb      	strb	r3, [r7, #3]
 8001498:	e006      	b.n	80014a8 <I2C_ExecuteAddressPhase+0x34>
	}
	else if ( mode == I2C_MASTER_RD){
 800149a:	78bb      	ldrb	r3, [r7, #2]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d103      	bne.n	80014a8 <I2C_ExecuteAddressPhase+0x34>
		/*  read mode */
		SlaveAddr |= ( 1 );
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	70fb      	strb	r3, [r7, #3]
	}
	pI2Cx -> DR = SlaveAddr;
 80014a8:	78fa      	ldrb	r2, [r7, #3]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	611a      	str	r2, [r3, #16]

}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <I2C_ClearADDRFlag>:
*
* @return		- none
*
* @note		-
*/
static void I2C_ClearADDRFlag (I2C_Handle_t *pI2CHandle){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

	/* check for device mode */
	if(pI2CHandle -> pI2Cx ->SR2 & (1 << I2C_SR2_MSL)){
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00d      	beq.n	80014ea <I2C_ClearADDRFlag+0x32>
		/* device in master mode */
		if(pI2CHandle ->TxRxState == I2C_STATUS_BUSY_RX){
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7e1b      	ldrb	r3, [r3, #24]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d109      	bne.n	80014ea <I2C_ClearADDRFlag+0x32>
			/* receives 1 byte data */
			if(pI2CHandle ->RxSize == 1){
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d105      	bne.n	80014ea <I2C_ClearADDRFlag+0x32>
				/* disable acking  before clears ADDR*/
				I2C_ManageAcking(pI2CHandle ->pI2Cx, DISABLE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fed0 	bl	800128a <I2C_ManageAcking>
		;
	}

	/* ADDR bit is cleared by reading SR1 followed by SR2 */
	uint32_t dummyread;
	dummyread = pI2CHandle -> pI2Cx -> SR1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	60fb      	str	r3, [r7, #12]
	dummyread = pI2CHandle -> pI2Cx -> SR2;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	60fb      	str	r3, [r7, #12]
	(void)dummyread;

}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <I2C_MasterHandleRXNEInterrupt>:
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_MasterHandleRXNEInterrupt (I2C_Handle_t *pI2CHandle){
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]

	if(pI2CHandle -> RxSize == 1){
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150e:	2b01      	cmp	r3, #1
 8001510:	d10b      	bne.n	800152a <I2C_MasterHandleRXNEInterrupt+0x28>
		*(pI2CHandle ->RxBuffer) = pI2CHandle -> pI2Cx -> DR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
		pI2CHandle ->RxLen --;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	61da      	str	r2, [r3, #28]
	}
	if(pI2CHandle -> RxSize > 1){
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	2b01      	cmp	r3, #1
 8001530:	d91a      	bls.n	8001568 <I2C_MasterHandleRXNEInterrupt+0x66>
		if(pI2CHandle ->RxLen == 2){
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d105      	bne.n	8001546 <I2C_MasterHandleRXNEInterrupt+0x44>
			/* disable acking */
			I2C_ManageAcking(pI2CHandle ->pI2Cx, DISABLE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fea2 	bl	800128a <I2C_ManageAcking>
		}
		*(pI2CHandle ->RxBuffer) = pI2CHandle -> pI2Cx -> DR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]
		pI2CHandle ->RxLen --;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	1e5a      	subs	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	61da      	str	r2, [r3, #28]
		pI2CHandle ->RxBuffer ++;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	615a      	str	r2, [r3, #20]

	}
	if(pI2CHandle -> RxLen == 0){
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d110      	bne.n	8001592 <I2C_MasterHandleRXNEInterrupt+0x90>
		/* generate stop condition if sr disabled */
		if (pI2CHandle -> Sr == I2C_DISABLE_SR ){
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d104      	bne.n	8001584 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStartCondition(pI2CHandle ->pI2Cx);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff69 	bl	8001456 <I2C_GenerateStartCondition>
		}
		/*resets all members of handle */
		I2C_CloseReceiveData(pI2CHandle);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fed5 	bl	8001334 <I2C_CloseReceiveData>

		/* notify the application about rx complete */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 800158a:	2101      	movs	r1, #1
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff f839 	bl	8000604 <I2C_ApplicationEventCallback>

	}


}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <I2C_MasterHandleTXEInterrupt>:
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_MasterHandleTXEInterrupt (I2C_Handle_t *pI2CHandle){
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

	if(pI2CHandle ->TxRxState == I2C_STATUS_BUSY_TX){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7e1b      	ldrb	r3, [r3, #24]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d113      	bne.n	80015d2 <I2C_MasterHandleTXEInterrupt+0x38>
		if(pI2CHandle ->TxLen > 0){
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00f      	beq.n	80015d2 <I2C_MasterHandleTXEInterrupt+0x38>
			/* load data */
			pI2CHandle -> pI2Cx ->DR = *(pI2CHandle ->TxBuffer);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	611a      	str	r2, [r3, #16]
			pI2CHandle ->TxLen --;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	621a      	str	r2, [r3, #32]
			pI2CHandle ->TxBuffer ++;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	611a      	str	r2, [r3, #16]
		}
	}

}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <I2C_MasterHandleBTFInterrupt>:
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_MasterHandleBTFInterrupt (I2C_Handle_t *pI2CHandle){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

	if(pI2CHandle ->TxRxState == I2C_STATUS_BUSY_TX){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e1b      	ldrb	r3, [r3, #24]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d11b      	bne.n	8001624 <I2C_MasterHandleBTFInterrupt+0x48>
		/* chk for TXE flag */
		if (pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_TXE)){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d014      	beq.n	8001624 <I2C_MasterHandleBTFInterrupt+0x48>
			/* both BTF AND TXE are set */
			if (pI2CHandle ->TxLen == 0){
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d110      	bne.n	8001624 <I2C_MasterHandleBTFInterrupt+0x48>
				/* 1. Generate stop condition */
				if(pI2CHandle ->Sr == I2C_DISABLE_SR){
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d104      	bne.n	8001616 <I2C_MasterHandleBTFInterrupt+0x3a>
					I2C_GenerateStopCondition(pI2CHandle ->pI2Cx);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe55 	bl	80012c0 <I2C_GenerateStopCondition>
				}

				/* 2. Resets all member elements of handle structure */
				I2C_CloseSendData(pI2CHandle);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fe61 	bl	80012de <I2C_CloseSendData>

				/* 3. notify the application about tx complete */
				I2C_ApplicationEventCallback (pI2CHandle, I2C_EV_TX_CMPLT);
 800161c:	2100      	movs	r1, #0
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7fe fff0 	bl	8000604 <I2C_ApplicationEventCallback>
		;
	}



}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <I2C_EV_IRQHandling>:
 *
 * @return		-
 *
 * @note		- Interrupt handling for different I2C events (refer SR1)
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	/*Interrupt handling for both master and slave mode of a device */

	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle -> pI2Cx -> CR2 & (1 << I2C_CR2_ITEVTEN);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800163e:	613b      	str	r3, [r7, #16]
	temp2 = pI2CHandle -> pI2Cx -> CR2 & (1 << I2C_CR2_ITBUFEN);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164a:	60fb      	str	r3, [r7, #12]
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_SB);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]

	/*1. Handle For interrupt generated by SB event */
	/*	Note : SB flag is only applicable in Master mode */
	if(temp1 && temp3){
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d018      	beq.n	8001690 <I2C_EV_IRQHandling+0x64>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d015      	beq.n	8001690 <I2C_EV_IRQHandling+0x64>
		/* Start condition is generated succefully. Send address with read or wr */
		uint8_t mode;
		if(pI2CHandle -> TxRxState == I2C_STATUS_BUSY_TX) mode = I2C_MASTER_WR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e1b      	ldrb	r3, [r3, #24]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d102      	bne.n	8001672 <I2C_EV_IRQHandling+0x46>
 800166c:	2300      	movs	r3, #0
 800166e:	75fb      	strb	r3, [r7, #23]
 8001670:	e005      	b.n	800167e <I2C_EV_IRQHandling+0x52>
		else if (pI2CHandle -> TxRxState == I2C_STATUS_BUSY_RX) mode = I2C_MASTER_RD;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7e1b      	ldrb	r3, [r3, #24]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d101      	bne.n	800167e <I2C_EV_IRQHandling+0x52>
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
		I2C_ExecuteAddressPhase(pI2CHandle ->pI2Cx, pI2CHandle ->DevAddr, mode);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001688:	7dfa      	ldrb	r2, [r7, #23]
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fef2 	bl	8001474 <I2C_ExecuteAddressPhase>


	/* 2. Handle For interrupt generated by ADDR event */
	/* Note : When master mode : Address is sent */
	/*	When Slave mode   : Address matched with own address */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_ADDR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp3){
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <I2C_EV_IRQHandling+0x82>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <I2C_EV_IRQHandling+0x82>
		/* clear ADDR flag  */
		I2C_ClearADDRFlag(pI2CHandle);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff05 	bl	80014b8 <I2C_ClearADDRFlag>

	}


	/* 3. Handle For interrupt generated by BTF(Byte Transfer Finished) event */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_BTF);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp3){
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <I2C_EV_IRQHandling+0xae>
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <I2C_EV_IRQHandling+0xae>
		/* BTF flag is set */
		if(pI2CHandle -> pI2Cx ->SR2 & (1 << I2C_SR2_MSL)){
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <I2C_EV_IRQHandling+0xae>
			/* device in master mode data transmission */
			I2C_MasterHandleBTFInterrupt(pI2CHandle);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff81 	bl	80015dc <I2C_MasterHandleBTFInterrupt>
	}


	/* 4. Handle For interrupt generated by STOPF event */
	/* Note : Stop detection flag is applicable only slave mode . For master this flag will never be set */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_STOPF);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp3){
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00c      	beq.n	8001706 <I2C_EV_IRQHandling+0xda>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <I2C_EV_IRQHandling+0xda>
		/* STOPF flag is set */
		/* Clear STOPF flag  ie read SR1 folloerd by write CR1 regs*/
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	601a      	str	r2, [r3, #0]

		/*Notify the app that STOPF generated by master */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 80016fe:	2102      	movs	r1, #2
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7fe ff7f 	bl	8000604 <I2C_ApplicationEventCallback>

	}


	/* 5. Handle For interrupt generated by TXE event */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_TXE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001710:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2 && temp3){
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01b      	beq.n	8001750 <I2C_EV_IRQHandling+0x124>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d018      	beq.n	8001750 <I2C_EV_IRQHandling+0x124>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d015      	beq.n	8001750 <I2C_EV_IRQHandling+0x124>
		/* TXE flag is set */
		/*chk for device mode */
		if(pI2CHandle -> pI2Cx ->SR2 & (1 << I2C_SR2_MSL)){
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <I2C_EV_IRQHandling+0x10e>
			/* device in master mode data transmission */
			I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff31 	bl	800159a <I2C_MasterHandleTXEInterrupt>
 8001738:	e00a      	b.n	8001750 <I2C_EV_IRQHandling+0x124>
		}
		else{
			/* devive is in slave mode */
			/* chk if the device is in transmit mode */
			if(pI2CHandle -> pI2Cx -> SR2 & (1 << I2C_SR2_TRA)){
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <I2C_EV_IRQHandling+0x124>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8001748:	2108      	movs	r1, #8
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe ff5a 	bl	8000604 <I2C_ApplicationEventCallback>

	}


	/* 6. Handle For interrupt generated by RXNE event */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_RXNE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800175a:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2 && temp3){
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01b      	beq.n	800179a <I2C_EV_IRQHandling+0x16e>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d018      	beq.n	800179a <I2C_EV_IRQHandling+0x16e>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d015      	beq.n	800179a <I2C_EV_IRQHandling+0x16e>
		/* RXNE flag is set */
		/*chk for device mode */
		if(pI2CHandle -> pI2Cx ->SR2 & (1 << I2C_SR2_MSL)){
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <I2C_EV_IRQHandling+0x158>
			/* device in master mode data reception */
			I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fec0 	bl	8001502 <I2C_MasterHandleRXNEInterrupt>


	}


}
 8001782:	e00a      	b.n	800179a <I2C_EV_IRQHandling+0x16e>
			if(!(pI2CHandle -> pI2Cx -> SR2 & (1 << I2C_SR2_TRA))){
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <I2C_EV_IRQHandling+0x16e>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8001792:	2109      	movs	r1, #9
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe ff35 	bl	8000604 <I2C_ApplicationEventCallback>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <I2C_ER_IRQHandling>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

	/*Know the status of  ITERREN control bit in the CR2 */
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	617b      	str	r3, [r7, #20]


	/*Check for Bus error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c0:	613b      	str	r3, [r7, #16]
	if(temp1  && temp2 )
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00e      	beq.n	80017e6 <I2C_ER_IRQHandling+0x44>
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00b      	beq.n	80017e6 <I2C_ER_IRQHandling+0x44>
	{
		/* This is Bus error */
		/* clear the buss error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017dc:	615a      	str	r2, [r3, #20]

	   /* notify the application about the error */
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80017de:	2103      	movs	r1, #3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7fe ff0f 	bl	8000604 <I2C_ApplicationEventCallback>
	}

	/* Check for arbitration lost error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017f0:	613b      	str	r3, [r7, #16]
	if(temp1  && temp2)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00e      	beq.n	8001816 <I2C_ER_IRQHandling+0x74>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <I2C_ER_IRQHandling+0x74>
	{
		/*This is arbitration lost error*/
		/* clear the arbitration lost error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800180c:	615a      	str	r2, [r3, #20]

		/* notify the application about the error */
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 800180e:	2104      	movs	r1, #4
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7fe fef7 	bl	8000604 <I2C_ApplicationEventCallback>
	}

	/* Check for ACK failure  error */

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001820:	613b      	str	r3, [r7, #16]
	if(temp1  && temp2)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d02a      	beq.n	800187e <I2C_ER_IRQHandling+0xdc>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d027      	beq.n	800187e <I2C_ER_IRQHandling+0xdc>
	{
		/* This is ACK failure error */
		/* clear the ACK failure error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800183c:	615a      	str	r2, [r3, #20]

		/* generate stop condition */
		I2C_GenerateStopCondition(pI2CHandle ->pI2Cx);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fd3c 	bl	80012c0 <I2C_GenerateStopCondition>

		/*  Optional but helpful: wait a moment for BUSY to drop */
		/*    (avoid tight infinite loops; use a small guard) */
		for (volatile int g = 0; g < 10000; ++g) {
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e009      	b.n	8001862 <I2C_ER_IRQHandling+0xc0>
			if ( (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_BUSY)) == 0 ) break;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <I2C_ER_IRQHandling+0xcc>
		for (volatile int g = 0; g < 10000; ++g) {
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001868:	4293      	cmp	r3, r2
 800186a:	ddf0      	ble.n	800184e <I2C_ER_IRQHandling+0xac>
 800186c:	e000      	b.n	8001870 <I2C_ER_IRQHandling+0xce>
			if ( (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_BUSY)) == 0 ) break;
 800186e:	bf00      	nop
		}

		/* 4) Close TX state & disable ITs so your API sees READY again */
		I2C_CloseSendData(pI2CHandle);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fd34 	bl	80012de <I2C_CloseSendData>


		/* notify the application about the error */
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001876:	2105      	movs	r1, #5
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7fe fec3 	bl	8000604 <I2C_ApplicationEventCallback>
	}

	/* Check for Overrun/underrun error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001888:	613b      	str	r3, [r7, #16]
	if(temp1  && temp2)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00e      	beq.n	80018ae <I2C_ER_IRQHandling+0x10c>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <I2C_ER_IRQHandling+0x10c>
	{
		/* This is Overrun/underrun */
		/* clear the Overrun/underrun error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a4:	615a      	str	r2, [r3, #20]

		/* notify the application about the error */
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 80018a6:	2106      	movs	r1, #6
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7fe feab 	bl	8000604 <I2C_ApplicationEventCallback>
	}

	/* Check for Time out error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b8:	613b      	str	r3, [r7, #16]
	if(temp1  && temp2)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00e      	beq.n	80018de <I2C_ER_IRQHandling+0x13c>
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <I2C_ER_IRQHandling+0x13c>
	{
		/* This is Time out error */
		/* clear the Time out error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80018d4:	615a      	str	r2, [r3, #20]

		/* notify the application about the error */
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 80018d6:	2107      	movs	r1, #7
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7fe fe93 	bl	8000604 <I2C_ApplicationEventCallback>
	}



}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <RCC_GetPCLK1Value>:
 *
 * @return		-uint32_t periperal clk1 value
 *
 * @note		-
 */
uint32_t  RCC_GetPCLK1Value (void){
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0

	uint32_t  pclk1, systemClk;
	uint16_t ahbp;
	uint8_t clkSrc, temp, apb1p;

	clkSrc = (RCC -> CFGR >> 2) & 0x3;
 80018ee:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <RCC_GetPCLK1Value+0x90>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	723b      	strb	r3, [r7, #8]

	/* get system clk freq */
	if(clkSrc == 0) systemClk = HSI_CLK_FREQ;
 80018fc:	7a3b      	ldrb	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <RCC_GetPCLK1Value+0x20>
 8001902:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <RCC_GetPCLK1Value+0x94>)
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e004      	b.n	8001912 <RCC_GetPCLK1Value+0x2a>
	else if(clkSrc == 1) systemClk = HSE_CLK_FREQ;
 8001908:	7a3b      	ldrb	r3, [r7, #8]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <RCC_GetPCLK1Value+0x2a>
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <RCC_GetPCLK1Value+0x98>)
 8001910:	60fb      	str	r3, [r7, #12]

	/* get ahb prescaler */
	temp = (RCC -> CFGR >> 4) & 0xF;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <RCC_GetPCLK1Value+0x90>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	71fb      	strb	r3, [r7, #7]

	if(temp < 8) ahbp = 1;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2b07      	cmp	r3, #7
 8001924:	d802      	bhi.n	800192c <RCC_GetPCLK1Value+0x44>
 8001926:	2301      	movs	r3, #1
 8001928:	817b      	strh	r3, [r7, #10]
 800192a:	e005      	b.n	8001938 <RCC_GetPCLK1Value+0x50>
	else ahbp = ahb_PreScaler[temp - 8];
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	3b08      	subs	r3, #8
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <RCC_GetPCLK1Value+0x9c>)
 8001932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001936:	817b      	strh	r3, [r7, #10]

	/* get apb2 prescaler */
	temp = (RCC -> CFGR >> 13) & 0x7;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <RCC_GetPCLK1Value+0x90>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	0b5b      	lsrs	r3, r3, #13
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	71fb      	strb	r3, [r7, #7]

	if(temp < 4) apb1p = 1;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d802      	bhi.n	8001952 <RCC_GetPCLK1Value+0x6a>
 800194c:	2301      	movs	r3, #1
 800194e:	727b      	strb	r3, [r7, #9]
 8001950:	e004      	b.n	800195c <RCC_GetPCLK1Value+0x74>
	else apb1p = abp1_PreScaler[temp - 4];
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	3b04      	subs	r3, #4
 8001956:	4a0c      	ldr	r2, [pc, #48]	@ (8001988 <RCC_GetPCLK1Value+0xa0>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	727b      	strb	r3, [r7, #9]

	pclk1 = (systemClk / ahbp /apb1p);
 800195c:	897b      	ldrh	r3, [r7, #10]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	fbb2 f2f3 	udiv	r2, r2, r3
 8001964:	7a7b      	ldrb	r3, [r7, #9]
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	603b      	str	r3, [r7, #0]

	return pclk1;
 800196c:	683b      	ldr	r3, [r7, #0]


}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40023800 	.word	0x40023800
 800197c:	00f42400 	.word	0x00f42400
 8001980:	007a1200 	.word	0x007a1200
 8001984:	20000000 	.word	0x20000000
 8001988:	20000014 	.word	0x20000014

0800198c <RTC_WUTControl>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_WUTControl(uint8_t EnorDi){
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]

	if (EnorDi == DISABLE){
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10d      	bne.n	80019b8 <RTC_WUTControl+0x2c>
		/* Set WUTE in RTC_CR to disable the wakeup timer */
		RTC->CR &= ~(1 << RTC_CR_WUTE);
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <RTC_WUTControl+0x44>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4a0b      	ldr	r2, [pc, #44]	@ (80019d0 <RTC_WUTControl+0x44>)
 80019a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019a6:	6093      	str	r3, [r2, #8]

		/* wait until WUTWF bit is set in RTC_ISR to make sure the access to wakeup auto-reload counter and to WUCKSEL[2:0] bits is allowed */
		while(!(RTC->ISR & (1 << RTC_ISR_WUTWF)));
 80019a8:	bf00      	nop
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <RTC_WUTControl+0x44>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f9      	beq.n	80019aa <RTC_WUTControl+0x1e>
		/* Set WUTE in RTC_CR to disable the wakeup timer */
		RTC->CR |= (1 << RTC_CR_WUTE);
	}


}
 80019b6:	e005      	b.n	80019c4 <RTC_WUTControl+0x38>
		RTC->CR |= (1 << RTC_CR_WUTE);
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <RTC_WUTControl+0x44>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <RTC_WUTControl+0x44>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019c2:	6093      	str	r3, [r2, #8]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40002800 	.word	0x40002800

080019d4 <RTC_WUTConfig>:
 * @return		-
 *
 * @note		-
 */

void RTC_WUTConfig(RTC_WUT_Config_t *pWUTConfig){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]

	/* 1.Backup domain write enable */
	BackupDomain_Unlock();
 80019e0:	f000 fa94 	bl	8001f0c <BackupDomain_Unlock>

	/* 2. RTC write key */
	RTC_Unlock();
 80019e4:	f000 fab6 	bl	8001f54 <RTC_Unlock>

	/* 3. Disable Wake up timer */
	RTC_WUTControl(DISABLE);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff ffcf 	bl	800198c <RTC_WUTControl>

	/* 4.Load WUTR with reload value */
	temp = DECTOBCD(pWUTConfig ->Auto_Reload);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a33      	ldr	r2, [pc, #204]	@ (8001ac0 <RTC_WUTConfig+0xec>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	08db      	lsrs	r3, r3, #3
 80019fa:	0118      	lsls	r0, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <RTC_WUTConfig+0xec>)
 8001a02:	fba3 2301 	umull	r2, r3, r3, r1
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	1aca      	subs	r2, r1, r3
 8001a12:	ea40 0302 	orr.w	r3, r0, r2
 8001a16:	60fb      	str	r3, [r7, #12]
	RTC->WUTR = temp;
 8001a18:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac4 <RTC_WUTConfig+0xf0>)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6153      	str	r3, [r2, #20]

	/* 5. Select wakeup clock using WUCKSEL[2:0] bits in RTC-CR */
	RTC->CR |= (pWUTConfig->Clk & 0x0F);
 8001a1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <RTC_WUTConfig+0xf0>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	4926      	ldr	r1, [pc, #152]	@ (8001ac4 <RTC_WUTConfig+0xf0>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
		/* will implement later */

	}

	/* clear wutf flag */
	RTC->ISR &= ~(1 << RTC_ISR_WUTF);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <RTC_WUTConfig+0xf0>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a23      	ldr	r2, [pc, #140]	@ (8001ac4 <RTC_WUTConfig+0xf0>)
 8001a36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001a3a:	60d3      	str	r3, [r2, #12]
	/* Enable RTC block internal interrupt to enable EXTI block event or NVIC interrupt */
	RTC->CR |= (1 << RTC_CR_WUTIE);
 8001a3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <RTC_WUTConfig+0xf0>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a20      	ldr	r2, [pc, #128]	@ (8001ac4 <RTC_WUTConfig+0xf0>)
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a46:	6093      	str	r3, [r2, #8]

	/* Enable Rising edge */
	EXTI->RTSR |= (1 << 22);
 8001a48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a52:	6093      	str	r3, [r2, #8]
	/* Disable Falling Edge */
	EXTI ->FTSR &= ~(1 << 22);
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a5a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a5e:	60d3      	str	r3, [r2, #12]

	if(pWUTConfig->Interrupt_EnorDi){
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7a1b      	ldrb	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d014      	beq.n	8001a92 <RTC_WUTConfig+0xbe>

		/* Clear EXTI22 pending in PR */
		EXTI ->PR &= ~(1 << 22);
 8001a68:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a6e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a72:	6153      	str	r3, [r2, #20]
		/* Enable EXTI 22 Interrupt in IMR */
		EXTI ->IMR |= (1 <<22);
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a7e:	6013      	str	r3, [r2, #0]

		/* set priority and Enable NVIC IRQ */
		RTC_IRQPriorityConfig(IRQ_NO_EXTI22, NVIC_IRQ_PR10);
 8001a80:	210a      	movs	r1, #10
 8001a82:	2003      	movs	r0, #3
 8001a84:	f000 fbae 	bl	80021e4 <RTC_IRQPriorityConfig>
		RTC_IRQInterruptConfig(IRQ_NO_EXTI22, ENABLE);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f000 fb00 	bl	8002090 <RTC_IRQInterruptConfig>
 8001a90:	e00b      	b.n	8001aaa <RTC_WUTConfig+0xd6>

	}
	else {
		/* Clear EXTI22 pending in PR */
		EXTI ->PR &= ~(1 << 22);
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001a98:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a9c:	6153      	str	r3, [r2, #20]
		/* Enable EXTI 22 in Event mask reg  */
		EXTI ->EMR |= (1 << 22);
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <RTC_WUTConfig+0xf4>)
 8001aa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001aa8:	6053      	str	r3, [r2, #4]
	}

	/* Enable wake up timer */
	RTC_WUTControl(ENABLE);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff ff6e 	bl	800198c <RTC_WUTControl>

	/* RTC write key to lock */
	RTC_Lock();
 8001ab0:	f000 fa5e 	bl	8001f70 <RTC_Lock>

	/* Backup domain write enable */
	BackupDomain_Lock();
 8001ab4:	f000 fa40 	bl	8001f38 <BackupDomain_Lock>


}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	40002800 	.word	0x40002800
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <RTC_GetTimeDate>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_GetTimeDate(RTC_Time_t* pRTCTime){
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

	uint32_t temp1 =0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
	uint8_t temp2 = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	72fb      	strb	r3, [r7, #11]

	/* chk BYPass shadow reg */
	if(RTC->CR & (1 << RTC_CR_BYPSHAD)){
 8001adc:	4b64      	ldr	r3, [pc, #400]	@ (8001c70 <RTC_GetTimeDate+0x1a4>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 80be 	bne.w	8001c66 <RTC_GetTimeDate+0x19a>
		/* will implement */
	}
	else{
		/* clear RSF bit in RTC-ISR reg and wait until RSF is set before reading the RTC_SSR, RTC_TR and RTC_DR registers.*/
		RTC ->ISR &= ~ (1 << RTC_ISR_RSF);
 8001aea:	4b61      	ldr	r3, [pc, #388]	@ (8001c70 <RTC_GetTimeDate+0x1a4>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4a60      	ldr	r2, [pc, #384]	@ (8001c70 <RTC_GetTimeDate+0x1a4>)
 8001af0:	f023 0320 	bic.w	r3, r3, #32
 8001af4:	60d3      	str	r3, [r2, #12]
		while(!(RTC ->ISR & (1 << RTC_ISR_RSF)));
 8001af6:	bf00      	nop
 8001af8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c70 <RTC_GetTimeDate+0x1a4>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f9      	beq.n	8001af8 <RTC_GetTimeDate+0x2c>

		/*read time */
		temp1 = RTC->TR;
 8001b04:	4b5a      	ldr	r3, [pc, #360]	@ (8001c70 <RTC_GetTimeDate+0x1a4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]

		temp2 = (temp1 >> RTC_TR_SU3_0) & 0x7F;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b12:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Seconds = BCDTODEC(temp2);
 8001b14:	7afb      	ldrb	r3, [r7, #11]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	0089      	lsls	r1, r1, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	709a      	strb	r2, [r3, #2]

		temp2 = (temp1 >> RTC_TR_MNU3_0) & 0x7F;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b3e:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Minutes = BCDTODEC(temp2);
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	4619      	mov	r1, r3
 8001b50:	0089      	lsls	r1, r1, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	705a      	strb	r2, [r3, #1]

		temp2 = (temp1 >> RTC_TR_HU3_0) & 0x3F;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b6a:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Hours = BCDTODEC(temp2);
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	7afb      	ldrb	r3, [r7, #11]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	0089      	lsls	r1, r1, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	701a      	strb	r2, [r3, #0]

		temp2 = (temp1 >> RTC_TR_AM_PM) & 0x01;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	0d9b      	lsrs	r3, r3, #22
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	72fb      	strb	r3, [r7, #11]
		pRTCTime->AMPM = BCDTODEC(temp2);
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	0089      	lsls	r1, r1, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	70da      	strb	r2, [r3, #3]

		/*read Date */
		temp1 = RTC->DR;
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <RTC_GetTimeDate+0x1a4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

		temp2 = (temp1 >> RTC_DR_DU3_0) & 0x3F;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bc6:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Day = BCDTODEC(temp2);
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	0089      	lsls	r1, r1, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	715a      	strb	r2, [r3, #5]

		temp2 = (temp1 >> RTC_DR_MU3_0) & 0x1F;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Month = BCDTODEC(temp2);
 8001bf4:	7afb      	ldrb	r3, [r7, #11]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4619      	mov	r1, r3
 8001c04:	0089      	lsls	r1, r1, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	719a      	strb	r2, [r3, #6]

		temp2 = (temp1 >> RTC_DR_YU3_0) & 0xFF;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Year = BCDTODEC(temp2);
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	7afb      	ldrb	r3, [r7, #11]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	0089      	lsls	r1, r1, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	71da      	strb	r2, [r3, #7]

		temp2 = (temp1 >> RTC_DR_WDU2_0) & 0x07;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	0b5b      	lsrs	r3, r3, #13
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Weekday = BCDTODEC(temp2);
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	4619      	mov	r1, r3
 8001c56:	0089      	lsls	r1, r1, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	711a      	strb	r2, [r3, #4]


	}


}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40002800 	.word	0x40002800

08001c74 <RTC_Init>:
 *
 * @return		-none
 *
 * @note		-
 */
void RTC_Init(RTC_Handle_t *pRTCHandle){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

	/*  Enable write to RCC_BDCR, RTC registers */
	/* Need to set DBP(Disable Backup domain write Protection) bit in RCC_PWR reg */
	BackupDomain_Unlock();
 8001c7c:	f000 f946 	bl	8001f0c <BackupDomain_Unlock>

	/*  Optionally Resets the Backup Domain. This clears the clk rtc clk source and RTC regs */
	if(pRTCHandle ->RTC_Config.Reset_BackupDomain_EnorDi){
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b5b      	ldrb	r3, [r3, #13]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <RTC_Init+0x2c>
		RCC->BDCR |= (1 << 16);
 8001c88:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <RTC_Init+0x78>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8c:	4a17      	ldr	r2, [pc, #92]	@ (8001cec <RTC_Init+0x78>)
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c92:	6713      	str	r3, [r2, #112]	@ 0x70
		RCC->BDCR &= ~(1 << 16);
 8001c94:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <RTC_Init+0x78>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <RTC_Init+0x78>)
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c9e:	6713      	str	r3, [r2, #112]	@ 0x70
	}
	/* RTC_clk configuration */
	RTC_ClkConfig(& pRTCHandle->RTC_Config);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f970 	bl	8001f88 <RTC_ClkConfig>
		/* will implement later*/
	}
#endif

	/*Disable RTC write protection */
	RTC_Unlock();
 8001ca8:	f000 f954 	bl	8001f54 <RTC_Unlock>

	/* Enter rtc initialization mode */
	RTC_EnterCalendrInitMode();
 8001cac:	f000 f822 	bl	8001cf4 <RTC_EnterCalendrInitMode>
	/* program prescalers */
	/* Prescalers (Async in PREDIV_A [22:16], Sync in PREDIV_S [14:0]) */
	/* Note: First pgm the sync prescaler then async prescaler */
	RTC ->PRER = (pRTCHandle->RTC_Config.Sync_Prescaler & 0x7FFF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8001cf0 <RTC_Init+0x7c>)
 8001cb6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001cba:	6113      	str	r3, [r2, #16]
	RTC ->PRER |= ((pRTCHandle->RTC_Config.Async_Prescaler & 0x7F) << 16);
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <RTC_Init+0x7c>)
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001cca:	4909      	ldr	r1, [pc, #36]	@ (8001cf0 <RTC_Init+0x7c>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	610b      	str	r3, [r1, #16]


	/* RTC_SetTimeDate */
	RTC_SetTimeDate(pRTCHandle);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f833 	bl	8001d3c <RTC_SetTimeDate>

	/* exit initialization mode */
	RTC_ExitCalendrInitMode();
 8001cd6:	f000 f823 	bl	8001d20 <RTC_ExitCalendrInitMode>

	/* enable rtc write protection */
	RTC_Lock();
 8001cda:	f000 f949 	bl	8001f70 <RTC_Lock>

	/* enable backup domain write protection */
	BackupDomain_Lock();
 8001cde:	f000 f92b 	bl	8001f38 <BackupDomain_Lock>


}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40002800 	.word	0x40002800

08001cf4 <RTC_EnterCalendrInitMode>:
 * 									Helper Fns
 ************************************************************************************************************/
/***************************************************************************************
 * RTC enter calendar initialization mode
 ******************************************************************************************/
static void RTC_EnterCalendrInitMode(void){
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

	/* Set INIT bit to 1 in the RTC_ISR register to enter initialization mode.*/
	RTC->ISR |= (1 << RTC_ISR_INIT);
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <RTC_EnterCalendrInitMode+0x28>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <RTC_EnterCalendrInitMode+0x28>)
 8001cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d02:	60d3      	str	r3, [r2, #12]
	/* wait util the INITF flag is set */
	while(!(RTC->ISR & (1 << RTC_ISR_INITF)));
 8001d04:	bf00      	nop
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <RTC_EnterCalendrInitMode+0x28>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f9      	beq.n	8001d06 <RTC_EnterCalendrInitMode+0x12>

}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	40002800 	.word	0x40002800

08001d20 <RTC_ExitCalendrInitMode>:


/***************************************************************************************
 * RTC enter calendar initialization mode
 ******************************************************************************************/
static void RTC_ExitCalendrInitMode(void){
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

	/* clear INIT in the RTC_ISR register to exit initialization mode.*/
	RTC->ISR &= ~(1 << RTC_ISR_INIT);
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <RTC_ExitCalendrInitMode+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4a03      	ldr	r2, [pc, #12]	@ (8001d38 <RTC_ExitCalendrInitMode+0x18>)
 8001d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d2e:	60d3      	str	r3, [r2, #12]

}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	40002800 	.word	0x40002800

08001d3c <RTC_SetTimeDate>:


/***************************************************************************************
 * RTC time date initialization
 ******************************************************************************************/
static void RTC_SetTimeDate(RTC_Handle_t *pRTCHandle){
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

	/* Load the initial time and date values in the shadow registers (RTC_TR and RTC_DR) */
	uint32_t temp;

	/*Load Seconds, minutes,Hours and format in BCD format*/
	temp =0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Seconds) << RTC_TR_SU3_0);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7c9b      	ldrb	r3, [r3, #18]
 8001d4c:	4a6d      	ldr	r2, [pc, #436]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	0118      	lsls	r0, r3, #4
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7c9a      	ldrb	r2, [r3, #18]
 8001d5c:	4b69      	ldr	r3, [pc, #420]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d62:	08d9      	lsrs	r1, r3, #3
 8001d64:	460b      	mov	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4303      	orrs	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Minutes) << RTC_TR_MNU3_0);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7c5b      	ldrb	r3, [r3, #17]
 8001d7e:	4a61      	ldr	r2, [pc, #388]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	0118      	lsls	r0, r3, #4
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7c5a      	ldrb	r2, [r3, #17]
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001d90:	fba3 1302 	umull	r1, r3, r3, r2
 8001d94:	08d9      	lsrs	r1, r3, #3
 8001d96:	460b      	mov	r3, r1
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4303      	orrs	r3, r0
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Hours) << RTC_TR_HU3_0);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7c1b      	ldrb	r3, [r3, #16]
 8001db0:	4a54      	ldr	r2, [pc, #336]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	0118      	lsls	r0, r3, #4
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7c1a      	ldrb	r2, [r3, #16]
 8001dc0:	4b50      	ldr	r3, [pc, #320]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001dc6:	08d9      	lsrs	r1, r3, #3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4303      	orrs	r3, r0
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.AMPM) << RTC_TR_AM_PM);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7cdb      	ldrb	r3, [r3, #19]
 8001de2:	4a48      	ldr	r2, [pc, #288]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	0118      	lsls	r0, r3, #4
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7cda      	ldrb	r2, [r3, #19]
 8001df2:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001df4:	fba3 1302 	umull	r1, r3, r3, r2
 8001df8:	08d9      	lsrs	r1, r3, #3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4303      	orrs	r3, r0
 8001e08:	059b      	lsls	r3, r3, #22
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

	RTC->TR = temp;
 8001e10:	4a3d      	ldr	r2, [pc, #244]	@ (8001f08 <RTC_SetTimeDate+0x1cc>)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6013      	str	r3, [r2, #0]

	/*Load Date, Month,weekday and year in BCD format*/
	temp =0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Day) << RTC_DR_DU3_0);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7d5b      	ldrb	r3, [r3, #21]
 8001e1e:	4a39      	ldr	r2, [pc, #228]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	0118      	lsls	r0, r3, #4
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7d5a      	ldrb	r2, [r3, #21]
 8001e2e:	4b35      	ldr	r3, [pc, #212]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001e30:	fba3 1302 	umull	r1, r3, r3, r2
 8001e34:	08d9      	lsrs	r1, r3, #3
 8001e36:	460b      	mov	r3, r1
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4303      	orrs	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Month) << RTC_DR_MU3_0);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7d9b      	ldrb	r3, [r3, #22]
 8001e50:	4a2c      	ldr	r2, [pc, #176]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	08db      	lsrs	r3, r3, #3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	0118      	lsls	r0, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7d9a      	ldrb	r2, [r3, #22]
 8001e60:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001e62:	fba3 1302 	umull	r1, r3, r3, r2
 8001e66:	08d9      	lsrs	r1, r3, #3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4303      	orrs	r3, r0
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Weekday) << RTC_DR_WDU2_0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7d1b      	ldrb	r3, [r3, #20]
 8001e82:	4a20      	ldr	r2, [pc, #128]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	0118      	lsls	r0, r3, #4
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7d1a      	ldrb	r2, [r3, #20]
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001e94:	fba3 1302 	umull	r1, r3, r3, r2
 8001e98:	08d9      	lsrs	r1, r3, #3
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4303      	orrs	r3, r0
 8001ea8:	035b      	lsls	r3, r3, #13
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Year) << RTC_DR_YU3_0);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7ddb      	ldrb	r3, [r3, #23]
 8001eb4:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	0118      	lsls	r0, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7dda      	ldrb	r2, [r3, #23]
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <RTC_SetTimeDate+0x1c8>)
 8001ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8001eca:	08d9      	lsrs	r1, r3, #3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4303      	orrs	r3, r0
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]

	RTC->DR = temp;
 8001ee2:	4a09      	ldr	r2, [pc, #36]	@ (8001f08 <RTC_SetTimeDate+0x1cc>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6053      	str	r3, [r2, #4]


	/* configure the time format (12 or 24 hours) through the FMT bit in the RTC_CR */
	RTC ->CR |= (pRTCHandle ->RTC_Config.hour_format << RTC_CR_FMT);
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <RTC_SetTimeDate+0x1cc>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7b1b      	ldrb	r3, [r3, #12]
 8001ef0:	019b      	lsls	r3, r3, #6
 8001ef2:	4905      	ldr	r1, [pc, #20]	@ (8001f08 <RTC_SetTimeDate+0x1cc>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]


}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	cccccccd 	.word	0xcccccccd
 8001f08:	40002800 	.word	0x40002800

08001f0c <BackupDomain_Unlock>:


/***********************************************************
 * Back up domain unlock
 ***************************************************************/
static void BackupDomain_Unlock(void){
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

	/*Enable PWR peripheral clock*/
	PWR_PCLK_EN();
 8001f10:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <BackupDomain_Unlock+0x24>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	4a06      	ldr	r2, [pc, #24]	@ (8001f30 <BackupDomain_Unlock+0x24>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Disable Backup Domain write protection DBP*/
	PWR->CR |= (1 << 8);
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <BackupDomain_Unlock+0x28>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <BackupDomain_Unlock+0x28>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f26:	6013      	str	r3, [r2, #0]

}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000

08001f38 <BackupDomain_Lock>:


/***************************************************************
 * Back up domain unlock
 ****************************************************************/
static void BackupDomain_Lock(void){
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

	/*Enable Backup Domain write protection DBP*/
	PWR->CR &= ~(1 << 8);
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <BackupDomain_Lock+0x18>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a03      	ldr	r2, [pc, #12]	@ (8001f50 <BackupDomain_Lock+0x18>)
 8001f42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f46:	6013      	str	r3, [r2, #0]

}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40007000 	.word	0x40007000

08001f54 <RTC_Unlock>:
/***********************************************************************************************
 * RTC unlock disables rtc write protection
 * Note: unlock the write protection on all the RTC registers
 * except for RTC_ISR[31:8], RTC_TAFCR, and RTC_BKPxR.
 *****************************************************************************************/
static void RTC_Unlock(void){
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

	/* write 0xCA followed by 0x53 into the RTC WPR reg to disable write protection */
	RTC->WPR = 0xCA;
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <RTC_Unlock+0x18>)
 8001f5a:	22ca      	movs	r2, #202	@ 0xca
 8001f5c:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8001f5e:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <RTC_Unlock+0x18>)
 8001f60:	2253      	movs	r2, #83	@ 0x53
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24


}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40002800 	.word	0x40002800

08001f70 <RTC_Lock>:

/**********************************************************************************************
 * RTC lock enables rtc write protection
  ********************************************************************************************/
static void RTC_Lock(void){
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

	/* write 0xFF into the RTC WPR reg to enables write protection */
	RTC->WPR = 0xFF;
 8001f74:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <RTC_Lock+0x14>)
 8001f76:	22ff      	movs	r2, #255	@ 0xff
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40002800 	.word	0x40002800

08001f88 <RTC_ClkConfig>:


/******************************************************************************************************
 * RTC-ClkConfig
 *****************************************************************************************************/
static void RTC_ClkConfig(RTC_Config_t *pRTCConfig){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

	/* Enable the selected RTC clock sorce */
	/* Note: The selected clk source must be enabeld and ready before being selected as RTC_CLK source */
	switch (pRTCConfig->Clock_Source){
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d030      	beq.n	8001ffa <RTC_ClkConfig+0x72>
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	dc43      	bgt.n	8002024 <RTC_ClkConfig+0x9c>
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d002      	beq.n	8001fa6 <RTC_ClkConfig+0x1e>
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d015      	beq.n	8001fd0 <RTC_ClkConfig+0x48>
 8001fa4:	e03e      	b.n	8002024 <RTC_ClkConfig+0x9c>

		uint32_t temp;
		case RTC_CLKSRC_LSE:
			/* LSEON */
			RCC->BDCR |= (1 << 0);
 8001fa6:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <RTC_ClkConfig+0x100>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001faa:	4a37      	ldr	r2, [pc, #220]	@ (8002088 <RTC_ClkConfig+0x100>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6713      	str	r3, [r2, #112]	@ 0x70

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 8001fb2:	4b36      	ldr	r3, [pc, #216]	@ (800208c <RTC_ClkConfig+0x104>)
 8001fb4:	60fb      	str	r3, [r7, #12]
			while((!(RCC->BDCR & (1 << 1))) && temp--);
 8001fb6:	bf00      	nop
 8001fb8:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <RTC_ClkConfig+0x100>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d132      	bne.n	800202a <RTC_ClkConfig+0xa2>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e5a      	subs	r2, r3, #1
 8001fc8:	60fa      	str	r2, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f4      	bne.n	8001fb8 <RTC_ClkConfig+0x30>

			break;
 8001fce:	e02c      	b.n	800202a <RTC_ClkConfig+0xa2>

		case RTC_CLKSRC_LSI:
			/* LSION */
			RCC->CSR |= (1 << 0);
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <RTC_ClkConfig+0x100>)
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002088 <RTC_ClkConfig+0x100>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6753      	str	r3, [r2, #116]	@ 0x74

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <RTC_ClkConfig+0x104>)
 8001fde:	60fb      	str	r3, [r7, #12]
			while((!(RCC->CSR & (1 << 1))) && temp--);
 8001fe0:	bf00      	nop
 8001fe2:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <RTC_ClkConfig+0x100>)
 8001fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d11f      	bne.n	800202e <RTC_ClkConfig+0xa6>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	60fa      	str	r2, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f4      	bne.n	8001fe2 <RTC_ClkConfig+0x5a>

			break;
 8001ff8:	e019      	b.n	800202e <RTC_ClkConfig+0xa6>

		case RTC_CLKSRC_HSE_DIV128:
			/* LSION */
			RCC->CR |= (1 << 16);
 8001ffa:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <RTC_ClkConfig+0x100>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <RTC_ClkConfig+0x100>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002004:	6013      	str	r3, [r2, #0]

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 8002006:	4b21      	ldr	r3, [pc, #132]	@ (800208c <RTC_ClkConfig+0x104>)
 8002008:	60fb      	str	r3, [r7, #12]
			while((!(RCC->CR & (1 << 17))) && temp--);
 800200a:	bf00      	nop
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <RTC_ClkConfig+0x100>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10c      	bne.n	8002032 <RTC_ClkConfig+0xaa>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	60fa      	str	r2, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f4      	bne.n	800200c <RTC_ClkConfig+0x84>

			break;
 8002022:	e006      	b.n	8002032 <RTC_ClkConfig+0xaa>

		default: BackupDomain_Lock();
 8002024:	f7ff ff88 	bl	8001f38 <BackupDomain_Lock>
 8002028:	e004      	b.n	8002034 <RTC_ClkConfig+0xac>
			break;
 800202a:	bf00      	nop
 800202c:	e002      	b.n	8002034 <RTC_ClkConfig+0xac>
			break;
 800202e:	bf00      	nop
 8002030:	e000      	b.n	8002034 <RTC_ClkConfig+0xac>
			break;
 8002032:	bf00      	nop
	}

	/* Program the selected clk as RTC clock using RTCSEL bits in BDCR*/
	if(pRTCConfig->Clock_Source == RTC_CLKSRC_LSE) RCC->BDCR |= (RTC_CLKSRC_LSE << 8);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <RTC_ClkConfig+0xc2>
 800203c:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <RTC_ClkConfig+0x100>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002040:	4a11      	ldr	r2, [pc, #68]	@ (8002088 <RTC_ClkConfig+0x100>)
 8002042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002046:	6713      	str	r3, [r2, #112]	@ 0x70
 8002048:	e014      	b.n	8002074 <RTC_ClkConfig+0xec>
	else if(pRTCConfig->Clock_Source == RTC_CLKSRC_LSI) RCC->BDCR |= (RTC_CLKSRC_LSI << 8);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d106      	bne.n	8002060 <RTC_ClkConfig+0xd8>
 8002052:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <RTC_ClkConfig+0x100>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002056:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <RTC_ClkConfig+0x100>)
 8002058:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205c:	6713      	str	r3, [r2, #112]	@ 0x70
 800205e:	e009      	b.n	8002074 <RTC_ClkConfig+0xec>
	else if(pRTCConfig->Clock_Source == RTC_CLKSRC_HSE_DIV128) RCC->BDCR |= (RTC_CLKSRC_HSE_DIV128 << 8);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d105      	bne.n	8002074 <RTC_ClkConfig+0xec>
 8002068:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <RTC_ClkConfig+0x100>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206c:	4a06      	ldr	r2, [pc, #24]	@ (8002088 <RTC_ClkConfig+0x100>)
 800206e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002072:	6713      	str	r3, [r2, #112]	@ 0x70

	/* Enable the RTC Clock */
	RCC->BDCR |= (1 << 15);
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <RTC_ClkConfig+0x100>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002078:	4a03      	ldr	r2, [pc, #12]	@ (8002088 <RTC_ClkConfig+0x100>)
 800207a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800207e:	6713      	str	r3, [r2, #112]	@ 0x70

}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	000f4240 	.word	0x000f4240

08002090 <RTC_IRQInterruptConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d144      	bne.n	8002130 <RTC_IRQInterruptConfig+0xa0>
		if(IRQNumber <= 31){
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b1f      	cmp	r3, #31
 80020aa:	d809      	bhi.n	80020c0 <RTC_IRQInterruptConfig+0x30>
			/* configure ISER0 */
			*NVIC_ISER0 |= (1 << IRQNumber);
 80020ac:	4b45      	ldr	r3, [pc, #276]	@ (80021c4 <RTC_IRQInterruptConfig+0x134>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	79fa      	ldrb	r2, [r7, #7]
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4611      	mov	r1, r2
 80020ba:	4a42      	ldr	r2, [pc, #264]	@ (80021c4 <RTC_IRQInterruptConfig+0x134>)
 80020bc:	430b      	orrs	r3, r1
 80020be:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 32 && IRQNumber < 64){
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b1f      	cmp	r3, #31
 80020c4:	d90e      	bls.n	80020e4 <RTC_IRQInterruptConfig+0x54>
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80020ca:	d80b      	bhi.n	80020e4 <RTC_IRQInterruptConfig+0x54>
			/* configure ISER1 */
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80020cc:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <RTC_IRQInterruptConfig+0x138>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	79fa      	ldrb	r2, [r7, #7]
 80020d2:	f002 021f 	and.w	r2, r2, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	4611      	mov	r1, r2
 80020de:	4a3a      	ldr	r2, [pc, #232]	@ (80021c8 <RTC_IRQInterruptConfig+0x138>)
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 64 && IRQNumber < 96){
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80020e8:	d90e      	bls.n	8002108 <RTC_IRQInterruptConfig+0x78>
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b5f      	cmp	r3, #95	@ 0x5f
 80020ee:	d80b      	bhi.n	8002108 <RTC_IRQInterruptConfig+0x78>
			/* configure ISER2 */
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 80020f0:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <RTC_IRQInterruptConfig+0x13c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	f002 021f 	and.w	r2, r2, #31
 80020fa:	2101      	movs	r1, #1
 80020fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002100:	4611      	mov	r1, r2
 8002102:	4a32      	ldr	r2, [pc, #200]	@ (80021cc <RTC_IRQInterruptConfig+0x13c>)
 8002104:	430b      	orrs	r3, r1
 8002106:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 96 && IRQNumber < 128){
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b5f      	cmp	r3, #95	@ 0x5f
 800210c:	d954      	bls.n	80021b8 <RTC_IRQInterruptConfig+0x128>
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db50      	blt.n	80021b8 <RTC_IRQInterruptConfig+0x128>
			/* configure ISER3 */
			*NVIC_ISER3 |= (1 << (IRQNumber % 32));
 8002116:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <RTC_IRQInterruptConfig+0x140>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	f002 021f 	and.w	r2, r2, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	4611      	mov	r1, r2
 8002128:	4a29      	ldr	r2, [pc, #164]	@ (80021d0 <RTC_IRQInterruptConfig+0x140>)
 800212a:	430b      	orrs	r3, r1
 800212c:	6013      	str	r3, [r2, #0]
		}

	}


}
 800212e:	e043      	b.n	80021b8 <RTC_IRQInterruptConfig+0x128>
		if(IRQNumber <= 31){
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	2b1f      	cmp	r3, #31
 8002134:	d809      	bhi.n	800214a <RTC_IRQInterruptConfig+0xba>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8002136:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <RTC_IRQInterruptConfig+0x144>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	4611      	mov	r1, r2
 8002144:	4a23      	ldr	r2, [pc, #140]	@ (80021d4 <RTC_IRQInterruptConfig+0x144>)
 8002146:	430b      	orrs	r3, r1
 8002148:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 32 && IRQNumber < 64){
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b1f      	cmp	r3, #31
 800214e:	d90e      	bls.n	800216e <RTC_IRQInterruptConfig+0xde>
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2b3f      	cmp	r3, #63	@ 0x3f
 8002154:	d80b      	bhi.n	800216e <RTC_IRQInterruptConfig+0xde>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <RTC_IRQInterruptConfig+0x148>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	79fa      	ldrb	r2, [r7, #7]
 800215c:	f002 021f 	and.w	r2, r2, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	4611      	mov	r1, r2
 8002168:	4a1b      	ldr	r2, [pc, #108]	@ (80021d8 <RTC_IRQInterruptConfig+0x148>)
 800216a:	430b      	orrs	r3, r1
 800216c:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 64 && IRQNumber < 96){
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2b3f      	cmp	r3, #63	@ 0x3f
 8002172:	d90e      	bls.n	8002192 <RTC_IRQInterruptConfig+0x102>
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b5f      	cmp	r3, #95	@ 0x5f
 8002178:	d80b      	bhi.n	8002192 <RTC_IRQInterruptConfig+0x102>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 800217a:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <RTC_IRQInterruptConfig+0x14c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	79fa      	ldrb	r2, [r7, #7]
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	4611      	mov	r1, r2
 800218c:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <RTC_IRQInterruptConfig+0x14c>)
 800218e:	430b      	orrs	r3, r1
 8002190:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 96 && IRQNumber < 128){
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	2b5f      	cmp	r3, #95	@ 0x5f
 8002196:	d90f      	bls.n	80021b8 <RTC_IRQInterruptConfig+0x128>
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db0b      	blt.n	80021b8 <RTC_IRQInterruptConfig+0x128>
			*NVIC_ICER3 |= (1 << (IRQNumber % 32));
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <RTC_IRQInterruptConfig+0x150>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	79fa      	ldrb	r2, [r7, #7]
 80021a6:	f002 021f 	and.w	r2, r2, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	4611      	mov	r1, r2
 80021b2:	4a0b      	ldr	r2, [pc, #44]	@ (80021e0 <RTC_IRQInterruptConfig+0x150>)
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000e104 	.word	0xe000e104
 80021cc:	e000e108 	.word	0xe000e108
 80021d0:	e000e10c 	.word	0xe000e10c
 80021d4:	e000e180 	.word	0xe000e180
 80021d8:	e000e184 	.word	0xe000e184
 80021dc:	e000e188 	.word	0xe000e188
 80021e0:	e000e18c 	.word	0xe000e18c

080021e4 <RTC_IRQPriorityConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71bb      	strb	r3, [r7, #6]

	uint8_t iprx = IRQNumber / 4;  			/* ipr reg number offset address */
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;    /* position in iprx reg */
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_position = (8 * iprx_section) + (8 - NO_IPR_BITS_IMPLEMENTED);  //only upper 4 bits are implemented in IPR
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3304      	adds	r3, #4
 800220a:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_position);
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8002214:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	79b9      	ldrb	r1, [r7, #6]
 800221c:	7b7b      	ldrb	r3, [r7, #13]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	4619      	mov	r1, r3
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800222c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]


}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <RTC_WUTIRQHandling>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_WUTIRQHandling(void){
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0

	if(RTC->ISR & (1 << RTC_ISR_WUTF)){
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <RTC_WUTIRQHandling+0x44>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d016      	beq.n	800227e <RTC_WUTIRQHandling+0x3e>
		/* clear WATF flag */
		BackupDomain_Unlock();
 8002250:	f7ff fe5c 	bl	8001f0c <BackupDomain_Unlock>
		RTC ->ISR &= ~(1 << RTC_ISR_WUTF);
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <RTC_WUTIRQHandling+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <RTC_WUTIRQHandling+0x44>)
 800225a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800225e:	60d3      	str	r3, [r2, #12]

		/* clear pending flag */
		if(EXTI->PR & (1 << 22)){
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <RTC_WUTIRQHandling+0x48>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <RTC_WUTIRQHandling+0x38>
			EXTI->PR |= (1 <<22);
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <RTC_WUTIRQHandling+0x48>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <RTC_WUTIRQHandling+0x48>)
 8002272:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002276:	6153      	str	r3, [r2, #20]
		}

		/* application event call back */
		RTC_ApplicationEventCallback(RTC_EV_WUTI);
 8002278:	2001      	movs	r0, #1
 800227a:	f7fe fb19 	bl	80008b0 <RTC_ApplicationEventCallback>
	}
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40002800 	.word	0x40002800
 8002288:	40013c00 	.word	0x40013c00

0800228c <std>:
 800228c:	2300      	movs	r3, #0
 800228e:	b510      	push	{r4, lr}
 8002290:	4604      	mov	r4, r0
 8002292:	e9c0 3300 	strd	r3, r3, [r0]
 8002296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800229a:	6083      	str	r3, [r0, #8]
 800229c:	8181      	strh	r1, [r0, #12]
 800229e:	6643      	str	r3, [r0, #100]	@ 0x64
 80022a0:	81c2      	strh	r2, [r0, #14]
 80022a2:	6183      	str	r3, [r0, #24]
 80022a4:	4619      	mov	r1, r3
 80022a6:	2208      	movs	r2, #8
 80022a8:	305c      	adds	r0, #92	@ 0x5c
 80022aa:	f000 fa1b 	bl	80026e4 <memset>
 80022ae:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <std+0x58>)
 80022b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <std+0x5c>)
 80022b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80022b6:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <std+0x60>)
 80022b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80022ba:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <std+0x64>)
 80022bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <std+0x68>)
 80022c0:	6224      	str	r4, [r4, #32]
 80022c2:	429c      	cmp	r4, r3
 80022c4:	d006      	beq.n	80022d4 <std+0x48>
 80022c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80022ca:	4294      	cmp	r4, r2
 80022cc:	d002      	beq.n	80022d4 <std+0x48>
 80022ce:	33d0      	adds	r3, #208	@ 0xd0
 80022d0:	429c      	cmp	r4, r3
 80022d2:	d105      	bne.n	80022e0 <std+0x54>
 80022d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80022d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022dc:	f000 ba7a 	b.w	80027d4 <__retarget_lock_init_recursive>
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	bf00      	nop
 80022e4:	08002535 	.word	0x08002535
 80022e8:	08002557 	.word	0x08002557
 80022ec:	0800258f 	.word	0x0800258f
 80022f0:	080025b3 	.word	0x080025b3
 80022f4:	20000100 	.word	0x20000100

080022f8 <stdio_exit_handler>:
 80022f8:	4a02      	ldr	r2, [pc, #8]	@ (8002304 <stdio_exit_handler+0xc>)
 80022fa:	4903      	ldr	r1, [pc, #12]	@ (8002308 <stdio_exit_handler+0x10>)
 80022fc:	4803      	ldr	r0, [pc, #12]	@ (800230c <stdio_exit_handler+0x14>)
 80022fe:	f000 b869 	b.w	80023d4 <_fwalk_sglue>
 8002302:	bf00      	nop
 8002304:	20000018 	.word	0x20000018
 8002308:	08003315 	.word	0x08003315
 800230c:	20000028 	.word	0x20000028

08002310 <cleanup_stdio>:
 8002310:	6841      	ldr	r1, [r0, #4]
 8002312:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <cleanup_stdio+0x34>)
 8002314:	4299      	cmp	r1, r3
 8002316:	b510      	push	{r4, lr}
 8002318:	4604      	mov	r4, r0
 800231a:	d001      	beq.n	8002320 <cleanup_stdio+0x10>
 800231c:	f000 fffa 	bl	8003314 <_fflush_r>
 8002320:	68a1      	ldr	r1, [r4, #8]
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <cleanup_stdio+0x38>)
 8002324:	4299      	cmp	r1, r3
 8002326:	d002      	beq.n	800232e <cleanup_stdio+0x1e>
 8002328:	4620      	mov	r0, r4
 800232a:	f000 fff3 	bl	8003314 <_fflush_r>
 800232e:	68e1      	ldr	r1, [r4, #12]
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <cleanup_stdio+0x3c>)
 8002332:	4299      	cmp	r1, r3
 8002334:	d004      	beq.n	8002340 <cleanup_stdio+0x30>
 8002336:	4620      	mov	r0, r4
 8002338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800233c:	f000 bfea 	b.w	8003314 <_fflush_r>
 8002340:	bd10      	pop	{r4, pc}
 8002342:	bf00      	nop
 8002344:	20000100 	.word	0x20000100
 8002348:	20000168 	.word	0x20000168
 800234c:	200001d0 	.word	0x200001d0

08002350 <global_stdio_init.part.0>:
 8002350:	b510      	push	{r4, lr}
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <global_stdio_init.part.0+0x30>)
 8002354:	4c0b      	ldr	r4, [pc, #44]	@ (8002384 <global_stdio_init.part.0+0x34>)
 8002356:	4a0c      	ldr	r2, [pc, #48]	@ (8002388 <global_stdio_init.part.0+0x38>)
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	4620      	mov	r0, r4
 800235c:	2200      	movs	r2, #0
 800235e:	2104      	movs	r1, #4
 8002360:	f7ff ff94 	bl	800228c <std>
 8002364:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002368:	2201      	movs	r2, #1
 800236a:	2109      	movs	r1, #9
 800236c:	f7ff ff8e 	bl	800228c <std>
 8002370:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002374:	2202      	movs	r2, #2
 8002376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800237a:	2112      	movs	r1, #18
 800237c:	f7ff bf86 	b.w	800228c <std>
 8002380:	20000238 	.word	0x20000238
 8002384:	20000100 	.word	0x20000100
 8002388:	080022f9 	.word	0x080022f9

0800238c <__sfp_lock_acquire>:
 800238c:	4801      	ldr	r0, [pc, #4]	@ (8002394 <__sfp_lock_acquire+0x8>)
 800238e:	f000 ba22 	b.w	80027d6 <__retarget_lock_acquire_recursive>
 8002392:	bf00      	nop
 8002394:	20000241 	.word	0x20000241

08002398 <__sfp_lock_release>:
 8002398:	4801      	ldr	r0, [pc, #4]	@ (80023a0 <__sfp_lock_release+0x8>)
 800239a:	f000 ba1d 	b.w	80027d8 <__retarget_lock_release_recursive>
 800239e:	bf00      	nop
 80023a0:	20000241 	.word	0x20000241

080023a4 <__sinit>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4604      	mov	r4, r0
 80023a8:	f7ff fff0 	bl	800238c <__sfp_lock_acquire>
 80023ac:	6a23      	ldr	r3, [r4, #32]
 80023ae:	b11b      	cbz	r3, 80023b8 <__sinit+0x14>
 80023b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023b4:	f7ff bff0 	b.w	8002398 <__sfp_lock_release>
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <__sinit+0x28>)
 80023ba:	6223      	str	r3, [r4, #32]
 80023bc:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <__sinit+0x2c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f5      	bne.n	80023b0 <__sinit+0xc>
 80023c4:	f7ff ffc4 	bl	8002350 <global_stdio_init.part.0>
 80023c8:	e7f2      	b.n	80023b0 <__sinit+0xc>
 80023ca:	bf00      	nop
 80023cc:	08002311 	.word	0x08002311
 80023d0:	20000238 	.word	0x20000238

080023d4 <_fwalk_sglue>:
 80023d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d8:	4607      	mov	r7, r0
 80023da:	4688      	mov	r8, r1
 80023dc:	4614      	mov	r4, r2
 80023de:	2600      	movs	r6, #0
 80023e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023e4:	f1b9 0901 	subs.w	r9, r9, #1
 80023e8:	d505      	bpl.n	80023f6 <_fwalk_sglue+0x22>
 80023ea:	6824      	ldr	r4, [r4, #0]
 80023ec:	2c00      	cmp	r4, #0
 80023ee:	d1f7      	bne.n	80023e0 <_fwalk_sglue+0xc>
 80023f0:	4630      	mov	r0, r6
 80023f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023f6:	89ab      	ldrh	r3, [r5, #12]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d907      	bls.n	800240c <_fwalk_sglue+0x38>
 80023fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002400:	3301      	adds	r3, #1
 8002402:	d003      	beq.n	800240c <_fwalk_sglue+0x38>
 8002404:	4629      	mov	r1, r5
 8002406:	4638      	mov	r0, r7
 8002408:	47c0      	blx	r8
 800240a:	4306      	orrs	r6, r0
 800240c:	3568      	adds	r5, #104	@ 0x68
 800240e:	e7e9      	b.n	80023e4 <_fwalk_sglue+0x10>

08002410 <iprintf>:
 8002410:	b40f      	push	{r0, r1, r2, r3}
 8002412:	b507      	push	{r0, r1, r2, lr}
 8002414:	4906      	ldr	r1, [pc, #24]	@ (8002430 <iprintf+0x20>)
 8002416:	ab04      	add	r3, sp, #16
 8002418:	6808      	ldr	r0, [r1, #0]
 800241a:	f853 2b04 	ldr.w	r2, [r3], #4
 800241e:	6881      	ldr	r1, [r0, #8]
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	f000 fc53 	bl	8002ccc <_vfiprintf_r>
 8002426:	b003      	add	sp, #12
 8002428:	f85d eb04 	ldr.w	lr, [sp], #4
 800242c:	b004      	add	sp, #16
 800242e:	4770      	bx	lr
 8002430:	20000024 	.word	0x20000024

08002434 <_puts_r>:
 8002434:	6a03      	ldr	r3, [r0, #32]
 8002436:	b570      	push	{r4, r5, r6, lr}
 8002438:	6884      	ldr	r4, [r0, #8]
 800243a:	4605      	mov	r5, r0
 800243c:	460e      	mov	r6, r1
 800243e:	b90b      	cbnz	r3, 8002444 <_puts_r+0x10>
 8002440:	f7ff ffb0 	bl	80023a4 <__sinit>
 8002444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002446:	07db      	lsls	r3, r3, #31
 8002448:	d405      	bmi.n	8002456 <_puts_r+0x22>
 800244a:	89a3      	ldrh	r3, [r4, #12]
 800244c:	0598      	lsls	r0, r3, #22
 800244e:	d402      	bmi.n	8002456 <_puts_r+0x22>
 8002450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002452:	f000 f9c0 	bl	80027d6 <__retarget_lock_acquire_recursive>
 8002456:	89a3      	ldrh	r3, [r4, #12]
 8002458:	0719      	lsls	r1, r3, #28
 800245a:	d502      	bpl.n	8002462 <_puts_r+0x2e>
 800245c:	6923      	ldr	r3, [r4, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d135      	bne.n	80024ce <_puts_r+0x9a>
 8002462:	4621      	mov	r1, r4
 8002464:	4628      	mov	r0, r5
 8002466:	f000 f8e7 	bl	8002638 <__swsetup_r>
 800246a:	b380      	cbz	r0, 80024ce <_puts_r+0x9a>
 800246c:	f04f 35ff 	mov.w	r5, #4294967295
 8002470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002472:	07da      	lsls	r2, r3, #31
 8002474:	d405      	bmi.n	8002482 <_puts_r+0x4e>
 8002476:	89a3      	ldrh	r3, [r4, #12]
 8002478:	059b      	lsls	r3, r3, #22
 800247a:	d402      	bmi.n	8002482 <_puts_r+0x4e>
 800247c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800247e:	f000 f9ab 	bl	80027d8 <__retarget_lock_release_recursive>
 8002482:	4628      	mov	r0, r5
 8002484:	bd70      	pop	{r4, r5, r6, pc}
 8002486:	2b00      	cmp	r3, #0
 8002488:	da04      	bge.n	8002494 <_puts_r+0x60>
 800248a:	69a2      	ldr	r2, [r4, #24]
 800248c:	429a      	cmp	r2, r3
 800248e:	dc17      	bgt.n	80024c0 <_puts_r+0x8c>
 8002490:	290a      	cmp	r1, #10
 8002492:	d015      	beq.n	80024c0 <_puts_r+0x8c>
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	6022      	str	r2, [r4, #0]
 800249a:	7019      	strb	r1, [r3, #0]
 800249c:	68a3      	ldr	r3, [r4, #8]
 800249e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024a2:	3b01      	subs	r3, #1
 80024a4:	60a3      	str	r3, [r4, #8]
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d1ed      	bne.n	8002486 <_puts_r+0x52>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da11      	bge.n	80024d2 <_puts_r+0x9e>
 80024ae:	4622      	mov	r2, r4
 80024b0:	210a      	movs	r1, #10
 80024b2:	4628      	mov	r0, r5
 80024b4:	f000 f881 	bl	80025ba <__swbuf_r>
 80024b8:	3001      	adds	r0, #1
 80024ba:	d0d7      	beq.n	800246c <_puts_r+0x38>
 80024bc:	250a      	movs	r5, #10
 80024be:	e7d7      	b.n	8002470 <_puts_r+0x3c>
 80024c0:	4622      	mov	r2, r4
 80024c2:	4628      	mov	r0, r5
 80024c4:	f000 f879 	bl	80025ba <__swbuf_r>
 80024c8:	3001      	adds	r0, #1
 80024ca:	d1e7      	bne.n	800249c <_puts_r+0x68>
 80024cc:	e7ce      	b.n	800246c <_puts_r+0x38>
 80024ce:	3e01      	subs	r6, #1
 80024d0:	e7e4      	b.n	800249c <_puts_r+0x68>
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	6022      	str	r2, [r4, #0]
 80024d8:	220a      	movs	r2, #10
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e7ee      	b.n	80024bc <_puts_r+0x88>
	...

080024e0 <puts>:
 80024e0:	4b02      	ldr	r3, [pc, #8]	@ (80024ec <puts+0xc>)
 80024e2:	4601      	mov	r1, r0
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	f7ff bfa5 	b.w	8002434 <_puts_r>
 80024ea:	bf00      	nop
 80024ec:	20000024 	.word	0x20000024

080024f0 <siprintf>:
 80024f0:	b40e      	push	{r1, r2, r3}
 80024f2:	b510      	push	{r4, lr}
 80024f4:	b09d      	sub	sp, #116	@ 0x74
 80024f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80024f8:	9002      	str	r0, [sp, #8]
 80024fa:	9006      	str	r0, [sp, #24]
 80024fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002500:	480a      	ldr	r0, [pc, #40]	@ (800252c <siprintf+0x3c>)
 8002502:	9107      	str	r1, [sp, #28]
 8002504:	9104      	str	r1, [sp, #16]
 8002506:	490a      	ldr	r1, [pc, #40]	@ (8002530 <siprintf+0x40>)
 8002508:	f853 2b04 	ldr.w	r2, [r3], #4
 800250c:	9105      	str	r1, [sp, #20]
 800250e:	2400      	movs	r4, #0
 8002510:	a902      	add	r1, sp, #8
 8002512:	6800      	ldr	r0, [r0, #0]
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002518:	f000 fab4 	bl	8002a84 <_svfiprintf_r>
 800251c:	9b02      	ldr	r3, [sp, #8]
 800251e:	701c      	strb	r4, [r3, #0]
 8002520:	b01d      	add	sp, #116	@ 0x74
 8002522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002526:	b003      	add	sp, #12
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000024 	.word	0x20000024
 8002530:	ffff0208 	.word	0xffff0208

08002534 <__sread>:
 8002534:	b510      	push	{r4, lr}
 8002536:	460c      	mov	r4, r1
 8002538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800253c:	f000 f8fc 	bl	8002738 <_read_r>
 8002540:	2800      	cmp	r0, #0
 8002542:	bfab      	itete	ge
 8002544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002546:	89a3      	ldrhlt	r3, [r4, #12]
 8002548:	181b      	addge	r3, r3, r0
 800254a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800254e:	bfac      	ite	ge
 8002550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002552:	81a3      	strhlt	r3, [r4, #12]
 8002554:	bd10      	pop	{r4, pc}

08002556 <__swrite>:
 8002556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255a:	461f      	mov	r7, r3
 800255c:	898b      	ldrh	r3, [r1, #12]
 800255e:	05db      	lsls	r3, r3, #23
 8002560:	4605      	mov	r5, r0
 8002562:	460c      	mov	r4, r1
 8002564:	4616      	mov	r6, r2
 8002566:	d505      	bpl.n	8002574 <__swrite+0x1e>
 8002568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800256c:	2302      	movs	r3, #2
 800256e:	2200      	movs	r2, #0
 8002570:	f000 f8d0 	bl	8002714 <_lseek_r>
 8002574:	89a3      	ldrh	r3, [r4, #12]
 8002576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800257a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800257e:	81a3      	strh	r3, [r4, #12]
 8002580:	4632      	mov	r2, r6
 8002582:	463b      	mov	r3, r7
 8002584:	4628      	mov	r0, r5
 8002586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800258a:	f000 b8e7 	b.w	800275c <_write_r>

0800258e <__sseek>:
 800258e:	b510      	push	{r4, lr}
 8002590:	460c      	mov	r4, r1
 8002592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002596:	f000 f8bd 	bl	8002714 <_lseek_r>
 800259a:	1c43      	adds	r3, r0, #1
 800259c:	89a3      	ldrh	r3, [r4, #12]
 800259e:	bf15      	itete	ne
 80025a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80025a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80025a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80025aa:	81a3      	strheq	r3, [r4, #12]
 80025ac:	bf18      	it	ne
 80025ae:	81a3      	strhne	r3, [r4, #12]
 80025b0:	bd10      	pop	{r4, pc}

080025b2 <__sclose>:
 80025b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b6:	f000 b89d 	b.w	80026f4 <_close_r>

080025ba <__swbuf_r>:
 80025ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025bc:	460e      	mov	r6, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	4605      	mov	r5, r0
 80025c2:	b118      	cbz	r0, 80025cc <__swbuf_r+0x12>
 80025c4:	6a03      	ldr	r3, [r0, #32]
 80025c6:	b90b      	cbnz	r3, 80025cc <__swbuf_r+0x12>
 80025c8:	f7ff feec 	bl	80023a4 <__sinit>
 80025cc:	69a3      	ldr	r3, [r4, #24]
 80025ce:	60a3      	str	r3, [r4, #8]
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	071a      	lsls	r2, r3, #28
 80025d4:	d501      	bpl.n	80025da <__swbuf_r+0x20>
 80025d6:	6923      	ldr	r3, [r4, #16]
 80025d8:	b943      	cbnz	r3, 80025ec <__swbuf_r+0x32>
 80025da:	4621      	mov	r1, r4
 80025dc:	4628      	mov	r0, r5
 80025de:	f000 f82b 	bl	8002638 <__swsetup_r>
 80025e2:	b118      	cbz	r0, 80025ec <__swbuf_r+0x32>
 80025e4:	f04f 37ff 	mov.w	r7, #4294967295
 80025e8:	4638      	mov	r0, r7
 80025ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	6922      	ldr	r2, [r4, #16]
 80025f0:	1a98      	subs	r0, r3, r2
 80025f2:	6963      	ldr	r3, [r4, #20]
 80025f4:	b2f6      	uxtb	r6, r6
 80025f6:	4283      	cmp	r3, r0
 80025f8:	4637      	mov	r7, r6
 80025fa:	dc05      	bgt.n	8002608 <__swbuf_r+0x4e>
 80025fc:	4621      	mov	r1, r4
 80025fe:	4628      	mov	r0, r5
 8002600:	f000 fe88 	bl	8003314 <_fflush_r>
 8002604:	2800      	cmp	r0, #0
 8002606:	d1ed      	bne.n	80025e4 <__swbuf_r+0x2a>
 8002608:	68a3      	ldr	r3, [r4, #8]
 800260a:	3b01      	subs	r3, #1
 800260c:	60a3      	str	r3, [r4, #8]
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	6022      	str	r2, [r4, #0]
 8002614:	701e      	strb	r6, [r3, #0]
 8002616:	6962      	ldr	r2, [r4, #20]
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	429a      	cmp	r2, r3
 800261c:	d004      	beq.n	8002628 <__swbuf_r+0x6e>
 800261e:	89a3      	ldrh	r3, [r4, #12]
 8002620:	07db      	lsls	r3, r3, #31
 8002622:	d5e1      	bpl.n	80025e8 <__swbuf_r+0x2e>
 8002624:	2e0a      	cmp	r6, #10
 8002626:	d1df      	bne.n	80025e8 <__swbuf_r+0x2e>
 8002628:	4621      	mov	r1, r4
 800262a:	4628      	mov	r0, r5
 800262c:	f000 fe72 	bl	8003314 <_fflush_r>
 8002630:	2800      	cmp	r0, #0
 8002632:	d0d9      	beq.n	80025e8 <__swbuf_r+0x2e>
 8002634:	e7d6      	b.n	80025e4 <__swbuf_r+0x2a>
	...

08002638 <__swsetup_r>:
 8002638:	b538      	push	{r3, r4, r5, lr}
 800263a:	4b29      	ldr	r3, [pc, #164]	@ (80026e0 <__swsetup_r+0xa8>)
 800263c:	4605      	mov	r5, r0
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	460c      	mov	r4, r1
 8002642:	b118      	cbz	r0, 800264c <__swsetup_r+0x14>
 8002644:	6a03      	ldr	r3, [r0, #32]
 8002646:	b90b      	cbnz	r3, 800264c <__swsetup_r+0x14>
 8002648:	f7ff feac 	bl	80023a4 <__sinit>
 800264c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002650:	0719      	lsls	r1, r3, #28
 8002652:	d422      	bmi.n	800269a <__swsetup_r+0x62>
 8002654:	06da      	lsls	r2, r3, #27
 8002656:	d407      	bmi.n	8002668 <__swsetup_r+0x30>
 8002658:	2209      	movs	r2, #9
 800265a:	602a      	str	r2, [r5, #0]
 800265c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002660:	81a3      	strh	r3, [r4, #12]
 8002662:	f04f 30ff 	mov.w	r0, #4294967295
 8002666:	e033      	b.n	80026d0 <__swsetup_r+0x98>
 8002668:	0758      	lsls	r0, r3, #29
 800266a:	d512      	bpl.n	8002692 <__swsetup_r+0x5a>
 800266c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800266e:	b141      	cbz	r1, 8002682 <__swsetup_r+0x4a>
 8002670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002674:	4299      	cmp	r1, r3
 8002676:	d002      	beq.n	800267e <__swsetup_r+0x46>
 8002678:	4628      	mov	r0, r5
 800267a:	f000 f8af 	bl	80027dc <_free_r>
 800267e:	2300      	movs	r3, #0
 8002680:	6363      	str	r3, [r4, #52]	@ 0x34
 8002682:	89a3      	ldrh	r3, [r4, #12]
 8002684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002688:	81a3      	strh	r3, [r4, #12]
 800268a:	2300      	movs	r3, #0
 800268c:	6063      	str	r3, [r4, #4]
 800268e:	6923      	ldr	r3, [r4, #16]
 8002690:	6023      	str	r3, [r4, #0]
 8002692:	89a3      	ldrh	r3, [r4, #12]
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	81a3      	strh	r3, [r4, #12]
 800269a:	6923      	ldr	r3, [r4, #16]
 800269c:	b94b      	cbnz	r3, 80026b2 <__swsetup_r+0x7a>
 800269e:	89a3      	ldrh	r3, [r4, #12]
 80026a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80026a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a8:	d003      	beq.n	80026b2 <__swsetup_r+0x7a>
 80026aa:	4621      	mov	r1, r4
 80026ac:	4628      	mov	r0, r5
 80026ae:	f000 fe7f 	bl	80033b0 <__smakebuf_r>
 80026b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026b6:	f013 0201 	ands.w	r2, r3, #1
 80026ba:	d00a      	beq.n	80026d2 <__swsetup_r+0x9a>
 80026bc:	2200      	movs	r2, #0
 80026be:	60a2      	str	r2, [r4, #8]
 80026c0:	6962      	ldr	r2, [r4, #20]
 80026c2:	4252      	negs	r2, r2
 80026c4:	61a2      	str	r2, [r4, #24]
 80026c6:	6922      	ldr	r2, [r4, #16]
 80026c8:	b942      	cbnz	r2, 80026dc <__swsetup_r+0xa4>
 80026ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80026ce:	d1c5      	bne.n	800265c <__swsetup_r+0x24>
 80026d0:	bd38      	pop	{r3, r4, r5, pc}
 80026d2:	0799      	lsls	r1, r3, #30
 80026d4:	bf58      	it	pl
 80026d6:	6962      	ldrpl	r2, [r4, #20]
 80026d8:	60a2      	str	r2, [r4, #8]
 80026da:	e7f4      	b.n	80026c6 <__swsetup_r+0x8e>
 80026dc:	2000      	movs	r0, #0
 80026de:	e7f7      	b.n	80026d0 <__swsetup_r+0x98>
 80026e0:	20000024 	.word	0x20000024

080026e4 <memset>:
 80026e4:	4402      	add	r2, r0
 80026e6:	4603      	mov	r3, r0
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d100      	bne.n	80026ee <memset+0xa>
 80026ec:	4770      	bx	lr
 80026ee:	f803 1b01 	strb.w	r1, [r3], #1
 80026f2:	e7f9      	b.n	80026e8 <memset+0x4>

080026f4 <_close_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4d06      	ldr	r5, [pc, #24]	@ (8002710 <_close_r+0x1c>)
 80026f8:	2300      	movs	r3, #0
 80026fa:	4604      	mov	r4, r0
 80026fc:	4608      	mov	r0, r1
 80026fe:	602b      	str	r3, [r5, #0]
 8002700:	f7fe f94b 	bl	800099a <_close>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d102      	bne.n	800270e <_close_r+0x1a>
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	b103      	cbz	r3, 800270e <_close_r+0x1a>
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	bd38      	pop	{r3, r4, r5, pc}
 8002710:	2000023c 	.word	0x2000023c

08002714 <_lseek_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4d07      	ldr	r5, [pc, #28]	@ (8002734 <_lseek_r+0x20>)
 8002718:	4604      	mov	r4, r0
 800271a:	4608      	mov	r0, r1
 800271c:	4611      	mov	r1, r2
 800271e:	2200      	movs	r2, #0
 8002720:	602a      	str	r2, [r5, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	f7fe f95d 	bl	80009e2 <_lseek>
 8002728:	1c43      	adds	r3, r0, #1
 800272a:	d102      	bne.n	8002732 <_lseek_r+0x1e>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	b103      	cbz	r3, 8002732 <_lseek_r+0x1e>
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	2000023c 	.word	0x2000023c

08002738 <_read_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4d07      	ldr	r5, [pc, #28]	@ (8002758 <_read_r+0x20>)
 800273c:	4604      	mov	r4, r0
 800273e:	4608      	mov	r0, r1
 8002740:	4611      	mov	r1, r2
 8002742:	2200      	movs	r2, #0
 8002744:	602a      	str	r2, [r5, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	f7fe f8ee 	bl	8000928 <_read>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_read_r+0x1e>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b103      	cbz	r3, 8002756 <_read_r+0x1e>
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	2000023c 	.word	0x2000023c

0800275c <_write_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	4d07      	ldr	r5, [pc, #28]	@ (800277c <_write_r+0x20>)
 8002760:	4604      	mov	r4, r0
 8002762:	4608      	mov	r0, r1
 8002764:	4611      	mov	r1, r2
 8002766:	2200      	movs	r2, #0
 8002768:	602a      	str	r2, [r5, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	f7fe f8f9 	bl	8000962 <_write>
 8002770:	1c43      	adds	r3, r0, #1
 8002772:	d102      	bne.n	800277a <_write_r+0x1e>
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	b103      	cbz	r3, 800277a <_write_r+0x1e>
 8002778:	6023      	str	r3, [r4, #0]
 800277a:	bd38      	pop	{r3, r4, r5, pc}
 800277c:	2000023c 	.word	0x2000023c

08002780 <__errno>:
 8002780:	4b01      	ldr	r3, [pc, #4]	@ (8002788 <__errno+0x8>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000024 	.word	0x20000024

0800278c <__libc_init_array>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	4d0d      	ldr	r5, [pc, #52]	@ (80027c4 <__libc_init_array+0x38>)
 8002790:	4c0d      	ldr	r4, [pc, #52]	@ (80027c8 <__libc_init_array+0x3c>)
 8002792:	1b64      	subs	r4, r4, r5
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	2600      	movs	r6, #0
 8002798:	42a6      	cmp	r6, r4
 800279a:	d109      	bne.n	80027b0 <__libc_init_array+0x24>
 800279c:	4d0b      	ldr	r5, [pc, #44]	@ (80027cc <__libc_init_array+0x40>)
 800279e:	4c0c      	ldr	r4, [pc, #48]	@ (80027d0 <__libc_init_array+0x44>)
 80027a0:	f000 fed2 	bl	8003548 <_init>
 80027a4:	1b64      	subs	r4, r4, r5
 80027a6:	10a4      	asrs	r4, r4, #2
 80027a8:	2600      	movs	r6, #0
 80027aa:	42a6      	cmp	r6, r4
 80027ac:	d105      	bne.n	80027ba <__libc_init_array+0x2e>
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b4:	4798      	blx	r3
 80027b6:	3601      	adds	r6, #1
 80027b8:	e7ee      	b.n	8002798 <__libc_init_array+0xc>
 80027ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80027be:	4798      	blx	r3
 80027c0:	3601      	adds	r6, #1
 80027c2:	e7f2      	b.n	80027aa <__libc_init_array+0x1e>
 80027c4:	08003640 	.word	0x08003640
 80027c8:	08003640 	.word	0x08003640
 80027cc:	08003640 	.word	0x08003640
 80027d0:	08003644 	.word	0x08003644

080027d4 <__retarget_lock_init_recursive>:
 80027d4:	4770      	bx	lr

080027d6 <__retarget_lock_acquire_recursive>:
 80027d6:	4770      	bx	lr

080027d8 <__retarget_lock_release_recursive>:
 80027d8:	4770      	bx	lr
	...

080027dc <_free_r>:
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4605      	mov	r5, r0
 80027e0:	2900      	cmp	r1, #0
 80027e2:	d041      	beq.n	8002868 <_free_r+0x8c>
 80027e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027e8:	1f0c      	subs	r4, r1, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bfb8      	it	lt
 80027ee:	18e4      	addlt	r4, r4, r3
 80027f0:	f000 f8e0 	bl	80029b4 <__malloc_lock>
 80027f4:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <_free_r+0x90>)
 80027f6:	6813      	ldr	r3, [r2, #0]
 80027f8:	b933      	cbnz	r3, 8002808 <_free_r+0x2c>
 80027fa:	6063      	str	r3, [r4, #4]
 80027fc:	6014      	str	r4, [r2, #0]
 80027fe:	4628      	mov	r0, r5
 8002800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002804:	f000 b8dc 	b.w	80029c0 <__malloc_unlock>
 8002808:	42a3      	cmp	r3, r4
 800280a:	d908      	bls.n	800281e <_free_r+0x42>
 800280c:	6820      	ldr	r0, [r4, #0]
 800280e:	1821      	adds	r1, r4, r0
 8002810:	428b      	cmp	r3, r1
 8002812:	bf01      	itttt	eq
 8002814:	6819      	ldreq	r1, [r3, #0]
 8002816:	685b      	ldreq	r3, [r3, #4]
 8002818:	1809      	addeq	r1, r1, r0
 800281a:	6021      	streq	r1, [r4, #0]
 800281c:	e7ed      	b.n	80027fa <_free_r+0x1e>
 800281e:	461a      	mov	r2, r3
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	b10b      	cbz	r3, 8002828 <_free_r+0x4c>
 8002824:	42a3      	cmp	r3, r4
 8002826:	d9fa      	bls.n	800281e <_free_r+0x42>
 8002828:	6811      	ldr	r1, [r2, #0]
 800282a:	1850      	adds	r0, r2, r1
 800282c:	42a0      	cmp	r0, r4
 800282e:	d10b      	bne.n	8002848 <_free_r+0x6c>
 8002830:	6820      	ldr	r0, [r4, #0]
 8002832:	4401      	add	r1, r0
 8002834:	1850      	adds	r0, r2, r1
 8002836:	4283      	cmp	r3, r0
 8002838:	6011      	str	r1, [r2, #0]
 800283a:	d1e0      	bne.n	80027fe <_free_r+0x22>
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	6053      	str	r3, [r2, #4]
 8002842:	4408      	add	r0, r1
 8002844:	6010      	str	r0, [r2, #0]
 8002846:	e7da      	b.n	80027fe <_free_r+0x22>
 8002848:	d902      	bls.n	8002850 <_free_r+0x74>
 800284a:	230c      	movs	r3, #12
 800284c:	602b      	str	r3, [r5, #0]
 800284e:	e7d6      	b.n	80027fe <_free_r+0x22>
 8002850:	6820      	ldr	r0, [r4, #0]
 8002852:	1821      	adds	r1, r4, r0
 8002854:	428b      	cmp	r3, r1
 8002856:	bf04      	itt	eq
 8002858:	6819      	ldreq	r1, [r3, #0]
 800285a:	685b      	ldreq	r3, [r3, #4]
 800285c:	6063      	str	r3, [r4, #4]
 800285e:	bf04      	itt	eq
 8002860:	1809      	addeq	r1, r1, r0
 8002862:	6021      	streq	r1, [r4, #0]
 8002864:	6054      	str	r4, [r2, #4]
 8002866:	e7ca      	b.n	80027fe <_free_r+0x22>
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	20000248 	.word	0x20000248

08002870 <sbrk_aligned>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	4e0f      	ldr	r6, [pc, #60]	@ (80028b0 <sbrk_aligned+0x40>)
 8002874:	460c      	mov	r4, r1
 8002876:	6831      	ldr	r1, [r6, #0]
 8002878:	4605      	mov	r5, r0
 800287a:	b911      	cbnz	r1, 8002882 <sbrk_aligned+0x12>
 800287c:	f000 fe10 	bl	80034a0 <_sbrk_r>
 8002880:	6030      	str	r0, [r6, #0]
 8002882:	4621      	mov	r1, r4
 8002884:	4628      	mov	r0, r5
 8002886:	f000 fe0b 	bl	80034a0 <_sbrk_r>
 800288a:	1c43      	adds	r3, r0, #1
 800288c:	d103      	bne.n	8002896 <sbrk_aligned+0x26>
 800288e:	f04f 34ff 	mov.w	r4, #4294967295
 8002892:	4620      	mov	r0, r4
 8002894:	bd70      	pop	{r4, r5, r6, pc}
 8002896:	1cc4      	adds	r4, r0, #3
 8002898:	f024 0403 	bic.w	r4, r4, #3
 800289c:	42a0      	cmp	r0, r4
 800289e:	d0f8      	beq.n	8002892 <sbrk_aligned+0x22>
 80028a0:	1a21      	subs	r1, r4, r0
 80028a2:	4628      	mov	r0, r5
 80028a4:	f000 fdfc 	bl	80034a0 <_sbrk_r>
 80028a8:	3001      	adds	r0, #1
 80028aa:	d1f2      	bne.n	8002892 <sbrk_aligned+0x22>
 80028ac:	e7ef      	b.n	800288e <sbrk_aligned+0x1e>
 80028ae:	bf00      	nop
 80028b0:	20000244 	.word	0x20000244

080028b4 <_malloc_r>:
 80028b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028b8:	1ccd      	adds	r5, r1, #3
 80028ba:	f025 0503 	bic.w	r5, r5, #3
 80028be:	3508      	adds	r5, #8
 80028c0:	2d0c      	cmp	r5, #12
 80028c2:	bf38      	it	cc
 80028c4:	250c      	movcc	r5, #12
 80028c6:	2d00      	cmp	r5, #0
 80028c8:	4606      	mov	r6, r0
 80028ca:	db01      	blt.n	80028d0 <_malloc_r+0x1c>
 80028cc:	42a9      	cmp	r1, r5
 80028ce:	d904      	bls.n	80028da <_malloc_r+0x26>
 80028d0:	230c      	movs	r3, #12
 80028d2:	6033      	str	r3, [r6, #0]
 80028d4:	2000      	movs	r0, #0
 80028d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029b0 <_malloc_r+0xfc>
 80028de:	f000 f869 	bl	80029b4 <__malloc_lock>
 80028e2:	f8d8 3000 	ldr.w	r3, [r8]
 80028e6:	461c      	mov	r4, r3
 80028e8:	bb44      	cbnz	r4, 800293c <_malloc_r+0x88>
 80028ea:	4629      	mov	r1, r5
 80028ec:	4630      	mov	r0, r6
 80028ee:	f7ff ffbf 	bl	8002870 <sbrk_aligned>
 80028f2:	1c43      	adds	r3, r0, #1
 80028f4:	4604      	mov	r4, r0
 80028f6:	d158      	bne.n	80029aa <_malloc_r+0xf6>
 80028f8:	f8d8 4000 	ldr.w	r4, [r8]
 80028fc:	4627      	mov	r7, r4
 80028fe:	2f00      	cmp	r7, #0
 8002900:	d143      	bne.n	800298a <_malloc_r+0xd6>
 8002902:	2c00      	cmp	r4, #0
 8002904:	d04b      	beq.n	800299e <_malloc_r+0xea>
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	4639      	mov	r1, r7
 800290a:	4630      	mov	r0, r6
 800290c:	eb04 0903 	add.w	r9, r4, r3
 8002910:	f000 fdc6 	bl	80034a0 <_sbrk_r>
 8002914:	4581      	cmp	r9, r0
 8002916:	d142      	bne.n	800299e <_malloc_r+0xea>
 8002918:	6821      	ldr	r1, [r4, #0]
 800291a:	1a6d      	subs	r5, r5, r1
 800291c:	4629      	mov	r1, r5
 800291e:	4630      	mov	r0, r6
 8002920:	f7ff ffa6 	bl	8002870 <sbrk_aligned>
 8002924:	3001      	adds	r0, #1
 8002926:	d03a      	beq.n	800299e <_malloc_r+0xea>
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	442b      	add	r3, r5
 800292c:	6023      	str	r3, [r4, #0]
 800292e:	f8d8 3000 	ldr.w	r3, [r8]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	bb62      	cbnz	r2, 8002990 <_malloc_r+0xdc>
 8002936:	f8c8 7000 	str.w	r7, [r8]
 800293a:	e00f      	b.n	800295c <_malloc_r+0xa8>
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	1b52      	subs	r2, r2, r5
 8002940:	d420      	bmi.n	8002984 <_malloc_r+0xd0>
 8002942:	2a0b      	cmp	r2, #11
 8002944:	d917      	bls.n	8002976 <_malloc_r+0xc2>
 8002946:	1961      	adds	r1, r4, r5
 8002948:	42a3      	cmp	r3, r4
 800294a:	6025      	str	r5, [r4, #0]
 800294c:	bf18      	it	ne
 800294e:	6059      	strne	r1, [r3, #4]
 8002950:	6863      	ldr	r3, [r4, #4]
 8002952:	bf08      	it	eq
 8002954:	f8c8 1000 	streq.w	r1, [r8]
 8002958:	5162      	str	r2, [r4, r5]
 800295a:	604b      	str	r3, [r1, #4]
 800295c:	4630      	mov	r0, r6
 800295e:	f000 f82f 	bl	80029c0 <__malloc_unlock>
 8002962:	f104 000b 	add.w	r0, r4, #11
 8002966:	1d23      	adds	r3, r4, #4
 8002968:	f020 0007 	bic.w	r0, r0, #7
 800296c:	1ac2      	subs	r2, r0, r3
 800296e:	bf1c      	itt	ne
 8002970:	1a1b      	subne	r3, r3, r0
 8002972:	50a3      	strne	r3, [r4, r2]
 8002974:	e7af      	b.n	80028d6 <_malloc_r+0x22>
 8002976:	6862      	ldr	r2, [r4, #4]
 8002978:	42a3      	cmp	r3, r4
 800297a:	bf0c      	ite	eq
 800297c:	f8c8 2000 	streq.w	r2, [r8]
 8002980:	605a      	strne	r2, [r3, #4]
 8002982:	e7eb      	b.n	800295c <_malloc_r+0xa8>
 8002984:	4623      	mov	r3, r4
 8002986:	6864      	ldr	r4, [r4, #4]
 8002988:	e7ae      	b.n	80028e8 <_malloc_r+0x34>
 800298a:	463c      	mov	r4, r7
 800298c:	687f      	ldr	r7, [r7, #4]
 800298e:	e7b6      	b.n	80028fe <_malloc_r+0x4a>
 8002990:	461a      	mov	r2, r3
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	42a3      	cmp	r3, r4
 8002996:	d1fb      	bne.n	8002990 <_malloc_r+0xdc>
 8002998:	2300      	movs	r3, #0
 800299a:	6053      	str	r3, [r2, #4]
 800299c:	e7de      	b.n	800295c <_malloc_r+0xa8>
 800299e:	230c      	movs	r3, #12
 80029a0:	6033      	str	r3, [r6, #0]
 80029a2:	4630      	mov	r0, r6
 80029a4:	f000 f80c 	bl	80029c0 <__malloc_unlock>
 80029a8:	e794      	b.n	80028d4 <_malloc_r+0x20>
 80029aa:	6005      	str	r5, [r0, #0]
 80029ac:	e7d6      	b.n	800295c <_malloc_r+0xa8>
 80029ae:	bf00      	nop
 80029b0:	20000248 	.word	0x20000248

080029b4 <__malloc_lock>:
 80029b4:	4801      	ldr	r0, [pc, #4]	@ (80029bc <__malloc_lock+0x8>)
 80029b6:	f7ff bf0e 	b.w	80027d6 <__retarget_lock_acquire_recursive>
 80029ba:	bf00      	nop
 80029bc:	20000240 	.word	0x20000240

080029c0 <__malloc_unlock>:
 80029c0:	4801      	ldr	r0, [pc, #4]	@ (80029c8 <__malloc_unlock+0x8>)
 80029c2:	f7ff bf09 	b.w	80027d8 <__retarget_lock_release_recursive>
 80029c6:	bf00      	nop
 80029c8:	20000240 	.word	0x20000240

080029cc <__ssputs_r>:
 80029cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d0:	688e      	ldr	r6, [r1, #8]
 80029d2:	461f      	mov	r7, r3
 80029d4:	42be      	cmp	r6, r7
 80029d6:	680b      	ldr	r3, [r1, #0]
 80029d8:	4682      	mov	sl, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	4690      	mov	r8, r2
 80029de:	d82d      	bhi.n	8002a3c <__ssputs_r+0x70>
 80029e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80029e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80029e8:	d026      	beq.n	8002a38 <__ssputs_r+0x6c>
 80029ea:	6965      	ldr	r5, [r4, #20]
 80029ec:	6909      	ldr	r1, [r1, #16]
 80029ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029f2:	eba3 0901 	sub.w	r9, r3, r1
 80029f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029fa:	1c7b      	adds	r3, r7, #1
 80029fc:	444b      	add	r3, r9
 80029fe:	106d      	asrs	r5, r5, #1
 8002a00:	429d      	cmp	r5, r3
 8002a02:	bf38      	it	cc
 8002a04:	461d      	movcc	r5, r3
 8002a06:	0553      	lsls	r3, r2, #21
 8002a08:	d527      	bpl.n	8002a5a <__ssputs_r+0x8e>
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7ff ff52 	bl	80028b4 <_malloc_r>
 8002a10:	4606      	mov	r6, r0
 8002a12:	b360      	cbz	r0, 8002a6e <__ssputs_r+0xa2>
 8002a14:	6921      	ldr	r1, [r4, #16]
 8002a16:	464a      	mov	r2, r9
 8002a18:	f000 fd52 	bl	80034c0 <memcpy>
 8002a1c:	89a3      	ldrh	r3, [r4, #12]
 8002a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a26:	81a3      	strh	r3, [r4, #12]
 8002a28:	6126      	str	r6, [r4, #16]
 8002a2a:	6165      	str	r5, [r4, #20]
 8002a2c:	444e      	add	r6, r9
 8002a2e:	eba5 0509 	sub.w	r5, r5, r9
 8002a32:	6026      	str	r6, [r4, #0]
 8002a34:	60a5      	str	r5, [r4, #8]
 8002a36:	463e      	mov	r6, r7
 8002a38:	42be      	cmp	r6, r7
 8002a3a:	d900      	bls.n	8002a3e <__ssputs_r+0x72>
 8002a3c:	463e      	mov	r6, r7
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	4632      	mov	r2, r6
 8002a42:	4641      	mov	r1, r8
 8002a44:	f000 fcf0 	bl	8003428 <memmove>
 8002a48:	68a3      	ldr	r3, [r4, #8]
 8002a4a:	1b9b      	subs	r3, r3, r6
 8002a4c:	60a3      	str	r3, [r4, #8]
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	4433      	add	r3, r6
 8002a52:	6023      	str	r3, [r4, #0]
 8002a54:	2000      	movs	r0, #0
 8002a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a5a:	462a      	mov	r2, r5
 8002a5c:	f000 fd3e 	bl	80034dc <_realloc_r>
 8002a60:	4606      	mov	r6, r0
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d1e0      	bne.n	8002a28 <__ssputs_r+0x5c>
 8002a66:	6921      	ldr	r1, [r4, #16]
 8002a68:	4650      	mov	r0, sl
 8002a6a:	f7ff feb7 	bl	80027dc <_free_r>
 8002a6e:	230c      	movs	r3, #12
 8002a70:	f8ca 3000 	str.w	r3, [sl]
 8002a74:	89a3      	ldrh	r3, [r4, #12]
 8002a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a7a:	81a3      	strh	r3, [r4, #12]
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	e7e9      	b.n	8002a56 <__ssputs_r+0x8a>
	...

08002a84 <_svfiprintf_r>:
 8002a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a88:	4698      	mov	r8, r3
 8002a8a:	898b      	ldrh	r3, [r1, #12]
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	b09d      	sub	sp, #116	@ 0x74
 8002a90:	4607      	mov	r7, r0
 8002a92:	460d      	mov	r5, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	d510      	bpl.n	8002aba <_svfiprintf_r+0x36>
 8002a98:	690b      	ldr	r3, [r1, #16]
 8002a9a:	b973      	cbnz	r3, 8002aba <_svfiprintf_r+0x36>
 8002a9c:	2140      	movs	r1, #64	@ 0x40
 8002a9e:	f7ff ff09 	bl	80028b4 <_malloc_r>
 8002aa2:	6028      	str	r0, [r5, #0]
 8002aa4:	6128      	str	r0, [r5, #16]
 8002aa6:	b930      	cbnz	r0, 8002ab6 <_svfiprintf_r+0x32>
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	b01d      	add	sp, #116	@ 0x74
 8002ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab6:	2340      	movs	r3, #64	@ 0x40
 8002ab8:	616b      	str	r3, [r5, #20]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002abe:	2320      	movs	r3, #32
 8002ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ac8:	2330      	movs	r3, #48	@ 0x30
 8002aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002c68 <_svfiprintf_r+0x1e4>
 8002ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ad2:	f04f 0901 	mov.w	r9, #1
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	469a      	mov	sl, r3
 8002ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ade:	b10a      	cbz	r2, 8002ae4 <_svfiprintf_r+0x60>
 8002ae0:	2a25      	cmp	r2, #37	@ 0x25
 8002ae2:	d1f9      	bne.n	8002ad8 <_svfiprintf_r+0x54>
 8002ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8002ae8:	d00b      	beq.n	8002b02 <_svfiprintf_r+0x7e>
 8002aea:	465b      	mov	r3, fp
 8002aec:	4622      	mov	r2, r4
 8002aee:	4629      	mov	r1, r5
 8002af0:	4638      	mov	r0, r7
 8002af2:	f7ff ff6b 	bl	80029cc <__ssputs_r>
 8002af6:	3001      	adds	r0, #1
 8002af8:	f000 80a7 	beq.w	8002c4a <_svfiprintf_r+0x1c6>
 8002afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002afe:	445a      	add	r2, fp
 8002b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b02:	f89a 3000 	ldrb.w	r3, [sl]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 809f 	beq.w	8002c4a <_svfiprintf_r+0x1c6>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b16:	f10a 0a01 	add.w	sl, sl, #1
 8002b1a:	9304      	str	r3, [sp, #16]
 8002b1c:	9307      	str	r3, [sp, #28]
 8002b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b24:	4654      	mov	r4, sl
 8002b26:	2205      	movs	r2, #5
 8002b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b2c:	484e      	ldr	r0, [pc, #312]	@ (8002c68 <_svfiprintf_r+0x1e4>)
 8002b2e:	f7fd fb6f 	bl	8000210 <memchr>
 8002b32:	9a04      	ldr	r2, [sp, #16]
 8002b34:	b9d8      	cbnz	r0, 8002b6e <_svfiprintf_r+0xea>
 8002b36:	06d0      	lsls	r0, r2, #27
 8002b38:	bf44      	itt	mi
 8002b3a:	2320      	movmi	r3, #32
 8002b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b40:	0711      	lsls	r1, r2, #28
 8002b42:	bf44      	itt	mi
 8002b44:	232b      	movmi	r3, #43	@ 0x2b
 8002b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b50:	d015      	beq.n	8002b7e <_svfiprintf_r+0xfa>
 8002b52:	9a07      	ldr	r2, [sp, #28]
 8002b54:	4654      	mov	r4, sl
 8002b56:	2000      	movs	r0, #0
 8002b58:	f04f 0c0a 	mov.w	ip, #10
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b62:	3b30      	subs	r3, #48	@ 0x30
 8002b64:	2b09      	cmp	r3, #9
 8002b66:	d94b      	bls.n	8002c00 <_svfiprintf_r+0x17c>
 8002b68:	b1b0      	cbz	r0, 8002b98 <_svfiprintf_r+0x114>
 8002b6a:	9207      	str	r2, [sp, #28]
 8002b6c:	e014      	b.n	8002b98 <_svfiprintf_r+0x114>
 8002b6e:	eba0 0308 	sub.w	r3, r0, r8
 8002b72:	fa09 f303 	lsl.w	r3, r9, r3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	9304      	str	r3, [sp, #16]
 8002b7a:	46a2      	mov	sl, r4
 8002b7c:	e7d2      	b.n	8002b24 <_svfiprintf_r+0xa0>
 8002b7e:	9b03      	ldr	r3, [sp, #12]
 8002b80:	1d19      	adds	r1, r3, #4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	9103      	str	r1, [sp, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bfbb      	ittet	lt
 8002b8a:	425b      	neglt	r3, r3
 8002b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8002b90:	9307      	strge	r3, [sp, #28]
 8002b92:	9307      	strlt	r3, [sp, #28]
 8002b94:	bfb8      	it	lt
 8002b96:	9204      	strlt	r2, [sp, #16]
 8002b98:	7823      	ldrb	r3, [r4, #0]
 8002b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b9c:	d10a      	bne.n	8002bb4 <_svfiprintf_r+0x130>
 8002b9e:	7863      	ldrb	r3, [r4, #1]
 8002ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ba2:	d132      	bne.n	8002c0a <_svfiprintf_r+0x186>
 8002ba4:	9b03      	ldr	r3, [sp, #12]
 8002ba6:	1d1a      	adds	r2, r3, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	9203      	str	r2, [sp, #12]
 8002bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002bb0:	3402      	adds	r4, #2
 8002bb2:	9305      	str	r3, [sp, #20]
 8002bb4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002c6c <_svfiprintf_r+0x1e8>
 8002bb8:	7821      	ldrb	r1, [r4, #0]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	4650      	mov	r0, sl
 8002bbe:	f7fd fb27 	bl	8000210 <memchr>
 8002bc2:	b138      	cbz	r0, 8002bd4 <_svfiprintf_r+0x150>
 8002bc4:	9b04      	ldr	r3, [sp, #16]
 8002bc6:	eba0 000a 	sub.w	r0, r0, sl
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	4082      	lsls	r2, r0
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	3401      	adds	r4, #1
 8002bd2:	9304      	str	r3, [sp, #16]
 8002bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd8:	4825      	ldr	r0, [pc, #148]	@ (8002c70 <_svfiprintf_r+0x1ec>)
 8002bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002bde:	2206      	movs	r2, #6
 8002be0:	f7fd fb16 	bl	8000210 <memchr>
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d036      	beq.n	8002c56 <_svfiprintf_r+0x1d2>
 8002be8:	4b22      	ldr	r3, [pc, #136]	@ (8002c74 <_svfiprintf_r+0x1f0>)
 8002bea:	bb1b      	cbnz	r3, 8002c34 <_svfiprintf_r+0x1b0>
 8002bec:	9b03      	ldr	r3, [sp, #12]
 8002bee:	3307      	adds	r3, #7
 8002bf0:	f023 0307 	bic.w	r3, r3, #7
 8002bf4:	3308      	adds	r3, #8
 8002bf6:	9303      	str	r3, [sp, #12]
 8002bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bfa:	4433      	add	r3, r6
 8002bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bfe:	e76a      	b.n	8002ad6 <_svfiprintf_r+0x52>
 8002c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c04:	460c      	mov	r4, r1
 8002c06:	2001      	movs	r0, #1
 8002c08:	e7a8      	b.n	8002b5c <_svfiprintf_r+0xd8>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	3401      	adds	r4, #1
 8002c0e:	9305      	str	r3, [sp, #20]
 8002c10:	4619      	mov	r1, r3
 8002c12:	f04f 0c0a 	mov.w	ip, #10
 8002c16:	4620      	mov	r0, r4
 8002c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c1c:	3a30      	subs	r2, #48	@ 0x30
 8002c1e:	2a09      	cmp	r2, #9
 8002c20:	d903      	bls.n	8002c2a <_svfiprintf_r+0x1a6>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0c6      	beq.n	8002bb4 <_svfiprintf_r+0x130>
 8002c26:	9105      	str	r1, [sp, #20]
 8002c28:	e7c4      	b.n	8002bb4 <_svfiprintf_r+0x130>
 8002c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c2e:	4604      	mov	r4, r0
 8002c30:	2301      	movs	r3, #1
 8002c32:	e7f0      	b.n	8002c16 <_svfiprintf_r+0x192>
 8002c34:	ab03      	add	r3, sp, #12
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	462a      	mov	r2, r5
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <_svfiprintf_r+0x1f4>)
 8002c3c:	a904      	add	r1, sp, #16
 8002c3e:	4638      	mov	r0, r7
 8002c40:	f3af 8000 	nop.w
 8002c44:	1c42      	adds	r2, r0, #1
 8002c46:	4606      	mov	r6, r0
 8002c48:	d1d6      	bne.n	8002bf8 <_svfiprintf_r+0x174>
 8002c4a:	89ab      	ldrh	r3, [r5, #12]
 8002c4c:	065b      	lsls	r3, r3, #25
 8002c4e:	f53f af2d 	bmi.w	8002aac <_svfiprintf_r+0x28>
 8002c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c54:	e72c      	b.n	8002ab0 <_svfiprintf_r+0x2c>
 8002c56:	ab03      	add	r3, sp, #12
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	462a      	mov	r2, r5
 8002c5c:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <_svfiprintf_r+0x1f4>)
 8002c5e:	a904      	add	r1, sp, #16
 8002c60:	4638      	mov	r0, r7
 8002c62:	f000 f9b9 	bl	8002fd8 <_printf_i>
 8002c66:	e7ed      	b.n	8002c44 <_svfiprintf_r+0x1c0>
 8002c68:	08003605 	.word	0x08003605
 8002c6c:	0800360b 	.word	0x0800360b
 8002c70:	0800360f 	.word	0x0800360f
 8002c74:	00000000 	.word	0x00000000
 8002c78:	080029cd 	.word	0x080029cd

08002c7c <__sfputc_r>:
 8002c7c:	6893      	ldr	r3, [r2, #8]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	b410      	push	{r4}
 8002c84:	6093      	str	r3, [r2, #8]
 8002c86:	da07      	bge.n	8002c98 <__sfputc_r+0x1c>
 8002c88:	6994      	ldr	r4, [r2, #24]
 8002c8a:	42a3      	cmp	r3, r4
 8002c8c:	db01      	blt.n	8002c92 <__sfputc_r+0x16>
 8002c8e:	290a      	cmp	r1, #10
 8002c90:	d102      	bne.n	8002c98 <__sfputc_r+0x1c>
 8002c92:	bc10      	pop	{r4}
 8002c94:	f7ff bc91 	b.w	80025ba <__swbuf_r>
 8002c98:	6813      	ldr	r3, [r2, #0]
 8002c9a:	1c58      	adds	r0, r3, #1
 8002c9c:	6010      	str	r0, [r2, #0]
 8002c9e:	7019      	strb	r1, [r3, #0]
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	bc10      	pop	{r4}
 8002ca4:	4770      	bx	lr

08002ca6 <__sfputs_r>:
 8002ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca8:	4606      	mov	r6, r0
 8002caa:	460f      	mov	r7, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	18d5      	adds	r5, r2, r3
 8002cb0:	42ac      	cmp	r4, r5
 8002cb2:	d101      	bne.n	8002cb8 <__sfputs_r+0x12>
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	e007      	b.n	8002cc8 <__sfputs_r+0x22>
 8002cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cbc:	463a      	mov	r2, r7
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f7ff ffdc 	bl	8002c7c <__sfputc_r>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d1f3      	bne.n	8002cb0 <__sfputs_r+0xa>
 8002cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ccc <_vfiprintf_r>:
 8002ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	b09d      	sub	sp, #116	@ 0x74
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	4698      	mov	r8, r3
 8002cd8:	4606      	mov	r6, r0
 8002cda:	b118      	cbz	r0, 8002ce4 <_vfiprintf_r+0x18>
 8002cdc:	6a03      	ldr	r3, [r0, #32]
 8002cde:	b90b      	cbnz	r3, 8002ce4 <_vfiprintf_r+0x18>
 8002ce0:	f7ff fb60 	bl	80023a4 <__sinit>
 8002ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ce6:	07d9      	lsls	r1, r3, #31
 8002ce8:	d405      	bmi.n	8002cf6 <_vfiprintf_r+0x2a>
 8002cea:	89ab      	ldrh	r3, [r5, #12]
 8002cec:	059a      	lsls	r2, r3, #22
 8002cee:	d402      	bmi.n	8002cf6 <_vfiprintf_r+0x2a>
 8002cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cf2:	f7ff fd70 	bl	80027d6 <__retarget_lock_acquire_recursive>
 8002cf6:	89ab      	ldrh	r3, [r5, #12]
 8002cf8:	071b      	lsls	r3, r3, #28
 8002cfa:	d501      	bpl.n	8002d00 <_vfiprintf_r+0x34>
 8002cfc:	692b      	ldr	r3, [r5, #16]
 8002cfe:	b99b      	cbnz	r3, 8002d28 <_vfiprintf_r+0x5c>
 8002d00:	4629      	mov	r1, r5
 8002d02:	4630      	mov	r0, r6
 8002d04:	f7ff fc98 	bl	8002638 <__swsetup_r>
 8002d08:	b170      	cbz	r0, 8002d28 <_vfiprintf_r+0x5c>
 8002d0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d0c:	07dc      	lsls	r4, r3, #31
 8002d0e:	d504      	bpl.n	8002d1a <_vfiprintf_r+0x4e>
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	b01d      	add	sp, #116	@ 0x74
 8002d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d1a:	89ab      	ldrh	r3, [r5, #12]
 8002d1c:	0598      	lsls	r0, r3, #22
 8002d1e:	d4f7      	bmi.n	8002d10 <_vfiprintf_r+0x44>
 8002d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d22:	f7ff fd59 	bl	80027d8 <__retarget_lock_release_recursive>
 8002d26:	e7f3      	b.n	8002d10 <_vfiprintf_r+0x44>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d36:	2330      	movs	r3, #48	@ 0x30
 8002d38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002ee8 <_vfiprintf_r+0x21c>
 8002d3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d40:	f04f 0901 	mov.w	r9, #1
 8002d44:	4623      	mov	r3, r4
 8002d46:	469a      	mov	sl, r3
 8002d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d4c:	b10a      	cbz	r2, 8002d52 <_vfiprintf_r+0x86>
 8002d4e:	2a25      	cmp	r2, #37	@ 0x25
 8002d50:	d1f9      	bne.n	8002d46 <_vfiprintf_r+0x7a>
 8002d52:	ebba 0b04 	subs.w	fp, sl, r4
 8002d56:	d00b      	beq.n	8002d70 <_vfiprintf_r+0xa4>
 8002d58:	465b      	mov	r3, fp
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	4630      	mov	r0, r6
 8002d60:	f7ff ffa1 	bl	8002ca6 <__sfputs_r>
 8002d64:	3001      	adds	r0, #1
 8002d66:	f000 80a7 	beq.w	8002eb8 <_vfiprintf_r+0x1ec>
 8002d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d6c:	445a      	add	r2, fp
 8002d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d70:	f89a 3000 	ldrb.w	r3, [sl]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 809f 	beq.w	8002eb8 <_vfiprintf_r+0x1ec>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d84:	f10a 0a01 	add.w	sl, sl, #1
 8002d88:	9304      	str	r3, [sp, #16]
 8002d8a:	9307      	str	r3, [sp, #28]
 8002d8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d90:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d92:	4654      	mov	r4, sl
 8002d94:	2205      	movs	r2, #5
 8002d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d9a:	4853      	ldr	r0, [pc, #332]	@ (8002ee8 <_vfiprintf_r+0x21c>)
 8002d9c:	f7fd fa38 	bl	8000210 <memchr>
 8002da0:	9a04      	ldr	r2, [sp, #16]
 8002da2:	b9d8      	cbnz	r0, 8002ddc <_vfiprintf_r+0x110>
 8002da4:	06d1      	lsls	r1, r2, #27
 8002da6:	bf44      	itt	mi
 8002da8:	2320      	movmi	r3, #32
 8002daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dae:	0713      	lsls	r3, r2, #28
 8002db0:	bf44      	itt	mi
 8002db2:	232b      	movmi	r3, #43	@ 0x2b
 8002db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002db8:	f89a 3000 	ldrb.w	r3, [sl]
 8002dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dbe:	d015      	beq.n	8002dec <_vfiprintf_r+0x120>
 8002dc0:	9a07      	ldr	r2, [sp, #28]
 8002dc2:	4654      	mov	r4, sl
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f04f 0c0a 	mov.w	ip, #10
 8002dca:	4621      	mov	r1, r4
 8002dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dd0:	3b30      	subs	r3, #48	@ 0x30
 8002dd2:	2b09      	cmp	r3, #9
 8002dd4:	d94b      	bls.n	8002e6e <_vfiprintf_r+0x1a2>
 8002dd6:	b1b0      	cbz	r0, 8002e06 <_vfiprintf_r+0x13a>
 8002dd8:	9207      	str	r2, [sp, #28]
 8002dda:	e014      	b.n	8002e06 <_vfiprintf_r+0x13a>
 8002ddc:	eba0 0308 	sub.w	r3, r0, r8
 8002de0:	fa09 f303 	lsl.w	r3, r9, r3
 8002de4:	4313      	orrs	r3, r2
 8002de6:	9304      	str	r3, [sp, #16]
 8002de8:	46a2      	mov	sl, r4
 8002dea:	e7d2      	b.n	8002d92 <_vfiprintf_r+0xc6>
 8002dec:	9b03      	ldr	r3, [sp, #12]
 8002dee:	1d19      	adds	r1, r3, #4
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	9103      	str	r1, [sp, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bfbb      	ittet	lt
 8002df8:	425b      	neglt	r3, r3
 8002dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8002dfe:	9307      	strge	r3, [sp, #28]
 8002e00:	9307      	strlt	r3, [sp, #28]
 8002e02:	bfb8      	it	lt
 8002e04:	9204      	strlt	r2, [sp, #16]
 8002e06:	7823      	ldrb	r3, [r4, #0]
 8002e08:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e0a:	d10a      	bne.n	8002e22 <_vfiprintf_r+0x156>
 8002e0c:	7863      	ldrb	r3, [r4, #1]
 8002e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e10:	d132      	bne.n	8002e78 <_vfiprintf_r+0x1ac>
 8002e12:	9b03      	ldr	r3, [sp, #12]
 8002e14:	1d1a      	adds	r2, r3, #4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	9203      	str	r2, [sp, #12]
 8002e1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e1e:	3402      	adds	r4, #2
 8002e20:	9305      	str	r3, [sp, #20]
 8002e22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002eec <_vfiprintf_r+0x220>
 8002e26:	7821      	ldrb	r1, [r4, #0]
 8002e28:	2203      	movs	r2, #3
 8002e2a:	4650      	mov	r0, sl
 8002e2c:	f7fd f9f0 	bl	8000210 <memchr>
 8002e30:	b138      	cbz	r0, 8002e42 <_vfiprintf_r+0x176>
 8002e32:	9b04      	ldr	r3, [sp, #16]
 8002e34:	eba0 000a 	sub.w	r0, r0, sl
 8002e38:	2240      	movs	r2, #64	@ 0x40
 8002e3a:	4082      	lsls	r2, r0
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	3401      	adds	r4, #1
 8002e40:	9304      	str	r3, [sp, #16]
 8002e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e46:	482a      	ldr	r0, [pc, #168]	@ (8002ef0 <_vfiprintf_r+0x224>)
 8002e48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e4c:	2206      	movs	r2, #6
 8002e4e:	f7fd f9df 	bl	8000210 <memchr>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d03f      	beq.n	8002ed6 <_vfiprintf_r+0x20a>
 8002e56:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <_vfiprintf_r+0x228>)
 8002e58:	bb1b      	cbnz	r3, 8002ea2 <_vfiprintf_r+0x1d6>
 8002e5a:	9b03      	ldr	r3, [sp, #12]
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	f023 0307 	bic.w	r3, r3, #7
 8002e62:	3308      	adds	r3, #8
 8002e64:	9303      	str	r3, [sp, #12]
 8002e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e68:	443b      	add	r3, r7
 8002e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e6c:	e76a      	b.n	8002d44 <_vfiprintf_r+0x78>
 8002e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e72:	460c      	mov	r4, r1
 8002e74:	2001      	movs	r0, #1
 8002e76:	e7a8      	b.n	8002dca <_vfiprintf_r+0xfe>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	3401      	adds	r4, #1
 8002e7c:	9305      	str	r3, [sp, #20]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f04f 0c0a 	mov.w	ip, #10
 8002e84:	4620      	mov	r0, r4
 8002e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e8a:	3a30      	subs	r2, #48	@ 0x30
 8002e8c:	2a09      	cmp	r2, #9
 8002e8e:	d903      	bls.n	8002e98 <_vfiprintf_r+0x1cc>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0c6      	beq.n	8002e22 <_vfiprintf_r+0x156>
 8002e94:	9105      	str	r1, [sp, #20]
 8002e96:	e7c4      	b.n	8002e22 <_vfiprintf_r+0x156>
 8002e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e7f0      	b.n	8002e84 <_vfiprintf_r+0x1b8>
 8002ea2:	ab03      	add	r3, sp, #12
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	462a      	mov	r2, r5
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <_vfiprintf_r+0x22c>)
 8002eaa:	a904      	add	r1, sp, #16
 8002eac:	4630      	mov	r0, r6
 8002eae:	f3af 8000 	nop.w
 8002eb2:	4607      	mov	r7, r0
 8002eb4:	1c78      	adds	r0, r7, #1
 8002eb6:	d1d6      	bne.n	8002e66 <_vfiprintf_r+0x19a>
 8002eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002eba:	07d9      	lsls	r1, r3, #31
 8002ebc:	d405      	bmi.n	8002eca <_vfiprintf_r+0x1fe>
 8002ebe:	89ab      	ldrh	r3, [r5, #12]
 8002ec0:	059a      	lsls	r2, r3, #22
 8002ec2:	d402      	bmi.n	8002eca <_vfiprintf_r+0x1fe>
 8002ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ec6:	f7ff fc87 	bl	80027d8 <__retarget_lock_release_recursive>
 8002eca:	89ab      	ldrh	r3, [r5, #12]
 8002ecc:	065b      	lsls	r3, r3, #25
 8002ece:	f53f af1f 	bmi.w	8002d10 <_vfiprintf_r+0x44>
 8002ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ed4:	e71e      	b.n	8002d14 <_vfiprintf_r+0x48>
 8002ed6:	ab03      	add	r3, sp, #12
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	462a      	mov	r2, r5
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <_vfiprintf_r+0x22c>)
 8002ede:	a904      	add	r1, sp, #16
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f000 f879 	bl	8002fd8 <_printf_i>
 8002ee6:	e7e4      	b.n	8002eb2 <_vfiprintf_r+0x1e6>
 8002ee8:	08003605 	.word	0x08003605
 8002eec:	0800360b 	.word	0x0800360b
 8002ef0:	0800360f 	.word	0x0800360f
 8002ef4:	00000000 	.word	0x00000000
 8002ef8:	08002ca7 	.word	0x08002ca7

08002efc <_printf_common>:
 8002efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f00:	4616      	mov	r6, r2
 8002f02:	4698      	mov	r8, r3
 8002f04:	688a      	ldr	r2, [r1, #8]
 8002f06:	690b      	ldr	r3, [r1, #16]
 8002f08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bfb8      	it	lt
 8002f10:	4613      	movlt	r3, r2
 8002f12:	6033      	str	r3, [r6, #0]
 8002f14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f18:	4607      	mov	r7, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	b10a      	cbz	r2, 8002f22 <_printf_common+0x26>
 8002f1e:	3301      	adds	r3, #1
 8002f20:	6033      	str	r3, [r6, #0]
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	0699      	lsls	r1, r3, #26
 8002f26:	bf42      	ittt	mi
 8002f28:	6833      	ldrmi	r3, [r6, #0]
 8002f2a:	3302      	addmi	r3, #2
 8002f2c:	6033      	strmi	r3, [r6, #0]
 8002f2e:	6825      	ldr	r5, [r4, #0]
 8002f30:	f015 0506 	ands.w	r5, r5, #6
 8002f34:	d106      	bne.n	8002f44 <_printf_common+0x48>
 8002f36:	f104 0a19 	add.w	sl, r4, #25
 8002f3a:	68e3      	ldr	r3, [r4, #12]
 8002f3c:	6832      	ldr	r2, [r6, #0]
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	42ab      	cmp	r3, r5
 8002f42:	dc26      	bgt.n	8002f92 <_printf_common+0x96>
 8002f44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	3b00      	subs	r3, #0
 8002f4c:	bf18      	it	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	0692      	lsls	r2, r2, #26
 8002f52:	d42b      	bmi.n	8002fac <_printf_common+0xb0>
 8002f54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f58:	4641      	mov	r1, r8
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	47c8      	blx	r9
 8002f5e:	3001      	adds	r0, #1
 8002f60:	d01e      	beq.n	8002fa0 <_printf_common+0xa4>
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	6922      	ldr	r2, [r4, #16]
 8002f66:	f003 0306 	and.w	r3, r3, #6
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	bf02      	ittt	eq
 8002f6e:	68e5      	ldreq	r5, [r4, #12]
 8002f70:	6833      	ldreq	r3, [r6, #0]
 8002f72:	1aed      	subeq	r5, r5, r3
 8002f74:	68a3      	ldr	r3, [r4, #8]
 8002f76:	bf0c      	ite	eq
 8002f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f7c:	2500      	movne	r5, #0
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	bfc4      	itt	gt
 8002f82:	1a9b      	subgt	r3, r3, r2
 8002f84:	18ed      	addgt	r5, r5, r3
 8002f86:	2600      	movs	r6, #0
 8002f88:	341a      	adds	r4, #26
 8002f8a:	42b5      	cmp	r5, r6
 8002f8c:	d11a      	bne.n	8002fc4 <_printf_common+0xc8>
 8002f8e:	2000      	movs	r0, #0
 8002f90:	e008      	b.n	8002fa4 <_printf_common+0xa8>
 8002f92:	2301      	movs	r3, #1
 8002f94:	4652      	mov	r2, sl
 8002f96:	4641      	mov	r1, r8
 8002f98:	4638      	mov	r0, r7
 8002f9a:	47c8      	blx	r9
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d103      	bne.n	8002fa8 <_printf_common+0xac>
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa8:	3501      	adds	r5, #1
 8002faa:	e7c6      	b.n	8002f3a <_printf_common+0x3e>
 8002fac:	18e1      	adds	r1, r4, r3
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	2030      	movs	r0, #48	@ 0x30
 8002fb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fb6:	4422      	add	r2, r4
 8002fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	e7c7      	b.n	8002f54 <_printf_common+0x58>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	4641      	mov	r1, r8
 8002fca:	4638      	mov	r0, r7
 8002fcc:	47c8      	blx	r9
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d0e6      	beq.n	8002fa0 <_printf_common+0xa4>
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	e7d9      	b.n	8002f8a <_printf_common+0x8e>
	...

08002fd8 <_printf_i>:
 8002fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fdc:	7e0f      	ldrb	r7, [r1, #24]
 8002fde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002fe0:	2f78      	cmp	r7, #120	@ 0x78
 8002fe2:	4691      	mov	r9, r2
 8002fe4:	4680      	mov	r8, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	469a      	mov	sl, r3
 8002fea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fee:	d807      	bhi.n	8003000 <_printf_i+0x28>
 8002ff0:	2f62      	cmp	r7, #98	@ 0x62
 8002ff2:	d80a      	bhi.n	800300a <_printf_i+0x32>
 8002ff4:	2f00      	cmp	r7, #0
 8002ff6:	f000 80d1 	beq.w	800319c <_printf_i+0x1c4>
 8002ffa:	2f58      	cmp	r7, #88	@ 0x58
 8002ffc:	f000 80b8 	beq.w	8003170 <_printf_i+0x198>
 8003000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003008:	e03a      	b.n	8003080 <_printf_i+0xa8>
 800300a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800300e:	2b15      	cmp	r3, #21
 8003010:	d8f6      	bhi.n	8003000 <_printf_i+0x28>
 8003012:	a101      	add	r1, pc, #4	@ (adr r1, 8003018 <_printf_i+0x40>)
 8003014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003018:	08003071 	.word	0x08003071
 800301c:	08003085 	.word	0x08003085
 8003020:	08003001 	.word	0x08003001
 8003024:	08003001 	.word	0x08003001
 8003028:	08003001 	.word	0x08003001
 800302c:	08003001 	.word	0x08003001
 8003030:	08003085 	.word	0x08003085
 8003034:	08003001 	.word	0x08003001
 8003038:	08003001 	.word	0x08003001
 800303c:	08003001 	.word	0x08003001
 8003040:	08003001 	.word	0x08003001
 8003044:	08003183 	.word	0x08003183
 8003048:	080030af 	.word	0x080030af
 800304c:	0800313d 	.word	0x0800313d
 8003050:	08003001 	.word	0x08003001
 8003054:	08003001 	.word	0x08003001
 8003058:	080031a5 	.word	0x080031a5
 800305c:	08003001 	.word	0x08003001
 8003060:	080030af 	.word	0x080030af
 8003064:	08003001 	.word	0x08003001
 8003068:	08003001 	.word	0x08003001
 800306c:	08003145 	.word	0x08003145
 8003070:	6833      	ldr	r3, [r6, #0]
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6032      	str	r2, [r6, #0]
 8003078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800307c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003080:	2301      	movs	r3, #1
 8003082:	e09c      	b.n	80031be <_printf_i+0x1e6>
 8003084:	6833      	ldr	r3, [r6, #0]
 8003086:	6820      	ldr	r0, [r4, #0]
 8003088:	1d19      	adds	r1, r3, #4
 800308a:	6031      	str	r1, [r6, #0]
 800308c:	0606      	lsls	r6, r0, #24
 800308e:	d501      	bpl.n	8003094 <_printf_i+0xbc>
 8003090:	681d      	ldr	r5, [r3, #0]
 8003092:	e003      	b.n	800309c <_printf_i+0xc4>
 8003094:	0645      	lsls	r5, r0, #25
 8003096:	d5fb      	bpl.n	8003090 <_printf_i+0xb8>
 8003098:	f9b3 5000 	ldrsh.w	r5, [r3]
 800309c:	2d00      	cmp	r5, #0
 800309e:	da03      	bge.n	80030a8 <_printf_i+0xd0>
 80030a0:	232d      	movs	r3, #45	@ 0x2d
 80030a2:	426d      	negs	r5, r5
 80030a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030a8:	4858      	ldr	r0, [pc, #352]	@ (800320c <_printf_i+0x234>)
 80030aa:	230a      	movs	r3, #10
 80030ac:	e011      	b.n	80030d2 <_printf_i+0xfa>
 80030ae:	6821      	ldr	r1, [r4, #0]
 80030b0:	6833      	ldr	r3, [r6, #0]
 80030b2:	0608      	lsls	r0, r1, #24
 80030b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80030b8:	d402      	bmi.n	80030c0 <_printf_i+0xe8>
 80030ba:	0649      	lsls	r1, r1, #25
 80030bc:	bf48      	it	mi
 80030be:	b2ad      	uxthmi	r5, r5
 80030c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80030c2:	4852      	ldr	r0, [pc, #328]	@ (800320c <_printf_i+0x234>)
 80030c4:	6033      	str	r3, [r6, #0]
 80030c6:	bf14      	ite	ne
 80030c8:	230a      	movne	r3, #10
 80030ca:	2308      	moveq	r3, #8
 80030cc:	2100      	movs	r1, #0
 80030ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030d2:	6866      	ldr	r6, [r4, #4]
 80030d4:	60a6      	str	r6, [r4, #8]
 80030d6:	2e00      	cmp	r6, #0
 80030d8:	db05      	blt.n	80030e6 <_printf_i+0x10e>
 80030da:	6821      	ldr	r1, [r4, #0]
 80030dc:	432e      	orrs	r6, r5
 80030de:	f021 0104 	bic.w	r1, r1, #4
 80030e2:	6021      	str	r1, [r4, #0]
 80030e4:	d04b      	beq.n	800317e <_printf_i+0x1a6>
 80030e6:	4616      	mov	r6, r2
 80030e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80030ec:	fb03 5711 	mls	r7, r3, r1, r5
 80030f0:	5dc7      	ldrb	r7, [r0, r7]
 80030f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030f6:	462f      	mov	r7, r5
 80030f8:	42bb      	cmp	r3, r7
 80030fa:	460d      	mov	r5, r1
 80030fc:	d9f4      	bls.n	80030e8 <_printf_i+0x110>
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d10b      	bne.n	800311a <_printf_i+0x142>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	07df      	lsls	r7, r3, #31
 8003106:	d508      	bpl.n	800311a <_printf_i+0x142>
 8003108:	6923      	ldr	r3, [r4, #16]
 800310a:	6861      	ldr	r1, [r4, #4]
 800310c:	4299      	cmp	r1, r3
 800310e:	bfde      	ittt	le
 8003110:	2330      	movle	r3, #48	@ 0x30
 8003112:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003116:	f106 36ff 	addle.w	r6, r6, #4294967295
 800311a:	1b92      	subs	r2, r2, r6
 800311c:	6122      	str	r2, [r4, #16]
 800311e:	f8cd a000 	str.w	sl, [sp]
 8003122:	464b      	mov	r3, r9
 8003124:	aa03      	add	r2, sp, #12
 8003126:	4621      	mov	r1, r4
 8003128:	4640      	mov	r0, r8
 800312a:	f7ff fee7 	bl	8002efc <_printf_common>
 800312e:	3001      	adds	r0, #1
 8003130:	d14a      	bne.n	80031c8 <_printf_i+0x1f0>
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	b004      	add	sp, #16
 8003138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	f043 0320 	orr.w	r3, r3, #32
 8003142:	6023      	str	r3, [r4, #0]
 8003144:	4832      	ldr	r0, [pc, #200]	@ (8003210 <_printf_i+0x238>)
 8003146:	2778      	movs	r7, #120	@ 0x78
 8003148:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	6831      	ldr	r1, [r6, #0]
 8003150:	061f      	lsls	r7, r3, #24
 8003152:	f851 5b04 	ldr.w	r5, [r1], #4
 8003156:	d402      	bmi.n	800315e <_printf_i+0x186>
 8003158:	065f      	lsls	r7, r3, #25
 800315a:	bf48      	it	mi
 800315c:	b2ad      	uxthmi	r5, r5
 800315e:	6031      	str	r1, [r6, #0]
 8003160:	07d9      	lsls	r1, r3, #31
 8003162:	bf44      	itt	mi
 8003164:	f043 0320 	orrmi.w	r3, r3, #32
 8003168:	6023      	strmi	r3, [r4, #0]
 800316a:	b11d      	cbz	r5, 8003174 <_printf_i+0x19c>
 800316c:	2310      	movs	r3, #16
 800316e:	e7ad      	b.n	80030cc <_printf_i+0xf4>
 8003170:	4826      	ldr	r0, [pc, #152]	@ (800320c <_printf_i+0x234>)
 8003172:	e7e9      	b.n	8003148 <_printf_i+0x170>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	f023 0320 	bic.w	r3, r3, #32
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	e7f6      	b.n	800316c <_printf_i+0x194>
 800317e:	4616      	mov	r6, r2
 8003180:	e7bd      	b.n	80030fe <_printf_i+0x126>
 8003182:	6833      	ldr	r3, [r6, #0]
 8003184:	6825      	ldr	r5, [r4, #0]
 8003186:	6961      	ldr	r1, [r4, #20]
 8003188:	1d18      	adds	r0, r3, #4
 800318a:	6030      	str	r0, [r6, #0]
 800318c:	062e      	lsls	r6, r5, #24
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	d501      	bpl.n	8003196 <_printf_i+0x1be>
 8003192:	6019      	str	r1, [r3, #0]
 8003194:	e002      	b.n	800319c <_printf_i+0x1c4>
 8003196:	0668      	lsls	r0, r5, #25
 8003198:	d5fb      	bpl.n	8003192 <_printf_i+0x1ba>
 800319a:	8019      	strh	r1, [r3, #0]
 800319c:	2300      	movs	r3, #0
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	4616      	mov	r6, r2
 80031a2:	e7bc      	b.n	800311e <_printf_i+0x146>
 80031a4:	6833      	ldr	r3, [r6, #0]
 80031a6:	1d1a      	adds	r2, r3, #4
 80031a8:	6032      	str	r2, [r6, #0]
 80031aa:	681e      	ldr	r6, [r3, #0]
 80031ac:	6862      	ldr	r2, [r4, #4]
 80031ae:	2100      	movs	r1, #0
 80031b0:	4630      	mov	r0, r6
 80031b2:	f7fd f82d 	bl	8000210 <memchr>
 80031b6:	b108      	cbz	r0, 80031bc <_printf_i+0x1e4>
 80031b8:	1b80      	subs	r0, r0, r6
 80031ba:	6060      	str	r0, [r4, #4]
 80031bc:	6863      	ldr	r3, [r4, #4]
 80031be:	6123      	str	r3, [r4, #16]
 80031c0:	2300      	movs	r3, #0
 80031c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031c6:	e7aa      	b.n	800311e <_printf_i+0x146>
 80031c8:	6923      	ldr	r3, [r4, #16]
 80031ca:	4632      	mov	r2, r6
 80031cc:	4649      	mov	r1, r9
 80031ce:	4640      	mov	r0, r8
 80031d0:	47d0      	blx	sl
 80031d2:	3001      	adds	r0, #1
 80031d4:	d0ad      	beq.n	8003132 <_printf_i+0x15a>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	079b      	lsls	r3, r3, #30
 80031da:	d413      	bmi.n	8003204 <_printf_i+0x22c>
 80031dc:	68e0      	ldr	r0, [r4, #12]
 80031de:	9b03      	ldr	r3, [sp, #12]
 80031e0:	4298      	cmp	r0, r3
 80031e2:	bfb8      	it	lt
 80031e4:	4618      	movlt	r0, r3
 80031e6:	e7a6      	b.n	8003136 <_printf_i+0x15e>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4632      	mov	r2, r6
 80031ec:	4649      	mov	r1, r9
 80031ee:	4640      	mov	r0, r8
 80031f0:	47d0      	blx	sl
 80031f2:	3001      	adds	r0, #1
 80031f4:	d09d      	beq.n	8003132 <_printf_i+0x15a>
 80031f6:	3501      	adds	r5, #1
 80031f8:	68e3      	ldr	r3, [r4, #12]
 80031fa:	9903      	ldr	r1, [sp, #12]
 80031fc:	1a5b      	subs	r3, r3, r1
 80031fe:	42ab      	cmp	r3, r5
 8003200:	dcf2      	bgt.n	80031e8 <_printf_i+0x210>
 8003202:	e7eb      	b.n	80031dc <_printf_i+0x204>
 8003204:	2500      	movs	r5, #0
 8003206:	f104 0619 	add.w	r6, r4, #25
 800320a:	e7f5      	b.n	80031f8 <_printf_i+0x220>
 800320c:	08003616 	.word	0x08003616
 8003210:	08003627 	.word	0x08003627

08003214 <__sflush_r>:
 8003214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	0716      	lsls	r6, r2, #28
 800321c:	4605      	mov	r5, r0
 800321e:	460c      	mov	r4, r1
 8003220:	d454      	bmi.n	80032cc <__sflush_r+0xb8>
 8003222:	684b      	ldr	r3, [r1, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	dc02      	bgt.n	800322e <__sflush_r+0x1a>
 8003228:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	dd48      	ble.n	80032c0 <__sflush_r+0xac>
 800322e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003230:	2e00      	cmp	r6, #0
 8003232:	d045      	beq.n	80032c0 <__sflush_r+0xac>
 8003234:	2300      	movs	r3, #0
 8003236:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800323a:	682f      	ldr	r7, [r5, #0]
 800323c:	6a21      	ldr	r1, [r4, #32]
 800323e:	602b      	str	r3, [r5, #0]
 8003240:	d030      	beq.n	80032a4 <__sflush_r+0x90>
 8003242:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	0759      	lsls	r1, r3, #29
 8003248:	d505      	bpl.n	8003256 <__sflush_r+0x42>
 800324a:	6863      	ldr	r3, [r4, #4]
 800324c:	1ad2      	subs	r2, r2, r3
 800324e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003250:	b10b      	cbz	r3, 8003256 <__sflush_r+0x42>
 8003252:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003254:	1ad2      	subs	r2, r2, r3
 8003256:	2300      	movs	r3, #0
 8003258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800325a:	6a21      	ldr	r1, [r4, #32]
 800325c:	4628      	mov	r0, r5
 800325e:	47b0      	blx	r6
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	d106      	bne.n	8003274 <__sflush_r+0x60>
 8003266:	6829      	ldr	r1, [r5, #0]
 8003268:	291d      	cmp	r1, #29
 800326a:	d82b      	bhi.n	80032c4 <__sflush_r+0xb0>
 800326c:	4a28      	ldr	r2, [pc, #160]	@ (8003310 <__sflush_r+0xfc>)
 800326e:	40ca      	lsrs	r2, r1
 8003270:	07d6      	lsls	r6, r2, #31
 8003272:	d527      	bpl.n	80032c4 <__sflush_r+0xb0>
 8003274:	2200      	movs	r2, #0
 8003276:	6062      	str	r2, [r4, #4]
 8003278:	04d9      	lsls	r1, r3, #19
 800327a:	6922      	ldr	r2, [r4, #16]
 800327c:	6022      	str	r2, [r4, #0]
 800327e:	d504      	bpl.n	800328a <__sflush_r+0x76>
 8003280:	1c42      	adds	r2, r0, #1
 8003282:	d101      	bne.n	8003288 <__sflush_r+0x74>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	b903      	cbnz	r3, 800328a <__sflush_r+0x76>
 8003288:	6560      	str	r0, [r4, #84]	@ 0x54
 800328a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800328c:	602f      	str	r7, [r5, #0]
 800328e:	b1b9      	cbz	r1, 80032c0 <__sflush_r+0xac>
 8003290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003294:	4299      	cmp	r1, r3
 8003296:	d002      	beq.n	800329e <__sflush_r+0x8a>
 8003298:	4628      	mov	r0, r5
 800329a:	f7ff fa9f 	bl	80027dc <_free_r>
 800329e:	2300      	movs	r3, #0
 80032a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80032a2:	e00d      	b.n	80032c0 <__sflush_r+0xac>
 80032a4:	2301      	movs	r3, #1
 80032a6:	4628      	mov	r0, r5
 80032a8:	47b0      	blx	r6
 80032aa:	4602      	mov	r2, r0
 80032ac:	1c50      	adds	r0, r2, #1
 80032ae:	d1c9      	bne.n	8003244 <__sflush_r+0x30>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0c6      	beq.n	8003244 <__sflush_r+0x30>
 80032b6:	2b1d      	cmp	r3, #29
 80032b8:	d001      	beq.n	80032be <__sflush_r+0xaa>
 80032ba:	2b16      	cmp	r3, #22
 80032bc:	d11d      	bne.n	80032fa <__sflush_r+0xe6>
 80032be:	602f      	str	r7, [r5, #0]
 80032c0:	2000      	movs	r0, #0
 80032c2:	e021      	b.n	8003308 <__sflush_r+0xf4>
 80032c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c8:	b21b      	sxth	r3, r3
 80032ca:	e01a      	b.n	8003302 <__sflush_r+0xee>
 80032cc:	690f      	ldr	r7, [r1, #16]
 80032ce:	2f00      	cmp	r7, #0
 80032d0:	d0f6      	beq.n	80032c0 <__sflush_r+0xac>
 80032d2:	0793      	lsls	r3, r2, #30
 80032d4:	680e      	ldr	r6, [r1, #0]
 80032d6:	bf08      	it	eq
 80032d8:	694b      	ldreq	r3, [r1, #20]
 80032da:	600f      	str	r7, [r1, #0]
 80032dc:	bf18      	it	ne
 80032de:	2300      	movne	r3, #0
 80032e0:	1bf6      	subs	r6, r6, r7
 80032e2:	608b      	str	r3, [r1, #8]
 80032e4:	2e00      	cmp	r6, #0
 80032e6:	ddeb      	ble.n	80032c0 <__sflush_r+0xac>
 80032e8:	6a21      	ldr	r1, [r4, #32]
 80032ea:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80032ee:	4633      	mov	r3, r6
 80032f0:	463a      	mov	r2, r7
 80032f2:	4628      	mov	r0, r5
 80032f4:	47e0      	blx	ip
 80032f6:	2800      	cmp	r0, #0
 80032f8:	dc07      	bgt.n	800330a <__sflush_r+0xf6>
 80032fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330a:	4407      	add	r7, r0
 800330c:	1a36      	subs	r6, r6, r0
 800330e:	e7e9      	b.n	80032e4 <__sflush_r+0xd0>
 8003310:	20400001 	.word	0x20400001

08003314 <_fflush_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	690b      	ldr	r3, [r1, #16]
 8003318:	4605      	mov	r5, r0
 800331a:	460c      	mov	r4, r1
 800331c:	b913      	cbnz	r3, 8003324 <_fflush_r+0x10>
 800331e:	2500      	movs	r5, #0
 8003320:	4628      	mov	r0, r5
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	b118      	cbz	r0, 800332e <_fflush_r+0x1a>
 8003326:	6a03      	ldr	r3, [r0, #32]
 8003328:	b90b      	cbnz	r3, 800332e <_fflush_r+0x1a>
 800332a:	f7ff f83b 	bl	80023a4 <__sinit>
 800332e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f3      	beq.n	800331e <_fflush_r+0xa>
 8003336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003338:	07d0      	lsls	r0, r2, #31
 800333a:	d404      	bmi.n	8003346 <_fflush_r+0x32>
 800333c:	0599      	lsls	r1, r3, #22
 800333e:	d402      	bmi.n	8003346 <_fflush_r+0x32>
 8003340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003342:	f7ff fa48 	bl	80027d6 <__retarget_lock_acquire_recursive>
 8003346:	4628      	mov	r0, r5
 8003348:	4621      	mov	r1, r4
 800334a:	f7ff ff63 	bl	8003214 <__sflush_r>
 800334e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003350:	07da      	lsls	r2, r3, #31
 8003352:	4605      	mov	r5, r0
 8003354:	d4e4      	bmi.n	8003320 <_fflush_r+0xc>
 8003356:	89a3      	ldrh	r3, [r4, #12]
 8003358:	059b      	lsls	r3, r3, #22
 800335a:	d4e1      	bmi.n	8003320 <_fflush_r+0xc>
 800335c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800335e:	f7ff fa3b 	bl	80027d8 <__retarget_lock_release_recursive>
 8003362:	e7dd      	b.n	8003320 <_fflush_r+0xc>

08003364 <__swhatbuf_r>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	460c      	mov	r4, r1
 8003368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800336c:	2900      	cmp	r1, #0
 800336e:	b096      	sub	sp, #88	@ 0x58
 8003370:	4615      	mov	r5, r2
 8003372:	461e      	mov	r6, r3
 8003374:	da0d      	bge.n	8003392 <__swhatbuf_r+0x2e>
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800337c:	f04f 0100 	mov.w	r1, #0
 8003380:	bf14      	ite	ne
 8003382:	2340      	movne	r3, #64	@ 0x40
 8003384:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003388:	2000      	movs	r0, #0
 800338a:	6031      	str	r1, [r6, #0]
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	b016      	add	sp, #88	@ 0x58
 8003390:	bd70      	pop	{r4, r5, r6, pc}
 8003392:	466a      	mov	r2, sp
 8003394:	f000 f862 	bl	800345c <_fstat_r>
 8003398:	2800      	cmp	r0, #0
 800339a:	dbec      	blt.n	8003376 <__swhatbuf_r+0x12>
 800339c:	9901      	ldr	r1, [sp, #4]
 800339e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80033a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80033a6:	4259      	negs	r1, r3
 80033a8:	4159      	adcs	r1, r3
 80033aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ae:	e7eb      	b.n	8003388 <__swhatbuf_r+0x24>

080033b0 <__smakebuf_r>:
 80033b0:	898b      	ldrh	r3, [r1, #12]
 80033b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b4:	079d      	lsls	r5, r3, #30
 80033b6:	4606      	mov	r6, r0
 80033b8:	460c      	mov	r4, r1
 80033ba:	d507      	bpl.n	80033cc <__smakebuf_r+0x1c>
 80033bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80033c0:	6023      	str	r3, [r4, #0]
 80033c2:	6123      	str	r3, [r4, #16]
 80033c4:	2301      	movs	r3, #1
 80033c6:	6163      	str	r3, [r4, #20]
 80033c8:	b003      	add	sp, #12
 80033ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033cc:	ab01      	add	r3, sp, #4
 80033ce:	466a      	mov	r2, sp
 80033d0:	f7ff ffc8 	bl	8003364 <__swhatbuf_r>
 80033d4:	9f00      	ldr	r7, [sp, #0]
 80033d6:	4605      	mov	r5, r0
 80033d8:	4639      	mov	r1, r7
 80033da:	4630      	mov	r0, r6
 80033dc:	f7ff fa6a 	bl	80028b4 <_malloc_r>
 80033e0:	b948      	cbnz	r0, 80033f6 <__smakebuf_r+0x46>
 80033e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033e6:	059a      	lsls	r2, r3, #22
 80033e8:	d4ee      	bmi.n	80033c8 <__smakebuf_r+0x18>
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	f043 0302 	orr.w	r3, r3, #2
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	e7e2      	b.n	80033bc <__smakebuf_r+0xc>
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	6020      	str	r0, [r4, #0]
 80033fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033fe:	81a3      	strh	r3, [r4, #12]
 8003400:	9b01      	ldr	r3, [sp, #4]
 8003402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003406:	b15b      	cbz	r3, 8003420 <__smakebuf_r+0x70>
 8003408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800340c:	4630      	mov	r0, r6
 800340e:	f000 f837 	bl	8003480 <_isatty_r>
 8003412:	b128      	cbz	r0, 8003420 <__smakebuf_r+0x70>
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	431d      	orrs	r5, r3
 8003424:	81a5      	strh	r5, [r4, #12]
 8003426:	e7cf      	b.n	80033c8 <__smakebuf_r+0x18>

08003428 <memmove>:
 8003428:	4288      	cmp	r0, r1
 800342a:	b510      	push	{r4, lr}
 800342c:	eb01 0402 	add.w	r4, r1, r2
 8003430:	d902      	bls.n	8003438 <memmove+0x10>
 8003432:	4284      	cmp	r4, r0
 8003434:	4623      	mov	r3, r4
 8003436:	d807      	bhi.n	8003448 <memmove+0x20>
 8003438:	1e43      	subs	r3, r0, #1
 800343a:	42a1      	cmp	r1, r4
 800343c:	d008      	beq.n	8003450 <memmove+0x28>
 800343e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003446:	e7f8      	b.n	800343a <memmove+0x12>
 8003448:	4402      	add	r2, r0
 800344a:	4601      	mov	r1, r0
 800344c:	428a      	cmp	r2, r1
 800344e:	d100      	bne.n	8003452 <memmove+0x2a>
 8003450:	bd10      	pop	{r4, pc}
 8003452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800345a:	e7f7      	b.n	800344c <memmove+0x24>

0800345c <_fstat_r>:
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	4d07      	ldr	r5, [pc, #28]	@ (800347c <_fstat_r+0x20>)
 8003460:	2300      	movs	r3, #0
 8003462:	4604      	mov	r4, r0
 8003464:	4608      	mov	r0, r1
 8003466:	4611      	mov	r1, r2
 8003468:	602b      	str	r3, [r5, #0]
 800346a:	f7fd faa1 	bl	80009b0 <_fstat>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	d102      	bne.n	8003478 <_fstat_r+0x1c>
 8003472:	682b      	ldr	r3, [r5, #0]
 8003474:	b103      	cbz	r3, 8003478 <_fstat_r+0x1c>
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	bd38      	pop	{r3, r4, r5, pc}
 800347a:	bf00      	nop
 800347c:	2000023c 	.word	0x2000023c

08003480 <_isatty_r>:
 8003480:	b538      	push	{r3, r4, r5, lr}
 8003482:	4d06      	ldr	r5, [pc, #24]	@ (800349c <_isatty_r+0x1c>)
 8003484:	2300      	movs	r3, #0
 8003486:	4604      	mov	r4, r0
 8003488:	4608      	mov	r0, r1
 800348a:	602b      	str	r3, [r5, #0]
 800348c:	f7fd fa9f 	bl	80009ce <_isatty>
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d102      	bne.n	800349a <_isatty_r+0x1a>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	b103      	cbz	r3, 800349a <_isatty_r+0x1a>
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	2000023c 	.word	0x2000023c

080034a0 <_sbrk_r>:
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4d06      	ldr	r5, [pc, #24]	@ (80034bc <_sbrk_r+0x1c>)
 80034a4:	2300      	movs	r3, #0
 80034a6:	4604      	mov	r4, r0
 80034a8:	4608      	mov	r0, r1
 80034aa:	602b      	str	r3, [r5, #0]
 80034ac:	f7fd faa6 	bl	80009fc <_sbrk>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d102      	bne.n	80034ba <_sbrk_r+0x1a>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	b103      	cbz	r3, 80034ba <_sbrk_r+0x1a>
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	2000023c 	.word	0x2000023c

080034c0 <memcpy>:
 80034c0:	440a      	add	r2, r1
 80034c2:	4291      	cmp	r1, r2
 80034c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034c8:	d100      	bne.n	80034cc <memcpy+0xc>
 80034ca:	4770      	bx	lr
 80034cc:	b510      	push	{r4, lr}
 80034ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034d6:	4291      	cmp	r1, r2
 80034d8:	d1f9      	bne.n	80034ce <memcpy+0xe>
 80034da:	bd10      	pop	{r4, pc}

080034dc <_realloc_r>:
 80034dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e0:	4607      	mov	r7, r0
 80034e2:	4614      	mov	r4, r2
 80034e4:	460d      	mov	r5, r1
 80034e6:	b921      	cbnz	r1, 80034f2 <_realloc_r+0x16>
 80034e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ec:	4611      	mov	r1, r2
 80034ee:	f7ff b9e1 	b.w	80028b4 <_malloc_r>
 80034f2:	b92a      	cbnz	r2, 8003500 <_realloc_r+0x24>
 80034f4:	f7ff f972 	bl	80027dc <_free_r>
 80034f8:	4625      	mov	r5, r4
 80034fa:	4628      	mov	r0, r5
 80034fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003500:	f000 f81a 	bl	8003538 <_malloc_usable_size_r>
 8003504:	4284      	cmp	r4, r0
 8003506:	4606      	mov	r6, r0
 8003508:	d802      	bhi.n	8003510 <_realloc_r+0x34>
 800350a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800350e:	d8f4      	bhi.n	80034fa <_realloc_r+0x1e>
 8003510:	4621      	mov	r1, r4
 8003512:	4638      	mov	r0, r7
 8003514:	f7ff f9ce 	bl	80028b4 <_malloc_r>
 8003518:	4680      	mov	r8, r0
 800351a:	b908      	cbnz	r0, 8003520 <_realloc_r+0x44>
 800351c:	4645      	mov	r5, r8
 800351e:	e7ec      	b.n	80034fa <_realloc_r+0x1e>
 8003520:	42b4      	cmp	r4, r6
 8003522:	4622      	mov	r2, r4
 8003524:	4629      	mov	r1, r5
 8003526:	bf28      	it	cs
 8003528:	4632      	movcs	r2, r6
 800352a:	f7ff ffc9 	bl	80034c0 <memcpy>
 800352e:	4629      	mov	r1, r5
 8003530:	4638      	mov	r0, r7
 8003532:	f7ff f953 	bl	80027dc <_free_r>
 8003536:	e7f1      	b.n	800351c <_realloc_r+0x40>

08003538 <_malloc_usable_size_r>:
 8003538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353c:	1f18      	subs	r0, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	bfbc      	itt	lt
 8003542:	580b      	ldrlt	r3, [r1, r0]
 8003544:	18c0      	addlt	r0, r0, r3
 8003546:	4770      	bx	lr

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	bf00      	nop
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	bf00      	nop
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr
