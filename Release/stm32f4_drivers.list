
stm32f4_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001f30  08001f30  00002f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ffc  08001ffc  00004078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001ffc  08001ffc  00002ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002004  08002004  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002004  08002004  00003004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002008  08002008  00003008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800200c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000078  08002084  00004078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08002084  00004204  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c5b  00000000  00000000  000040a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007a9  00000000  00000000  00005cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  000064a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019d  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00001ccf  00000000  00000000  00006875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000b7a  00000000  00000000  00008544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000090be  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000f68  00000000  00000000  00009104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001f18 	.word	0x08001f18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08001f18 	.word	0x08001f18

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_Button_Inits>:


/*
 * GPIO-Button INit
 */
void GPIO_Button_Inits(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <GPIO_Button_Inits+0x2c>)
 80002b8:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ba:	230d      	movs	r3, #13
 80002bc:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002be:	2300      	movs	r3, #0
 80002c0:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 80002c2:	2302      	movs	r3, #2
 80002c4:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 80002c6:	2300      	movs	r3, #0
 80002c8:	733b      	strb	r3, [r7, #12]

	GPIO_Init(&GpioButton);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fa49 	bl	8000764 <GPIO_Init>

}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40020800 	.word	0x40020800

080002e0 <delay>:

/*
 * delay
 */
void delay (void){
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
	/* ~200 msec when sys clock is 16 MHZ */
	for(uint32_t i = 0; i < 500000/2; i ++);
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	e002      	b.n	80002f2 <delay+0x12>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <delay+0x28>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d9f8      	bls.n	80002ec <delay+0xc>
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	0003d08f 	.word	0x0003d08f

0800030c <WAIT_ForButtonPress>:

/*
 * WAIT_ForButtonPress
 * Polling button
 */
void WAIT_ForButtonPress (void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_NOT_PRESSED);
 8000310:	bf00      	nop
 8000312:	210d      	movs	r1, #13
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <WAIT_ForButtonPress+0x1c>)
 8000316:	f000 fbdf 	bl	8000ad8 <GPIO_ReadFromInputPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b01      	cmp	r3, #1
 800031e:	d0f8      	beq.n	8000312 <WAIT_ForButtonPress+0x6>

	/* debounce */
	delay();
 8000320:	f7ff ffde 	bl	80002e0 <delay>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40020800 	.word	0x40020800

0800032c <main>:



int main(void){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	/* Initialize the button */
	GPIO_Button_Inits();
 8000330:	f7ff ffbe 	bl	80002b0 <GPIO_Button_Inits>

	/*rtc clk initialization */
	rtcHandle.RTC_Config.Sync_Prescaler = RTC_SYNCPRESCALER_1HZ;
 8000334:	4b25      	ldr	r3, [pc, #148]	@ (80003cc <main+0xa0>)
 8000336:	22ff      	movs	r2, #255	@ 0xff
 8000338:	609a      	str	r2, [r3, #8]
	rtcHandle.RTC_Config.Clock_Source = RTC_CLKSRC_LSE;
 800033a:	4b24      	ldr	r3, [pc, #144]	@ (80003cc <main+0xa0>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
	rtcHandle.RTC_Config.Async_Prescaler = RTC_ASYNCPRESCALER_1HZ;
 8000340:	4b22      	ldr	r3, [pc, #136]	@ (80003cc <main+0xa0>)
 8000342:	227f      	movs	r2, #127	@ 0x7f
 8000344:	605a      	str	r2, [r3, #4]
	rtcHandle.RTC_Config.hour_format = RTC_HOUR_FMT_24;
 8000346:	4b21      	ldr	r3, [pc, #132]	@ (80003cc <main+0xa0>)
 8000348:	2200      	movs	r2, #0
 800034a:	731a      	strb	r2, [r3, #12]

	/* rtc date and time init */
	rtcHandle.RTC_Time.Day = 30;
 800034c:	4b1f      	ldr	r3, [pc, #124]	@ (80003cc <main+0xa0>)
 800034e:	221e      	movs	r2, #30
 8000350:	755a      	strb	r2, [r3, #21]
	rtcHandle.RTC_Time.Month = 8;
 8000352:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <main+0xa0>)
 8000354:	2208      	movs	r2, #8
 8000356:	759a      	strb	r2, [r3, #22]
	rtcHandle.RTC_Time.Year = 25;
 8000358:	4b1c      	ldr	r3, [pc, #112]	@ (80003cc <main+0xa0>)
 800035a:	2219      	movs	r2, #25
 800035c:	75da      	strb	r2, [r3, #23]

	rtcHandle.RTC_Time.Hours = 11;
 800035e:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <main+0xa0>)
 8000360:	220b      	movs	r2, #11
 8000362:	741a      	strb	r2, [r3, #16]
	rtcHandle.RTC_Time.Minutes = 45;
 8000364:	4b19      	ldr	r3, [pc, #100]	@ (80003cc <main+0xa0>)
 8000366:	222d      	movs	r2, #45	@ 0x2d
 8000368:	745a      	strb	r2, [r3, #17]
	rtcHandle.RTC_Time.Seconds = 0;
 800036a:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <main+0xa0>)
 800036c:	2200      	movs	r2, #0
 800036e:	749a      	strb	r2, [r3, #18]
	rtcHandle.RTC_Time.Weekday = 6;
 8000370:	4b16      	ldr	r3, [pc, #88]	@ (80003cc <main+0xa0>)
 8000372:	2206      	movs	r2, #6
 8000374:	751a      	strb	r2, [r3, #20]

	RTC_Init(&rtcHandle);
 8000376:	4815      	ldr	r0, [pc, #84]	@ (80003cc <main+0xa0>)
 8000378:	f000 fc98 	bl	8000cac <RTC_Init>


	while(1){

		/* send command after the button is pressed */
		WAIT_ForButtonPress();
 800037c:	f7ff ffc6 	bl	800030c <WAIT_ForButtonPress>

		/* Read Time and Date */
		RTC_GetTimeDate(&readTimeDate);
 8000380:	4813      	ldr	r0, [pc, #76]	@ (80003d0 <main+0xa4>)
 8000382:	f000 fbbf 	bl	8000b04 <RTC_GetTimeDate>

		printf("Date : %02u : %02u : %02u\n", readTimeDate.Day, readTimeDate.Month, readTimeDate.Year);
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <main+0xa4>)
 8000388:	795b      	ldrb	r3, [r3, #5]
 800038a:	4619      	mov	r1, r3
 800038c:	4b10      	ldr	r3, [pc, #64]	@ (80003d0 <main+0xa4>)
 800038e:	799b      	ldrb	r3, [r3, #6]
 8000390:	461a      	mov	r2, r3
 8000392:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <main+0xa4>)
 8000394:	79db      	ldrb	r3, [r3, #7]
 8000396:	480f      	ldr	r0, [pc, #60]	@ (80003d4 <main+0xa8>)
 8000398:	f000 ff58 	bl	800124c <iprintf>
		printf("Time : %02u : %02u : %02u\n", readTimeDate.Hours, readTimeDate.Minutes, readTimeDate.Seconds);
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <main+0xa4>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4619      	mov	r1, r3
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <main+0xa4>)
 80003a4:	785b      	ldrb	r3, [r3, #1]
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <main+0xa4>)
 80003aa:	789b      	ldrb	r3, [r3, #2]
 80003ac:	480a      	ldr	r0, [pc, #40]	@ (80003d8 <main+0xac>)
 80003ae:	f000 ff4d 	bl	800124c <iprintf>
		printf("Day of the week: %s\n", weekDayStr[readTimeDate.Weekday]);
 80003b2:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <main+0xa4>)
 80003b4:	791b      	ldrb	r3, [r3, #4]
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <main+0xb0>)
 80003ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003be:	4619      	mov	r1, r3
 80003c0:	4807      	ldr	r0, [pc, #28]	@ (80003e0 <main+0xb4>)
 80003c2:	f000 ff43 	bl	800124c <iprintf>
		WAIT_ForButtonPress();
 80003c6:	bf00      	nop
 80003c8:	e7d8      	b.n	800037c <main+0x50>
 80003ca:	bf00      	nop
 80003cc:	2000009c 	.word	0x2000009c
 80003d0:	20000094 	.word	0x20000094
 80003d4:	08001f7c 	.word	0x08001f7c
 80003d8:	08001f98 	.word	0x08001f98
 80003dc:	20000000 	.word	0x20000000
 80003e0:	08001fb4 	.word	0x08001fb4

080003e4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <ITM_SendChar+0x44>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <ITM_SendChar+0x44>)
 80003f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003f8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <ITM_SendChar+0x48>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a0b      	ldr	r2, [pc, #44]	@ (800042c <ITM_SendChar+0x48>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000406:	bf00      	nop
 8000408:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0f8      	beq.n	8000408 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000416:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	e000edfc 	.word	0xe000edfc
 800042c:	e0000e00 	.word	0xe0000e00

08000430 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	e00a      	b.n	8000458 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000442:	f3af 8000 	nop.w
 8000446:	4601      	mov	r1, r0
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	60ba      	str	r2, [r7, #8]
 800044e:	b2ca      	uxtb	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	3301      	adds	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbf0      	blt.n	8000442 <_read+0x12>
  }

  return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b086      	sub	sp, #24
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	e009      	b.n	8000490 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	/* calling ITM trace mode to write into Serial wire viewer */
	ITM_SendChar(*ptr++);
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	60ba      	str	r2, [r7, #8]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ffad 	bl	80003e4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	dbf1      	blt.n	800047c <_write+0x12>
  }
  return len;
 8000498:	687b      	ldr	r3, [r7, #4]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_close>:

int _close(int file)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004c8:	605a      	str	r2, [r3, #4]
  return 0;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <_isatty>:

int _isatty(int file)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
	...

08000504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800050c:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <_sbrk+0x5c>)
 800050e:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <_sbrk+0x60>)
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000518:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <_sbrk+0x64>)
 8000522:	4a12      	ldr	r2, [pc, #72]	@ (800056c <_sbrk+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	429a      	cmp	r2, r3
 8000532:	d207      	bcs.n	8000544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000534:	f000 ff2e 	bl	8001394 <__errno>
 8000538:	4603      	mov	r3, r0
 800053a:	220c      	movs	r2, #12
 800053c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e009      	b.n	8000558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000544:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054a:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <_sbrk+0x64>)
 8000554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20020000 	.word	0x20020000
 8000564:	00000400 	.word	0x00000400
 8000568:	200000b4 	.word	0x200000b4
 800056c:	20000208 	.word	0x20000208

08000570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000570:	480d      	ldr	r0, [pc, #52]	@ (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000572:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000574:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059e:	f000 feff 	bl	80013a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fec3 	bl	800032c <main>

080005a6 <LoopForever>:

LoopForever:
  b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005b4:	0800200c 	.word	0x0800200c
  ldr r2, =_sbss
 80005b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005bc:	20000204 	.word	0x20000204

080005c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC_IRQHandler>
	...

080005c4 <GPIO_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d157      	bne.n	8000686 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a59      	ldr	r2, [pc, #356]	@ (8000740 <GPIO_PeriClockControl+0x17c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <GPIO_PeriClockControl+0x28>
 80005de:	4b59      	ldr	r3, [pc, #356]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a58      	ldr	r2, [pc, #352]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 80005ea:	e0a3      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a56      	ldr	r2, [pc, #344]	@ (8000748 <GPIO_PeriClockControl+0x184>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <GPIO_PeriClockControl+0x3e>
 80005f4:	4b53      	ldr	r3, [pc, #332]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	4a52      	ldr	r2, [pc, #328]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80005fa:	f043 0302 	orr.w	r3, r3, #2
 80005fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000600:	e098      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a51      	ldr	r2, [pc, #324]	@ (800074c <GPIO_PeriClockControl+0x188>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClockControl+0x54>
 800060a:	4b4e      	ldr	r3, [pc, #312]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a4d      	ldr	r2, [pc, #308]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000616:	e08d      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a4d      	ldr	r2, [pc, #308]	@ (8000750 <GPIO_PeriClockControl+0x18c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClockControl+0x6a>
 8000620:	4b48      	ldr	r3, [pc, #288]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a47      	ldr	r2, [pc, #284]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800062c:	e082      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a48      	ldr	r2, [pc, #288]	@ (8000754 <GPIO_PeriClockControl+0x190>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClockControl+0x80>
 8000636:	4b43      	ldr	r3, [pc, #268]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a42      	ldr	r2, [pc, #264]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000642:	e077      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a44      	ldr	r2, [pc, #272]	@ (8000758 <GPIO_PeriClockControl+0x194>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0x96>
 800064c:	4b3d      	ldr	r3, [pc, #244]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000650:	4a3c      	ldr	r2, [pc, #240]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000658:	e06c      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_EN();
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a3f      	ldr	r2, [pc, #252]	@ (800075c <GPIO_PeriClockControl+0x198>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClockControl+0xac>
 8000662:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a37      	ldr	r2, [pc, #220]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800066e:	e061      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a3b      	ldr	r2, [pc, #236]	@ (8000760 <GPIO_PeriClockControl+0x19c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d15d      	bne.n	8000734 <GPIO_PeriClockControl+0x170>
 8000678:	4b32      	ldr	r3, [pc, #200]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a31      	ldr	r2, [pc, #196]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800067e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000684:	e056      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a2d      	ldr	r2, [pc, #180]	@ (8000740 <GPIO_PeriClockControl+0x17c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0xd8>
 800068e:	4b2d      	ldr	r3, [pc, #180]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a2c      	ldr	r2, [pc, #176]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000694:	f023 0301 	bic.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800069a:	e04b      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a2a      	ldr	r2, [pc, #168]	@ (8000748 <GPIO_PeriClockControl+0x184>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0xee>
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a8:	4a26      	ldr	r2, [pc, #152]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006aa:	f023 0302 	bic.w	r3, r3, #2
 80006ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006b0:	e040      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a25      	ldr	r2, [pc, #148]	@ (800074c <GPIO_PeriClockControl+0x188>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClockControl+0x104>
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006c0:	f023 0304 	bic.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c6:	e035      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <GPIO_PeriClockControl+0x18c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <GPIO_PeriClockControl+0x11a>
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006d6:	f023 0308 	bic.w	r3, r3, #8
 80006da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006dc:	e02a      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000754 <GPIO_PeriClockControl+0x190>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <GPIO_PeriClockControl+0x130>
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006ec:	f023 0310 	bic.w	r3, r3, #16
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006f2:	e01f      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <GPIO_PeriClockControl+0x194>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <GPIO_PeriClockControl+0x146>
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000700:	4a10      	ldr	r2, [pc, #64]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000702:	f023 0320 	bic.w	r3, r3, #32
 8000706:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000708:	e014      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a13      	ldr	r2, [pc, #76]	@ (800075c <GPIO_PeriClockControl+0x198>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_PeriClockControl+0x15c>
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800071e:	e009      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <GPIO_PeriClockControl+0x19c>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d105      	bne.n	8000734 <GPIO_PeriClockControl+0x170>
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072c:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800072e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000732:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40020000 	.word	0x40020000
 8000744:	40023800 	.word	0x40023800
 8000748:	40020400 	.word	0x40020400
 800074c:	40020800 	.word	0x40020800
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40021000 	.word	0x40021000
 8000758:	40021400 	.word	0x40021400
 800075c:	40021800 	.word	0x40021800
 8000760:	40021c00 	.word	0x40021c00

08000764 <GPIO_Init>:
 *
 * @return		-
 *
 * @note		-
 ************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

	/* Enable GPIO peripheral Clock */
	GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2101      	movs	r1, #1
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff26 	bl	80005c4 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	/* 1. Configure the mode for the given gpio pin */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	795b      	ldrb	r3, [r3, #5]
 8000780:	2b03      	cmp	r3, #3
 8000782:	d820      	bhi.n	80007c6 <GPIO_Init+0x62>
		/*Normal GPIO configurations */
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	461a      	mov	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //need to clear bit field before sets
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	2103      	movs	r1, #3
 80007a4:	fa01 f303 	lsl.w	r3, r1, r3
 80007a8:	43db      	mvns	r3, r3
 80007aa:	4619      	mov	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	400a      	ands	r2, r1
 80007b2:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6819      	ldr	r1, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	e0c8      	b.n	8000958 <GPIO_Init+0x1f4>
	}
	else{
		/* Interrupt configuration */

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	d117      	bne.n	80007fe <GPIO_Init+0x9a>
			/* 1. configure falling edge FTSR */
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80007ce:	4b47      	ldr	r3, [pc, #284]	@ (80008ec <GPIO_Init+0x188>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	7912      	ldrb	r2, [r2, #4]
 80007d6:	4611      	mov	r1, r2
 80007d8:	2201      	movs	r2, #1
 80007da:	408a      	lsls	r2, r1
 80007dc:	4611      	mov	r1, r2
 80007de:	4a43      	ldr	r2, [pc, #268]	@ (80008ec <GPIO_Init+0x188>)
 80007e0:	430b      	orrs	r3, r1
 80007e2:	60d3      	str	r3, [r2, #12]

			/* clear same bit in RTSR */
			EXTI -> RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80007e4:	4b41      	ldr	r3, [pc, #260]	@ (80008ec <GPIO_Init+0x188>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	7912      	ldrb	r2, [r2, #4]
 80007ec:	4611      	mov	r1, r2
 80007ee:	2201      	movs	r2, #1
 80007f0:	408a      	lsls	r2, r1
 80007f2:	43d2      	mvns	r2, r2
 80007f4:	4611      	mov	r1, r2
 80007f6:	4a3d      	ldr	r2, [pc, #244]	@ (80008ec <GPIO_Init+0x188>)
 80007f8:	400b      	ands	r3, r1
 80007fa:	6093      	str	r3, [r2, #8]
 80007fc:	e035      	b.n	800086a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	795b      	ldrb	r3, [r3, #5]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d117      	bne.n	8000836 <GPIO_Init+0xd2>
			/* 1. configure raising edge RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000806:	4b39      	ldr	r3, [pc, #228]	@ (80008ec <GPIO_Init+0x188>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	7912      	ldrb	r2, [r2, #4]
 800080e:	4611      	mov	r1, r2
 8000810:	2201      	movs	r2, #1
 8000812:	408a      	lsls	r2, r1
 8000814:	4611      	mov	r1, r2
 8000816:	4a35      	ldr	r2, [pc, #212]	@ (80008ec <GPIO_Init+0x188>)
 8000818:	430b      	orrs	r3, r1
 800081a:	6093      	str	r3, [r2, #8]

			/* clear same bit in FTSR */
			EXTI -> FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800081c:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <GPIO_Init+0x188>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	7912      	ldrb	r2, [r2, #4]
 8000824:	4611      	mov	r1, r2
 8000826:	2201      	movs	r2, #1
 8000828:	408a      	lsls	r2, r1
 800082a:	43d2      	mvns	r2, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <GPIO_Init+0x188>)
 8000830:	400b      	ands	r3, r1
 8000832:	60d3      	str	r3, [r2, #12]
 8000834:	e019      	b.n	800086a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795b      	ldrb	r3, [r3, #5]
 800083a:	2b06      	cmp	r3, #6
 800083c:	d115      	bne.n	800086a <GPIO_Init+0x106>
			/* 1. configure both falling and raising edge FTSR, RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <GPIO_Init+0x188>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	7912      	ldrb	r2, [r2, #4]
 8000846:	4611      	mov	r1, r2
 8000848:	2201      	movs	r2, #1
 800084a:	408a      	lsls	r2, r1
 800084c:	4611      	mov	r1, r2
 800084e:	4a27      	ldr	r2, [pc, #156]	@ (80008ec <GPIO_Init+0x188>)
 8000850:	430b      	orrs	r3, r1
 8000852:	6093      	str	r3, [r2, #8]
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <GPIO_Init+0x188>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	7912      	ldrb	r2, [r2, #4]
 800085c:	4611      	mov	r1, r2
 800085e:	2201      	movs	r2, #1
 8000860:	408a      	lsls	r2, r1
 8000862:	4611      	mov	r1, r2
 8000864:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <GPIO_Init+0x188>)
 8000866:	430b      	orrs	r3, r1
 8000868:	60d3      	str	r3, [r2, #12]
		}
		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 4; //selects SYSCFG_EXTIR 0 to 3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4; //selects position in SYSCFG_EXTIR 0 to 3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <GPIO_Init+0x18c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d044      	beq.n	8000910 <GPIO_Init+0x1ac>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <GPIO_Init+0x190>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d02b      	beq.n	80008e8 <GPIO_Init+0x184>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <GPIO_Init+0x194>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d024      	beq.n	80008e4 <GPIO_Init+0x180>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <GPIO_Init+0x198>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d01d      	beq.n	80008e0 <GPIO_Init+0x17c>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <GPIO_Init+0x19c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d016      	beq.n	80008dc <GPIO_Init+0x178>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a14      	ldr	r2, [pc, #80]	@ (8000904 <GPIO_Init+0x1a0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d00f      	beq.n	80008d8 <GPIO_Init+0x174>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <GPIO_Init+0x1a4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d008      	beq.n	80008d4 <GPIO_Init+0x170>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a11      	ldr	r2, [pc, #68]	@ (800090c <GPIO_Init+0x1a8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d101      	bne.n	80008d0 <GPIO_Init+0x16c>
 80008cc:	2307      	movs	r3, #7
 80008ce:	e020      	b.n	8000912 <GPIO_Init+0x1ae>
 80008d0:	2300      	movs	r3, #0
 80008d2:	e01e      	b.n	8000912 <GPIO_Init+0x1ae>
 80008d4:	2306      	movs	r3, #6
 80008d6:	e01c      	b.n	8000912 <GPIO_Init+0x1ae>
 80008d8:	2305      	movs	r3, #5
 80008da:	e01a      	b.n	8000912 <GPIO_Init+0x1ae>
 80008dc:	2304      	movs	r3, #4
 80008de:	e018      	b.n	8000912 <GPIO_Init+0x1ae>
 80008e0:	2303      	movs	r3, #3
 80008e2:	e016      	b.n	8000912 <GPIO_Init+0x1ae>
 80008e4:	2302      	movs	r3, #2
 80008e6:	e014      	b.n	8000912 <GPIO_Init+0x1ae>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e012      	b.n	8000912 <GPIO_Init+0x1ae>
 80008ec:	40013c00 	.word	0x40013c00
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020c00 	.word	0x40020c00
 8000900:	40021000 	.word	0x40021000
 8000904:	40021400 	.word	0x40021400
 8000908:	40021800 	.word	0x40021800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	2300      	movs	r3, #0
 8000912:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000914:	4b6d      	ldr	r3, [pc, #436]	@ (8000acc <GPIO_Init+0x368>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000918:	4a6c      	ldr	r2, [pc, #432]	@ (8000acc <GPIO_Init+0x368>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800091e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG -> EXTICR[temp1] |= (portcode << (4 *temp2));
 8000920:	4a6b      	ldr	r2, [pc, #428]	@ (8000ad0 <GPIO_Init+0x36c>)
 8000922:	7afb      	ldrb	r3, [r7, #11]
 8000924:	3302      	adds	r3, #2
 8000926:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800092a:	7a79      	ldrb	r1, [r7, #9]
 800092c:	7abb      	ldrb	r3, [r7, #10]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	4618      	mov	r0, r3
 8000936:	4966      	ldr	r1, [pc, #408]	@ (8000ad0 <GPIO_Init+0x36c>)
 8000938:	7afb      	ldrb	r3, [r7, #11]
 800093a:	4302      	orrs	r2, r0
 800093c:	3302      	adds	r3, #2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. Enable EXTI interrupt delivery using IMR */
		EXTI -> IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000942:	4b64      	ldr	r3, [pc, #400]	@ (8000ad4 <GPIO_Init+0x370>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	7912      	ldrb	r2, [r2, #4]
 800094a:	4611      	mov	r1, r2
 800094c:	2201      	movs	r2, #1
 800094e:	408a      	lsls	r2, r1
 8000950:	4611      	mov	r1, r2
 8000952:	4a60      	ldr	r2, [pc, #384]	@ (8000ad4 <GPIO_Init+0x370>)
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
	}

	/* 3. Configure the speed */
	temp = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	79db      	ldrb	r3, [r3, #7]
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2103      	movs	r1, #3
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	400a      	ands	r2, r1
 800098a:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6899      	ldr	r1, [r3, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	430a      	orrs	r2, r1
 800099a:	609a      	str	r2, [r3, #8]

	/* 4. Configure the Pull-up / Pull-down */
	temp = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7a1b      	ldrb	r3, [r3, #8]
 80009a4:	461a      	mov	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	791b      	ldrb	r3, [r3, #4]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2103      	movs	r1, #3
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	4619      	mov	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	400a      	ands	r2, r1
 80009ce:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68d9      	ldr	r1, [r3, #12]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	430a      	orrs	r2, r1
 80009de:	60da      	str	r2, [r3, #12]

	/* 5. Configure the output type */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	795b      	ldrb	r3, [r3, #5]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d81f      	bhi.n	8000a28 <GPIO_Init+0x2c4>
		temp = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	799b      	ldrb	r3, [r3, #6]
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	791b      	ldrb	r3, [r3, #4]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	4619      	mov	r1, r3
 8000a08:	2301      	movs	r3, #1
 8000a0a:	408b      	lsls	r3, r1
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	400a      	ands	r2, r1
 8000a16:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6859      	ldr	r1, [r3, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	430a      	orrs	r2, r1
 8000a26:	605a      	str	r2, [r3, #4]
	}

	/* Configure Alternate Function mode */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	795b      	ldrb	r3, [r3, #5]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d149      	bne.n	8000ac4 <GPIO_Init+0x360>

		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	723b      	strb	r3, [r7, #8]

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber <= 7){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	2b07      	cmp	r3, #7
 8000a40:	d820      	bhi.n	8000a84 <GPIO_Init+0x320>
			temp = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7a5b      	ldrb	r3, [r3, #9]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	7a3b      	ldrb	r3, [r7, #8]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRL &= ~(0xf << (4 * temp1));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6a1a      	ldr	r2, [r3, #32]
 8000a5c:	7a3b      	ldrb	r3, [r7, #8]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	210f      	movs	r1, #15
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	4619      	mov	r1, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	400a      	ands	r2, r1
 8000a70:	621a      	str	r2, [r3, #32]
			pGPIOHandle -> pGPIOx ->AFRL |= temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6a19      	ldr	r1, [r3, #32]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
		}
	}
}
 8000a82:	e01f      	b.n	8000ac4 <GPIO_Init+0x360>
			temp = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7a5b      	ldrb	r3, [r3, #9]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	7a3b      	ldrb	r3, [r7, #8]
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a9e:	7a3b      	ldrb	r3, [r7, #8]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	4619      	mov	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	400a      	ands	r2, r1
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40013800 	.word	0x40013800
 8000ad4:	40013c00 	.word	0x40013c00

08000ad8 <GPIO_ReadFromInputPin>:
 *
 * @return		- 0 or 1
 *
 * @note		-
 ************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t) ((pGPIOx -> IDR >> PinNumber) & 0x00000001);  //read pin value
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691a      	ldr	r2, [r3, #16]
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	fa22 f303 	lsr.w	r3, r2, r3
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	73fb      	strb	r3, [r7, #15]
	return value;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
	...

08000b04 <RTC_GetTimeDate>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_GetTimeDate(RTC_Time_t* pRTCTime){
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

	uint32_t temp1 =0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
	uint8_t temp2 = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	72fb      	strb	r3, [r7, #11]

	/* chk BYPass shadow reg */
	if(RTC->CR & (1 << RTC_CR_BYPSHAD)){
 8000b14:	4b64      	ldr	r3, [pc, #400]	@ (8000ca8 <RTC_GetTimeDate+0x1a4>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f003 0320 	and.w	r3, r3, #32
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f040 80be 	bne.w	8000c9e <RTC_GetTimeDate+0x19a>
		/* will implement */
	}
	else{
		/* clear RSF bit in RTC-ISR reg and wait until RSF is set before reading the RTC_SSR, RTC_TR and RTC_DR registers.*/
		RTC ->ISR &= ~ (1 << RTC_ISR_RSF);
 8000b22:	4b61      	ldr	r3, [pc, #388]	@ (8000ca8 <RTC_GetTimeDate+0x1a4>)
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	4a60      	ldr	r2, [pc, #384]	@ (8000ca8 <RTC_GetTimeDate+0x1a4>)
 8000b28:	f023 0320 	bic.w	r3, r3, #32
 8000b2c:	60d3      	str	r3, [r2, #12]
		while(!(RTC ->ISR & (1 << RTC_ISR_RSF)));
 8000b2e:	bf00      	nop
 8000b30:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca8 <RTC_GetTimeDate+0x1a4>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f003 0320 	and.w	r3, r3, #32
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <RTC_GetTimeDate+0x2c>

		/*read time */
		temp1 = RTC->TR;
 8000b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca8 <RTC_GetTimeDate+0x1a4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]

		temp2 = (temp1 >> RTC_TR_SU3_0) & 0x7F;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b4a:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Seconds = BCDTODEC(temp2);
 8000b4c:	7afb      	ldrb	r3, [r7, #11]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	7afb      	ldrb	r3, [r7, #11]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	0089      	lsls	r1, r1, #2
 8000b5e:	440b      	add	r3, r1
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4413      	add	r3, r2
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	709a      	strb	r2, [r3, #2]

		temp2 = (temp1 >> RTC_TR_MNU3_0) & 0x7F;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b76:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Minutes = BCDTODEC(temp2);
 8000b78:	7afb      	ldrb	r3, [r7, #11]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	7afb      	ldrb	r3, [r7, #11]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	4619      	mov	r1, r3
 8000b88:	0089      	lsls	r1, r1, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	705a      	strb	r2, [r3, #1]

		temp2 = (temp1 >> RTC_TR_HU3_0) & 0x3F;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	0c1b      	lsrs	r3, r3, #16
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ba2:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Hours = BCDTODEC(temp2);
 8000ba4:	7afb      	ldrb	r3, [r7, #11]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	0089      	lsls	r1, r1, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	701a      	strb	r2, [r3, #0]

		temp2 = (temp1 >> RTC_TR_AM_PM) & 0x01;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	0d9b      	lsrs	r3, r3, #22
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	72fb      	strb	r3, [r7, #11]
		pRTCTime->AMPM = BCDTODEC(temp2);
 8000bd0:	7afb      	ldrb	r3, [r7, #11]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	091b      	lsrs	r3, r3, #4
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	0089      	lsls	r1, r1, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	70da      	strb	r2, [r3, #3]

		/*read Date */
		temp1 = RTC->DR;
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <RTC_GetTimeDate+0x1a4>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]

		temp2 = (temp1 >> RTC_DR_DU3_0) & 0x3F;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000bfe:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Day = BCDTODEC(temp2);
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	7afb      	ldrb	r3, [r7, #11]
 8000c0a:	091b      	lsrs	r3, r3, #4
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4619      	mov	r1, r3
 8000c10:	0089      	lsls	r1, r1, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	715a      	strb	r2, [r3, #5]

		temp2 = (temp1 >> RTC_DR_MU3_0) & 0x1F;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f003 031f 	and.w	r3, r3, #31
 8000c2a:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Month = BCDTODEC(temp2);
 8000c2c:	7afb      	ldrb	r3, [r7, #11]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	7afb      	ldrb	r3, [r7, #11]
 8000c36:	091b      	lsrs	r3, r3, #4
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	0089      	lsls	r1, r1, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4413      	add	r3, r2
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	719a      	strb	r2, [r3, #6]

		temp2 = (temp1 >> RTC_DR_YU3_0) & 0xFF;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	0c1b      	lsrs	r3, r3, #16
 8000c50:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Year = BCDTODEC(temp2);
 8000c52:	7afb      	ldrb	r3, [r7, #11]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	7afb      	ldrb	r3, [r7, #11]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	4619      	mov	r1, r3
 8000c62:	0089      	lsls	r1, r1, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	71da      	strb	r2, [r3, #7]

		temp2 = (temp1 >> RTC_DR_WDU2_0) & 0x07;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	0b5b      	lsrs	r3, r3, #13
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Weekday = BCDTODEC(temp2);
 8000c7e:	7afb      	ldrb	r3, [r7, #11]
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	091b      	lsrs	r3, r3, #4
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	0089      	lsls	r1, r1, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4413      	add	r3, r2
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	711a      	strb	r2, [r3, #4]


	}


}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40002800 	.word	0x40002800

08000cac <RTC_Init>:
 *
 * @return		-none
 *
 * @note		-
 */
void RTC_Init(RTC_Handle_t *pRTCHandle){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

	/*  Enable write to RCC_BDCR, RTC registers */
	/* Need to set DBP(Disable Backup domain write Protection) bit in RCC_PWR reg */
	BackupDomain_Unlock();
 8000cb4:	f000 f946 	bl	8000f44 <BackupDomain_Unlock>

	/*  Optionally Resets the Backup Domain. This clears the clk rtc clk source and RTC regs */
	if(pRTCHandle ->RTC_Config.Reset_BackupDomain_EnorDi){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7b5b      	ldrb	r3, [r3, #13]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00b      	beq.n	8000cd8 <RTC_Init+0x2c>
		RCC->BDCR |= (1 << 16);
 8000cc0:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <RTC_Init+0x78>)
 8000cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cc4:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <RTC_Init+0x78>)
 8000cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cca:	6713      	str	r3, [r2, #112]	@ 0x70
		RCC->BDCR &= ~(1 << 16);
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <RTC_Init+0x78>)
 8000cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <RTC_Init+0x78>)
 8000cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cd6:	6713      	str	r3, [r2, #112]	@ 0x70
	}
	/* RTC_clk configuration */
	RTC_ClkConfig(& pRTCHandle->RTC_Config);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f970 	bl	8000fc0 <RTC_ClkConfig>
		/* will implement later*/
	}
#endif

	/*Disable RTC write protection */
	RTC_Unlock();
 8000ce0:	f000 f954 	bl	8000f8c <RTC_Unlock>

	/* Enter rtc initialization mode */
	RTC_EnterCalendrInitMode();
 8000ce4:	f000 f822 	bl	8000d2c <RTC_EnterCalendrInitMode>
	/* program prescalers */
	/* Prescalers (Async in PREDIV_A [22:16], Sync in PREDIV_S [14:0]) */
	/* Note: First pgm the sync prescaler then async prescaler */
	RTC ->PRER = (pRTCHandle->RTC_Config.Sync_Prescaler & 0x7FFF);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a0e      	ldr	r2, [pc, #56]	@ (8000d28 <RTC_Init+0x7c>)
 8000cee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cf2:	6113      	str	r3, [r2, #16]
	RTC ->PRER |= ((pRTCHandle->RTC_Config.Async_Prescaler & 0x7F) << 16);
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <RTC_Init+0x7c>)
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000d02:	4909      	ldr	r1, [pc, #36]	@ (8000d28 <RTC_Init+0x7c>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	610b      	str	r3, [r1, #16]


	/* RTC_SetTimeDate */
	RTC_SetTimeDate(pRTCHandle);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 f833 	bl	8000d74 <RTC_SetTimeDate>

	/* exit initialization mode */
	RTC_ExitCalendrInitMode();
 8000d0e:	f000 f823 	bl	8000d58 <RTC_ExitCalendrInitMode>

	/* enable rtc write protection */
	RTC_Lock();
 8000d12:	f000 f949 	bl	8000fa8 <RTC_Lock>

	/* enable backup domain write protection */
	BackupDomain_Lock();
 8000d16:	f000 f92b 	bl	8000f70 <BackupDomain_Lock>


}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40002800 	.word	0x40002800

08000d2c <RTC_EnterCalendrInitMode>:
 * 									Helper Fns
 ************************************************************************************************************/
/***************************************************************************************
 * RTC enter calendar initialization mode
 ******************************************************************************************/
static void RTC_EnterCalendrInitMode(void){
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

	/* Set INIT bit to 1 in the RTC_ISR register to enter initialization mode.*/
	RTC->ISR |= (1 << RTC_ISR_INIT);
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <RTC_EnterCalendrInitMode+0x28>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <RTC_EnterCalendrInitMode+0x28>)
 8000d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3a:	60d3      	str	r3, [r2, #12]
	/* wait util the INITF flag is set */
	while(!(RTC->ISR & (1 << RTC_ISR_INITF)));
 8000d3c:	bf00      	nop
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <RTC_EnterCalendrInitMode+0x28>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f9      	beq.n	8000d3e <RTC_EnterCalendrInitMode+0x12>

}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40002800 	.word	0x40002800

08000d58 <RTC_ExitCalendrInitMode>:


/***************************************************************************************
 * RTC enter calendar initialization mode
 ******************************************************************************************/
static void RTC_ExitCalendrInitMode(void){
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

	/* clear INIT in the RTC_ISR register to exit initialization mode.*/
	RTC->ISR &= ~(1 << RTC_ISR_INIT);
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <RTC_ExitCalendrInitMode+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	4a03      	ldr	r2, [pc, #12]	@ (8000d70 <RTC_ExitCalendrInitMode+0x18>)
 8000d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d66:	60d3      	str	r3, [r2, #12]

}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	40002800 	.word	0x40002800

08000d74 <RTC_SetTimeDate>:


/***************************************************************************************
 * RTC time date initialization
 ******************************************************************************************/
static void RTC_SetTimeDate(RTC_Handle_t *pRTCHandle){
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	/* Load the initial time and date values in the shadow registers (RTC_TR and RTC_DR) */
	uint32_t temp;

	/*Load Seconds, minutes,Hours and format in BCD format*/
	temp =0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Seconds) << RTC_TR_SU3_0);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7c9b      	ldrb	r3, [r3, #18]
 8000d84:	4a6d      	ldr	r2, [pc, #436]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	0118      	lsls	r0, r3, #4
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7c9a      	ldrb	r2, [r3, #18]
 8000d94:	4b69      	ldr	r3, [pc, #420]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000d96:	fba3 1302 	umull	r1, r3, r3, r2
 8000d9a:	08d9      	lsrs	r1, r3, #3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4303      	orrs	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Minutes) << RTC_TR_MNU3_0);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7c5b      	ldrb	r3, [r3, #17]
 8000db6:	4a61      	ldr	r2, [pc, #388]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	0118      	lsls	r0, r3, #4
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7c5a      	ldrb	r2, [r3, #17]
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dcc:	08d9      	lsrs	r1, r3, #3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Hours) << RTC_TR_HU3_0);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7c1b      	ldrb	r3, [r3, #16]
 8000de8:	4a54      	ldr	r2, [pc, #336]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	0118      	lsls	r0, r3, #4
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7c1a      	ldrb	r2, [r3, #16]
 8000df8:	4b50      	ldr	r3, [pc, #320]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8000dfe:	08d9      	lsrs	r1, r3, #3
 8000e00:	460b      	mov	r3, r1
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4303      	orrs	r3, r0
 8000e0e:	041b      	lsls	r3, r3, #16
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.AMPM) << RTC_TR_AM_PM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7cdb      	ldrb	r3, [r3, #19]
 8000e1a:	4a48      	ldr	r2, [pc, #288]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	0118      	lsls	r0, r3, #4
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7cda      	ldrb	r2, [r3, #19]
 8000e2a:	4b44      	ldr	r3, [pc, #272]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e30:	08d9      	lsrs	r1, r3, #3
 8000e32:	460b      	mov	r3, r1
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	440b      	add	r3, r1
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4303      	orrs	r3, r0
 8000e40:	059b      	lsls	r3, r3, #22
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

	RTC->TR = temp;
 8000e48:	4a3d      	ldr	r2, [pc, #244]	@ (8000f40 <RTC_SetTimeDate+0x1cc>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6013      	str	r3, [r2, #0]

	/*Load Date, Month,weekday and year in BCD format*/
	temp =0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Day) << RTC_DR_DU3_0);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7d5b      	ldrb	r3, [r3, #21]
 8000e56:	4a39      	ldr	r2, [pc, #228]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	0118      	lsls	r0, r3, #4
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7d5a      	ldrb	r2, [r3, #21]
 8000e66:	4b35      	ldr	r3, [pc, #212]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000e68:	fba3 1302 	umull	r1, r3, r3, r2
 8000e6c:	08d9      	lsrs	r1, r3, #3
 8000e6e:	460b      	mov	r3, r1
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4303      	orrs	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Month) << RTC_DR_MU3_0);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7d9b      	ldrb	r3, [r3, #22]
 8000e88:	4a2c      	ldr	r2, [pc, #176]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	0118      	lsls	r0, r3, #4
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7d9a      	ldrb	r2, [r3, #22]
 8000e98:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e9e:	08d9      	lsrs	r1, r3, #3
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4303      	orrs	r3, r0
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Weekday) << RTC_DR_WDU2_0);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7d1b      	ldrb	r3, [r3, #20]
 8000eba:	4a20      	ldr	r2, [pc, #128]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	0118      	lsls	r0, r3, #4
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7d1a      	ldrb	r2, [r3, #20]
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed0:	08d9      	lsrs	r1, r3, #3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4303      	orrs	r3, r0
 8000ee0:	035b      	lsls	r3, r3, #13
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Year) << RTC_DR_YU3_0);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7ddb      	ldrb	r3, [r3, #23]
 8000eec:	4a13      	ldr	r2, [pc, #76]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	0118      	lsls	r0, r3, #4
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7dda      	ldrb	r2, [r3, #23]
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <RTC_SetTimeDate+0x1c8>)
 8000efe:	fba3 1302 	umull	r1, r3, r3, r2
 8000f02:	08d9      	lsrs	r1, r3, #3
 8000f04:	460b      	mov	r3, r1
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4303      	orrs	r3, r0
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]

	RTC->DR = temp;
 8000f1a:	4a09      	ldr	r2, [pc, #36]	@ (8000f40 <RTC_SetTimeDate+0x1cc>)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6053      	str	r3, [r2, #4]


	/* configure the time format (12 or 24 hours) through the FMT bit in the RTC_CR */
	RTC ->CR |= (pRTCHandle ->RTC_Config.hour_format << RTC_CR_FMT);
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <RTC_SetTimeDate+0x1cc>)
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7b1b      	ldrb	r3, [r3, #12]
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	4905      	ldr	r1, [pc, #20]	@ (8000f40 <RTC_SetTimeDate+0x1cc>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	608b      	str	r3, [r1, #8]


}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	cccccccd 	.word	0xcccccccd
 8000f40:	40002800 	.word	0x40002800

08000f44 <BackupDomain_Unlock>:


/***********************************************************
 * Back up domain unlock
 ***************************************************************/
static void BackupDomain_Unlock(void){
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

	/*Enable PWR peripheral clock*/
	PWR_PCLK_EN();
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <BackupDomain_Unlock+0x24>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <BackupDomain_Unlock+0x24>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Disable Backup Domain write protection DBP*/
	PWR->CR |= (1 << 8);
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <BackupDomain_Unlock+0x28>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <BackupDomain_Unlock+0x28>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f5e:	6013      	str	r3, [r2, #0]

}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000

08000f70 <BackupDomain_Lock>:


/***************************************************************
 * Back up domain unlock
 ****************************************************************/
static void BackupDomain_Lock(void){
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

	/*Enable Backup Domain write protection DBP*/
	PWR->CR &= ~(1 << 8);
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <BackupDomain_Lock+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a03      	ldr	r2, [pc, #12]	@ (8000f88 <BackupDomain_Lock+0x18>)
 8000f7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f7e:	6013      	str	r3, [r2, #0]

}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	40007000 	.word	0x40007000

08000f8c <RTC_Unlock>:
/***********************************************************************************************
 * RTC unlock disables rtc write protection
 * Note: unlock the write protection on all the RTC registers
 * except for RTC_ISR[31:8], RTC_TAFCR, and RTC_BKPxR.
 *****************************************************************************************/
static void RTC_Unlock(void){
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

	/* write 0xCA followed by 0x53 into the RTC WPR reg to disable write protection */
	RTC->WPR = 0xCA;
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <RTC_Unlock+0x18>)
 8000f92:	22ca      	movs	r2, #202	@ 0xca
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8000f96:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <RTC_Unlock+0x18>)
 8000f98:	2253      	movs	r2, #83	@ 0x53
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24


}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40002800 	.word	0x40002800

08000fa8 <RTC_Lock>:

/**********************************************************************************************
 * RTC lock enables rtc write protection
  ********************************************************************************************/
static void RTC_Lock(void){
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

	/* write 0xFF into the RTC WPR reg to enables write protection */
	RTC->WPR = 0xFF;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <RTC_Lock+0x14>)
 8000fae:	22ff      	movs	r2, #255	@ 0xff
 8000fb0:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40002800 	.word	0x40002800

08000fc0 <RTC_ClkConfig>:


/******************************************************************************************************
 * RTC-ClkConfig
 *****************************************************************************************************/
static void RTC_ClkConfig(RTC_Config_t *pRTCConfig){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	/* Enable the selected RTC clock sorce */
	/* Note: The selected clk source must be enabeld and ready before being selected as RTC_CLK source */
	switch (pRTCConfig->Clock_Source){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d030      	beq.n	8001032 <RTC_ClkConfig+0x72>
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	dc43      	bgt.n	800105c <RTC_ClkConfig+0x9c>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d002      	beq.n	8000fde <RTC_ClkConfig+0x1e>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d015      	beq.n	8001008 <RTC_ClkConfig+0x48>
 8000fdc:	e03e      	b.n	800105c <RTC_ClkConfig+0x9c>

		uint32_t temp;
		case RTC_CLKSRC_LSE:
			/* LSEON */
			RCC->BDCR |= (1 << 0);
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <RTC_ClkConfig+0x100>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fe2:	4a37      	ldr	r2, [pc, #220]	@ (80010c0 <RTC_ClkConfig+0x100>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6713      	str	r3, [r2, #112]	@ 0x70

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 8000fea:	4b36      	ldr	r3, [pc, #216]	@ (80010c4 <RTC_ClkConfig+0x104>)
 8000fec:	60fb      	str	r3, [r7, #12]
			while((!(RCC->BDCR & (1 << 1))) && temp--);
 8000fee:	bf00      	nop
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <RTC_ClkConfig+0x100>)
 8000ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d132      	bne.n	8001062 <RTC_ClkConfig+0xa2>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	60fa      	str	r2, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f4      	bne.n	8000ff0 <RTC_ClkConfig+0x30>

			break;
 8001006:	e02c      	b.n	8001062 <RTC_ClkConfig+0xa2>

		case RTC_CLKSRC_LSI:
			/* LSION */
			RCC->CSR |= (1 << 0);
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <RTC_ClkConfig+0x100>)
 800100a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800100c:	4a2c      	ldr	r2, [pc, #176]	@ (80010c0 <RTC_ClkConfig+0x100>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6753      	str	r3, [r2, #116]	@ 0x74

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <RTC_ClkConfig+0x104>)
 8001016:	60fb      	str	r3, [r7, #12]
			while((!(RCC->CSR & (1 << 1))) && temp--);
 8001018:	bf00      	nop
 800101a:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <RTC_ClkConfig+0x100>)
 800101c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11f      	bne.n	8001066 <RTC_ClkConfig+0xa6>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	1e5a      	subs	r2, r3, #1
 800102a:	60fa      	str	r2, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f4      	bne.n	800101a <RTC_ClkConfig+0x5a>

			break;
 8001030:	e019      	b.n	8001066 <RTC_ClkConfig+0xa6>

		case RTC_CLKSRC_HSE_DIV128:
			/* LSION */
			RCC->CR |= (1 << 16);
 8001032:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <RTC_ClkConfig+0x100>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a22      	ldr	r2, [pc, #136]	@ (80010c0 <RTC_ClkConfig+0x100>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800103c:	6013      	str	r3, [r2, #0]

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <RTC_ClkConfig+0x104>)
 8001040:	60fb      	str	r3, [r7, #12]
			while((!(RCC->CR & (1 << 17))) && temp--);
 8001042:	bf00      	nop
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <RTC_ClkConfig+0x100>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10c      	bne.n	800106a <RTC_ClkConfig+0xaa>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	60fa      	str	r2, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f4      	bne.n	8001044 <RTC_ClkConfig+0x84>

			break;
 800105a:	e006      	b.n	800106a <RTC_ClkConfig+0xaa>

		default: BackupDomain_Lock();
 800105c:	f7ff ff88 	bl	8000f70 <BackupDomain_Lock>
 8001060:	e004      	b.n	800106c <RTC_ClkConfig+0xac>
			break;
 8001062:	bf00      	nop
 8001064:	e002      	b.n	800106c <RTC_ClkConfig+0xac>
			break;
 8001066:	bf00      	nop
 8001068:	e000      	b.n	800106c <RTC_ClkConfig+0xac>
			break;
 800106a:	bf00      	nop
	}

	/* Program the selected clk as RTC clock using RTCSEL bits in BDCR*/
	if(pRTCConfig->Clock_Source == RTC_CLKSRC_LSE) RCC->BDCR |= (RTC_CLKSRC_LSE << 8);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d106      	bne.n	8001082 <RTC_ClkConfig+0xc2>
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <RTC_ClkConfig+0x100>)
 8001076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001078:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <RTC_ClkConfig+0x100>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001080:	e014      	b.n	80010ac <RTC_ClkConfig+0xec>
	else if(pRTCConfig->Clock_Source == RTC_CLKSRC_LSI) RCC->BDCR |= (RTC_CLKSRC_LSI << 8);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d106      	bne.n	8001098 <RTC_ClkConfig+0xd8>
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <RTC_ClkConfig+0x100>)
 800108c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800108e:	4a0c      	ldr	r2, [pc, #48]	@ (80010c0 <RTC_ClkConfig+0x100>)
 8001090:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001094:	6713      	str	r3, [r2, #112]	@ 0x70
 8001096:	e009      	b.n	80010ac <RTC_ClkConfig+0xec>
	else if(pRTCConfig->Clock_Source == RTC_CLKSRC_HSE_DIV128) RCC->BDCR |= (RTC_CLKSRC_HSE_DIV128 << 8);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d105      	bne.n	80010ac <RTC_ClkConfig+0xec>
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <RTC_ClkConfig+0x100>)
 80010a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010a4:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <RTC_ClkConfig+0x100>)
 80010a6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80010aa:	6713      	str	r3, [r2, #112]	@ 0x70

	/* Enable the RTC Clock */
	RCC->BDCR |= (1 << 15);
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <RTC_ClkConfig+0x100>)
 80010ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010b0:	4a03      	ldr	r2, [pc, #12]	@ (80010c0 <RTC_ClkConfig+0x100>)
 80010b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010b6:	6713      	str	r3, [r2, #112]	@ 0x70

}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	000f4240 	.word	0x000f4240

080010c8 <std>:
 80010c8:	2300      	movs	r3, #0
 80010ca:	b510      	push	{r4, lr}
 80010cc:	4604      	mov	r4, r0
 80010ce:	e9c0 3300 	strd	r3, r3, [r0]
 80010d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010d6:	6083      	str	r3, [r0, #8]
 80010d8:	8181      	strh	r1, [r0, #12]
 80010da:	6643      	str	r3, [r0, #100]	@ 0x64
 80010dc:	81c2      	strh	r2, [r0, #14]
 80010de:	6183      	str	r3, [r0, #24]
 80010e0:	4619      	mov	r1, r3
 80010e2:	2208      	movs	r2, #8
 80010e4:	305c      	adds	r0, #92	@ 0x5c
 80010e6:	f000 f906 	bl	80012f6 <memset>
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <std+0x58>)
 80010ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <std+0x5c>)
 80010f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <std+0x60>)
 80010f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <std+0x64>)
 80010f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <std+0x68>)
 80010fc:	6224      	str	r4, [r4, #32]
 80010fe:	429c      	cmp	r4, r3
 8001100:	d006      	beq.n	8001110 <std+0x48>
 8001102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001106:	4294      	cmp	r4, r2
 8001108:	d002      	beq.n	8001110 <std+0x48>
 800110a:	33d0      	adds	r3, #208	@ 0xd0
 800110c:	429c      	cmp	r4, r3
 800110e:	d105      	bne.n	800111c <std+0x54>
 8001110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001118:	f000 b966 	b.w	80013e8 <__retarget_lock_init_recursive>
 800111c:	bd10      	pop	{r4, pc}
 800111e:	bf00      	nop
 8001120:	08001271 	.word	0x08001271
 8001124:	08001293 	.word	0x08001293
 8001128:	080012cb 	.word	0x080012cb
 800112c:	080012ef 	.word	0x080012ef
 8001130:	200000b8 	.word	0x200000b8

08001134 <stdio_exit_handler>:
 8001134:	4a02      	ldr	r2, [pc, #8]	@ (8001140 <stdio_exit_handler+0xc>)
 8001136:	4903      	ldr	r1, [pc, #12]	@ (8001144 <stdio_exit_handler+0x10>)
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <stdio_exit_handler+0x14>)
 800113a:	f000 b869 	b.w	8001210 <_fwalk_sglue>
 800113e:	bf00      	nop
 8001140:	2000001c 	.word	0x2000001c
 8001144:	08001c79 	.word	0x08001c79
 8001148:	2000002c 	.word	0x2000002c

0800114c <cleanup_stdio>:
 800114c:	6841      	ldr	r1, [r0, #4]
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <cleanup_stdio+0x34>)
 8001150:	4299      	cmp	r1, r3
 8001152:	b510      	push	{r4, lr}
 8001154:	4604      	mov	r4, r0
 8001156:	d001      	beq.n	800115c <cleanup_stdio+0x10>
 8001158:	f000 fd8e 	bl	8001c78 <_fflush_r>
 800115c:	68a1      	ldr	r1, [r4, #8]
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <cleanup_stdio+0x38>)
 8001160:	4299      	cmp	r1, r3
 8001162:	d002      	beq.n	800116a <cleanup_stdio+0x1e>
 8001164:	4620      	mov	r0, r4
 8001166:	f000 fd87 	bl	8001c78 <_fflush_r>
 800116a:	68e1      	ldr	r1, [r4, #12]
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <cleanup_stdio+0x3c>)
 800116e:	4299      	cmp	r1, r3
 8001170:	d004      	beq.n	800117c <cleanup_stdio+0x30>
 8001172:	4620      	mov	r0, r4
 8001174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001178:	f000 bd7e 	b.w	8001c78 <_fflush_r>
 800117c:	bd10      	pop	{r4, pc}
 800117e:	bf00      	nop
 8001180:	200000b8 	.word	0x200000b8
 8001184:	20000120 	.word	0x20000120
 8001188:	20000188 	.word	0x20000188

0800118c <global_stdio_init.part.0>:
 800118c:	b510      	push	{r4, lr}
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <global_stdio_init.part.0+0x30>)
 8001190:	4c0b      	ldr	r4, [pc, #44]	@ (80011c0 <global_stdio_init.part.0+0x34>)
 8001192:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <global_stdio_init.part.0+0x38>)
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	4620      	mov	r0, r4
 8001198:	2200      	movs	r2, #0
 800119a:	2104      	movs	r1, #4
 800119c:	f7ff ff94 	bl	80010c8 <std>
 80011a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80011a4:	2201      	movs	r2, #1
 80011a6:	2109      	movs	r1, #9
 80011a8:	f7ff ff8e 	bl	80010c8 <std>
 80011ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011b0:	2202      	movs	r2, #2
 80011b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b6:	2112      	movs	r1, #18
 80011b8:	f7ff bf86 	b.w	80010c8 <std>
 80011bc:	200001f0 	.word	0x200001f0
 80011c0:	200000b8 	.word	0x200000b8
 80011c4:	08001135 	.word	0x08001135

080011c8 <__sfp_lock_acquire>:
 80011c8:	4801      	ldr	r0, [pc, #4]	@ (80011d0 <__sfp_lock_acquire+0x8>)
 80011ca:	f000 b90e 	b.w	80013ea <__retarget_lock_acquire_recursive>
 80011ce:	bf00      	nop
 80011d0:	200001f9 	.word	0x200001f9

080011d4 <__sfp_lock_release>:
 80011d4:	4801      	ldr	r0, [pc, #4]	@ (80011dc <__sfp_lock_release+0x8>)
 80011d6:	f000 b909 	b.w	80013ec <__retarget_lock_release_recursive>
 80011da:	bf00      	nop
 80011dc:	200001f9 	.word	0x200001f9

080011e0 <__sinit>:
 80011e0:	b510      	push	{r4, lr}
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff fff0 	bl	80011c8 <__sfp_lock_acquire>
 80011e8:	6a23      	ldr	r3, [r4, #32]
 80011ea:	b11b      	cbz	r3, 80011f4 <__sinit+0x14>
 80011ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011f0:	f7ff bff0 	b.w	80011d4 <__sfp_lock_release>
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <__sinit+0x28>)
 80011f6:	6223      	str	r3, [r4, #32]
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <__sinit+0x2c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f5      	bne.n	80011ec <__sinit+0xc>
 8001200:	f7ff ffc4 	bl	800118c <global_stdio_init.part.0>
 8001204:	e7f2      	b.n	80011ec <__sinit+0xc>
 8001206:	bf00      	nop
 8001208:	0800114d 	.word	0x0800114d
 800120c:	200001f0 	.word	0x200001f0

08001210 <_fwalk_sglue>:
 8001210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001214:	4607      	mov	r7, r0
 8001216:	4688      	mov	r8, r1
 8001218:	4614      	mov	r4, r2
 800121a:	2600      	movs	r6, #0
 800121c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001220:	f1b9 0901 	subs.w	r9, r9, #1
 8001224:	d505      	bpl.n	8001232 <_fwalk_sglue+0x22>
 8001226:	6824      	ldr	r4, [r4, #0]
 8001228:	2c00      	cmp	r4, #0
 800122a:	d1f7      	bne.n	800121c <_fwalk_sglue+0xc>
 800122c:	4630      	mov	r0, r6
 800122e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001232:	89ab      	ldrh	r3, [r5, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d907      	bls.n	8001248 <_fwalk_sglue+0x38>
 8001238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800123c:	3301      	adds	r3, #1
 800123e:	d003      	beq.n	8001248 <_fwalk_sglue+0x38>
 8001240:	4629      	mov	r1, r5
 8001242:	4638      	mov	r0, r7
 8001244:	47c0      	blx	r8
 8001246:	4306      	orrs	r6, r0
 8001248:	3568      	adds	r5, #104	@ 0x68
 800124a:	e7e9      	b.n	8001220 <_fwalk_sglue+0x10>

0800124c <iprintf>:
 800124c:	b40f      	push	{r0, r1, r2, r3}
 800124e:	b507      	push	{r0, r1, r2, lr}
 8001250:	4906      	ldr	r1, [pc, #24]	@ (800126c <iprintf+0x20>)
 8001252:	ab04      	add	r3, sp, #16
 8001254:	6808      	ldr	r0, [r1, #0]
 8001256:	f853 2b04 	ldr.w	r2, [r3], #4
 800125a:	6881      	ldr	r1, [r0, #8]
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f000 f9e7 	bl	8001630 <_vfiprintf_r>
 8001262:	b003      	add	sp, #12
 8001264:	f85d eb04 	ldr.w	lr, [sp], #4
 8001268:	b004      	add	sp, #16
 800126a:	4770      	bx	lr
 800126c:	20000028 	.word	0x20000028

08001270 <__sread>:
 8001270:	b510      	push	{r4, lr}
 8001272:	460c      	mov	r4, r1
 8001274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001278:	f000 f868 	bl	800134c <_read_r>
 800127c:	2800      	cmp	r0, #0
 800127e:	bfab      	itete	ge
 8001280:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001282:	89a3      	ldrhlt	r3, [r4, #12]
 8001284:	181b      	addge	r3, r3, r0
 8001286:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800128a:	bfac      	ite	ge
 800128c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800128e:	81a3      	strhlt	r3, [r4, #12]
 8001290:	bd10      	pop	{r4, pc}

08001292 <__swrite>:
 8001292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001296:	461f      	mov	r7, r3
 8001298:	898b      	ldrh	r3, [r1, #12]
 800129a:	05db      	lsls	r3, r3, #23
 800129c:	4605      	mov	r5, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4616      	mov	r6, r2
 80012a2:	d505      	bpl.n	80012b0 <__swrite+0x1e>
 80012a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012a8:	2302      	movs	r3, #2
 80012aa:	2200      	movs	r2, #0
 80012ac:	f000 f83c 	bl	8001328 <_lseek_r>
 80012b0:	89a3      	ldrh	r3, [r4, #12]
 80012b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012ba:	81a3      	strh	r3, [r4, #12]
 80012bc:	4632      	mov	r2, r6
 80012be:	463b      	mov	r3, r7
 80012c0:	4628      	mov	r0, r5
 80012c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012c6:	f000 b853 	b.w	8001370 <_write_r>

080012ca <__sseek>:
 80012ca:	b510      	push	{r4, lr}
 80012cc:	460c      	mov	r4, r1
 80012ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012d2:	f000 f829 	bl	8001328 <_lseek_r>
 80012d6:	1c43      	adds	r3, r0, #1
 80012d8:	89a3      	ldrh	r3, [r4, #12]
 80012da:	bf15      	itete	ne
 80012dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80012de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012e6:	81a3      	strheq	r3, [r4, #12]
 80012e8:	bf18      	it	ne
 80012ea:	81a3      	strhne	r3, [r4, #12]
 80012ec:	bd10      	pop	{r4, pc}

080012ee <__sclose>:
 80012ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012f2:	f000 b809 	b.w	8001308 <_close_r>

080012f6 <memset>:
 80012f6:	4402      	add	r2, r0
 80012f8:	4603      	mov	r3, r0
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d100      	bne.n	8001300 <memset+0xa>
 80012fe:	4770      	bx	lr
 8001300:	f803 1b01 	strb.w	r1, [r3], #1
 8001304:	e7f9      	b.n	80012fa <memset+0x4>
	...

08001308 <_close_r>:
 8001308:	b538      	push	{r3, r4, r5, lr}
 800130a:	4d06      	ldr	r5, [pc, #24]	@ (8001324 <_close_r+0x1c>)
 800130c:	2300      	movs	r3, #0
 800130e:	4604      	mov	r4, r0
 8001310:	4608      	mov	r0, r1
 8001312:	602b      	str	r3, [r5, #0]
 8001314:	f7ff f8c5 	bl	80004a2 <_close>
 8001318:	1c43      	adds	r3, r0, #1
 800131a:	d102      	bne.n	8001322 <_close_r+0x1a>
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	b103      	cbz	r3, 8001322 <_close_r+0x1a>
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	bd38      	pop	{r3, r4, r5, pc}
 8001324:	200001f4 	.word	0x200001f4

08001328 <_lseek_r>:
 8001328:	b538      	push	{r3, r4, r5, lr}
 800132a:	4d07      	ldr	r5, [pc, #28]	@ (8001348 <_lseek_r+0x20>)
 800132c:	4604      	mov	r4, r0
 800132e:	4608      	mov	r0, r1
 8001330:	4611      	mov	r1, r2
 8001332:	2200      	movs	r2, #0
 8001334:	602a      	str	r2, [r5, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	f7ff f8d7 	bl	80004ea <_lseek>
 800133c:	1c43      	adds	r3, r0, #1
 800133e:	d102      	bne.n	8001346 <_lseek_r+0x1e>
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	b103      	cbz	r3, 8001346 <_lseek_r+0x1e>
 8001344:	6023      	str	r3, [r4, #0]
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	200001f4 	.word	0x200001f4

0800134c <_read_r>:
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	4d07      	ldr	r5, [pc, #28]	@ (800136c <_read_r+0x20>)
 8001350:	4604      	mov	r4, r0
 8001352:	4608      	mov	r0, r1
 8001354:	4611      	mov	r1, r2
 8001356:	2200      	movs	r2, #0
 8001358:	602a      	str	r2, [r5, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	f7ff f868 	bl	8000430 <_read>
 8001360:	1c43      	adds	r3, r0, #1
 8001362:	d102      	bne.n	800136a <_read_r+0x1e>
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	b103      	cbz	r3, 800136a <_read_r+0x1e>
 8001368:	6023      	str	r3, [r4, #0]
 800136a:	bd38      	pop	{r3, r4, r5, pc}
 800136c:	200001f4 	.word	0x200001f4

08001370 <_write_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4d07      	ldr	r5, [pc, #28]	@ (8001390 <_write_r+0x20>)
 8001374:	4604      	mov	r4, r0
 8001376:	4608      	mov	r0, r1
 8001378:	4611      	mov	r1, r2
 800137a:	2200      	movs	r2, #0
 800137c:	602a      	str	r2, [r5, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	f7ff f873 	bl	800046a <_write>
 8001384:	1c43      	adds	r3, r0, #1
 8001386:	d102      	bne.n	800138e <_write_r+0x1e>
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	b103      	cbz	r3, 800138e <_write_r+0x1e>
 800138c:	6023      	str	r3, [r4, #0]
 800138e:	bd38      	pop	{r3, r4, r5, pc}
 8001390:	200001f4 	.word	0x200001f4

08001394 <__errno>:
 8001394:	4b01      	ldr	r3, [pc, #4]	@ (800139c <__errno+0x8>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000028 	.word	0x20000028

080013a0 <__libc_init_array>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4d0d      	ldr	r5, [pc, #52]	@ (80013d8 <__libc_init_array+0x38>)
 80013a4:	4c0d      	ldr	r4, [pc, #52]	@ (80013dc <__libc_init_array+0x3c>)
 80013a6:	1b64      	subs	r4, r4, r5
 80013a8:	10a4      	asrs	r4, r4, #2
 80013aa:	2600      	movs	r6, #0
 80013ac:	42a6      	cmp	r6, r4
 80013ae:	d109      	bne.n	80013c4 <__libc_init_array+0x24>
 80013b0:	4d0b      	ldr	r5, [pc, #44]	@ (80013e0 <__libc_init_array+0x40>)
 80013b2:	4c0c      	ldr	r4, [pc, #48]	@ (80013e4 <__libc_init_array+0x44>)
 80013b4:	f000 fdb0 	bl	8001f18 <_init>
 80013b8:	1b64      	subs	r4, r4, r5
 80013ba:	10a4      	asrs	r4, r4, #2
 80013bc:	2600      	movs	r6, #0
 80013be:	42a6      	cmp	r6, r4
 80013c0:	d105      	bne.n	80013ce <__libc_init_array+0x2e>
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
 80013c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c8:	4798      	blx	r3
 80013ca:	3601      	adds	r6, #1
 80013cc:	e7ee      	b.n	80013ac <__libc_init_array+0xc>
 80013ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80013d2:	4798      	blx	r3
 80013d4:	3601      	adds	r6, #1
 80013d6:	e7f2      	b.n	80013be <__libc_init_array+0x1e>
 80013d8:	08002004 	.word	0x08002004
 80013dc:	08002004 	.word	0x08002004
 80013e0:	08002004 	.word	0x08002004
 80013e4:	08002008 	.word	0x08002008

080013e8 <__retarget_lock_init_recursive>:
 80013e8:	4770      	bx	lr

080013ea <__retarget_lock_acquire_recursive>:
 80013ea:	4770      	bx	lr

080013ec <__retarget_lock_release_recursive>:
 80013ec:	4770      	bx	lr
	...

080013f0 <_free_r>:
 80013f0:	b538      	push	{r3, r4, r5, lr}
 80013f2:	4605      	mov	r5, r0
 80013f4:	2900      	cmp	r1, #0
 80013f6:	d041      	beq.n	800147c <_free_r+0x8c>
 80013f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013fc:	1f0c      	subs	r4, r1, #4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bfb8      	it	lt
 8001402:	18e4      	addlt	r4, r4, r3
 8001404:	f000 f8e0 	bl	80015c8 <__malloc_lock>
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <_free_r+0x90>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	b933      	cbnz	r3, 800141c <_free_r+0x2c>
 800140e:	6063      	str	r3, [r4, #4]
 8001410:	6014      	str	r4, [r2, #0]
 8001412:	4628      	mov	r0, r5
 8001414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001418:	f000 b8dc 	b.w	80015d4 <__malloc_unlock>
 800141c:	42a3      	cmp	r3, r4
 800141e:	d908      	bls.n	8001432 <_free_r+0x42>
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	1821      	adds	r1, r4, r0
 8001424:	428b      	cmp	r3, r1
 8001426:	bf01      	itttt	eq
 8001428:	6819      	ldreq	r1, [r3, #0]
 800142a:	685b      	ldreq	r3, [r3, #4]
 800142c:	1809      	addeq	r1, r1, r0
 800142e:	6021      	streq	r1, [r4, #0]
 8001430:	e7ed      	b.n	800140e <_free_r+0x1e>
 8001432:	461a      	mov	r2, r3
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	b10b      	cbz	r3, 800143c <_free_r+0x4c>
 8001438:	42a3      	cmp	r3, r4
 800143a:	d9fa      	bls.n	8001432 <_free_r+0x42>
 800143c:	6811      	ldr	r1, [r2, #0]
 800143e:	1850      	adds	r0, r2, r1
 8001440:	42a0      	cmp	r0, r4
 8001442:	d10b      	bne.n	800145c <_free_r+0x6c>
 8001444:	6820      	ldr	r0, [r4, #0]
 8001446:	4401      	add	r1, r0
 8001448:	1850      	adds	r0, r2, r1
 800144a:	4283      	cmp	r3, r0
 800144c:	6011      	str	r1, [r2, #0]
 800144e:	d1e0      	bne.n	8001412 <_free_r+0x22>
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	6053      	str	r3, [r2, #4]
 8001456:	4408      	add	r0, r1
 8001458:	6010      	str	r0, [r2, #0]
 800145a:	e7da      	b.n	8001412 <_free_r+0x22>
 800145c:	d902      	bls.n	8001464 <_free_r+0x74>
 800145e:	230c      	movs	r3, #12
 8001460:	602b      	str	r3, [r5, #0]
 8001462:	e7d6      	b.n	8001412 <_free_r+0x22>
 8001464:	6820      	ldr	r0, [r4, #0]
 8001466:	1821      	adds	r1, r4, r0
 8001468:	428b      	cmp	r3, r1
 800146a:	bf04      	itt	eq
 800146c:	6819      	ldreq	r1, [r3, #0]
 800146e:	685b      	ldreq	r3, [r3, #4]
 8001470:	6063      	str	r3, [r4, #4]
 8001472:	bf04      	itt	eq
 8001474:	1809      	addeq	r1, r1, r0
 8001476:	6021      	streq	r1, [r4, #0]
 8001478:	6054      	str	r4, [r2, #4]
 800147a:	e7ca      	b.n	8001412 <_free_r+0x22>
 800147c:	bd38      	pop	{r3, r4, r5, pc}
 800147e:	bf00      	nop
 8001480:	20000200 	.word	0x20000200

08001484 <sbrk_aligned>:
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	4e0f      	ldr	r6, [pc, #60]	@ (80014c4 <sbrk_aligned+0x40>)
 8001488:	460c      	mov	r4, r1
 800148a:	6831      	ldr	r1, [r6, #0]
 800148c:	4605      	mov	r5, r0
 800148e:	b911      	cbnz	r1, 8001496 <sbrk_aligned+0x12>
 8001490:	f000 fcae 	bl	8001df0 <_sbrk_r>
 8001494:	6030      	str	r0, [r6, #0]
 8001496:	4621      	mov	r1, r4
 8001498:	4628      	mov	r0, r5
 800149a:	f000 fca9 	bl	8001df0 <_sbrk_r>
 800149e:	1c43      	adds	r3, r0, #1
 80014a0:	d103      	bne.n	80014aa <sbrk_aligned+0x26>
 80014a2:	f04f 34ff 	mov.w	r4, #4294967295
 80014a6:	4620      	mov	r0, r4
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
 80014aa:	1cc4      	adds	r4, r0, #3
 80014ac:	f024 0403 	bic.w	r4, r4, #3
 80014b0:	42a0      	cmp	r0, r4
 80014b2:	d0f8      	beq.n	80014a6 <sbrk_aligned+0x22>
 80014b4:	1a21      	subs	r1, r4, r0
 80014b6:	4628      	mov	r0, r5
 80014b8:	f000 fc9a 	bl	8001df0 <_sbrk_r>
 80014bc:	3001      	adds	r0, #1
 80014be:	d1f2      	bne.n	80014a6 <sbrk_aligned+0x22>
 80014c0:	e7ef      	b.n	80014a2 <sbrk_aligned+0x1e>
 80014c2:	bf00      	nop
 80014c4:	200001fc 	.word	0x200001fc

080014c8 <_malloc_r>:
 80014c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014cc:	1ccd      	adds	r5, r1, #3
 80014ce:	f025 0503 	bic.w	r5, r5, #3
 80014d2:	3508      	adds	r5, #8
 80014d4:	2d0c      	cmp	r5, #12
 80014d6:	bf38      	it	cc
 80014d8:	250c      	movcc	r5, #12
 80014da:	2d00      	cmp	r5, #0
 80014dc:	4606      	mov	r6, r0
 80014de:	db01      	blt.n	80014e4 <_malloc_r+0x1c>
 80014e0:	42a9      	cmp	r1, r5
 80014e2:	d904      	bls.n	80014ee <_malloc_r+0x26>
 80014e4:	230c      	movs	r3, #12
 80014e6:	6033      	str	r3, [r6, #0]
 80014e8:	2000      	movs	r0, #0
 80014ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80015c4 <_malloc_r+0xfc>
 80014f2:	f000 f869 	bl	80015c8 <__malloc_lock>
 80014f6:	f8d8 3000 	ldr.w	r3, [r8]
 80014fa:	461c      	mov	r4, r3
 80014fc:	bb44      	cbnz	r4, 8001550 <_malloc_r+0x88>
 80014fe:	4629      	mov	r1, r5
 8001500:	4630      	mov	r0, r6
 8001502:	f7ff ffbf 	bl	8001484 <sbrk_aligned>
 8001506:	1c43      	adds	r3, r0, #1
 8001508:	4604      	mov	r4, r0
 800150a:	d158      	bne.n	80015be <_malloc_r+0xf6>
 800150c:	f8d8 4000 	ldr.w	r4, [r8]
 8001510:	4627      	mov	r7, r4
 8001512:	2f00      	cmp	r7, #0
 8001514:	d143      	bne.n	800159e <_malloc_r+0xd6>
 8001516:	2c00      	cmp	r4, #0
 8001518:	d04b      	beq.n	80015b2 <_malloc_r+0xea>
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	4639      	mov	r1, r7
 800151e:	4630      	mov	r0, r6
 8001520:	eb04 0903 	add.w	r9, r4, r3
 8001524:	f000 fc64 	bl	8001df0 <_sbrk_r>
 8001528:	4581      	cmp	r9, r0
 800152a:	d142      	bne.n	80015b2 <_malloc_r+0xea>
 800152c:	6821      	ldr	r1, [r4, #0]
 800152e:	1a6d      	subs	r5, r5, r1
 8001530:	4629      	mov	r1, r5
 8001532:	4630      	mov	r0, r6
 8001534:	f7ff ffa6 	bl	8001484 <sbrk_aligned>
 8001538:	3001      	adds	r0, #1
 800153a:	d03a      	beq.n	80015b2 <_malloc_r+0xea>
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	442b      	add	r3, r5
 8001540:	6023      	str	r3, [r4, #0]
 8001542:	f8d8 3000 	ldr.w	r3, [r8]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	bb62      	cbnz	r2, 80015a4 <_malloc_r+0xdc>
 800154a:	f8c8 7000 	str.w	r7, [r8]
 800154e:	e00f      	b.n	8001570 <_malloc_r+0xa8>
 8001550:	6822      	ldr	r2, [r4, #0]
 8001552:	1b52      	subs	r2, r2, r5
 8001554:	d420      	bmi.n	8001598 <_malloc_r+0xd0>
 8001556:	2a0b      	cmp	r2, #11
 8001558:	d917      	bls.n	800158a <_malloc_r+0xc2>
 800155a:	1961      	adds	r1, r4, r5
 800155c:	42a3      	cmp	r3, r4
 800155e:	6025      	str	r5, [r4, #0]
 8001560:	bf18      	it	ne
 8001562:	6059      	strne	r1, [r3, #4]
 8001564:	6863      	ldr	r3, [r4, #4]
 8001566:	bf08      	it	eq
 8001568:	f8c8 1000 	streq.w	r1, [r8]
 800156c:	5162      	str	r2, [r4, r5]
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	4630      	mov	r0, r6
 8001572:	f000 f82f 	bl	80015d4 <__malloc_unlock>
 8001576:	f104 000b 	add.w	r0, r4, #11
 800157a:	1d23      	adds	r3, r4, #4
 800157c:	f020 0007 	bic.w	r0, r0, #7
 8001580:	1ac2      	subs	r2, r0, r3
 8001582:	bf1c      	itt	ne
 8001584:	1a1b      	subne	r3, r3, r0
 8001586:	50a3      	strne	r3, [r4, r2]
 8001588:	e7af      	b.n	80014ea <_malloc_r+0x22>
 800158a:	6862      	ldr	r2, [r4, #4]
 800158c:	42a3      	cmp	r3, r4
 800158e:	bf0c      	ite	eq
 8001590:	f8c8 2000 	streq.w	r2, [r8]
 8001594:	605a      	strne	r2, [r3, #4]
 8001596:	e7eb      	b.n	8001570 <_malloc_r+0xa8>
 8001598:	4623      	mov	r3, r4
 800159a:	6864      	ldr	r4, [r4, #4]
 800159c:	e7ae      	b.n	80014fc <_malloc_r+0x34>
 800159e:	463c      	mov	r4, r7
 80015a0:	687f      	ldr	r7, [r7, #4]
 80015a2:	e7b6      	b.n	8001512 <_malloc_r+0x4a>
 80015a4:	461a      	mov	r2, r3
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	42a3      	cmp	r3, r4
 80015aa:	d1fb      	bne.n	80015a4 <_malloc_r+0xdc>
 80015ac:	2300      	movs	r3, #0
 80015ae:	6053      	str	r3, [r2, #4]
 80015b0:	e7de      	b.n	8001570 <_malloc_r+0xa8>
 80015b2:	230c      	movs	r3, #12
 80015b4:	6033      	str	r3, [r6, #0]
 80015b6:	4630      	mov	r0, r6
 80015b8:	f000 f80c 	bl	80015d4 <__malloc_unlock>
 80015bc:	e794      	b.n	80014e8 <_malloc_r+0x20>
 80015be:	6005      	str	r5, [r0, #0]
 80015c0:	e7d6      	b.n	8001570 <_malloc_r+0xa8>
 80015c2:	bf00      	nop
 80015c4:	20000200 	.word	0x20000200

080015c8 <__malloc_lock>:
 80015c8:	4801      	ldr	r0, [pc, #4]	@ (80015d0 <__malloc_lock+0x8>)
 80015ca:	f7ff bf0e 	b.w	80013ea <__retarget_lock_acquire_recursive>
 80015ce:	bf00      	nop
 80015d0:	200001f8 	.word	0x200001f8

080015d4 <__malloc_unlock>:
 80015d4:	4801      	ldr	r0, [pc, #4]	@ (80015dc <__malloc_unlock+0x8>)
 80015d6:	f7ff bf09 	b.w	80013ec <__retarget_lock_release_recursive>
 80015da:	bf00      	nop
 80015dc:	200001f8 	.word	0x200001f8

080015e0 <__sfputc_r>:
 80015e0:	6893      	ldr	r3, [r2, #8]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	b410      	push	{r4}
 80015e8:	6093      	str	r3, [r2, #8]
 80015ea:	da07      	bge.n	80015fc <__sfputc_r+0x1c>
 80015ec:	6994      	ldr	r4, [r2, #24]
 80015ee:	42a3      	cmp	r3, r4
 80015f0:	db01      	blt.n	80015f6 <__sfputc_r+0x16>
 80015f2:	290a      	cmp	r1, #10
 80015f4:	d102      	bne.n	80015fc <__sfputc_r+0x1c>
 80015f6:	bc10      	pop	{r4}
 80015f8:	f000 bb66 	b.w	8001cc8 <__swbuf_r>
 80015fc:	6813      	ldr	r3, [r2, #0]
 80015fe:	1c58      	adds	r0, r3, #1
 8001600:	6010      	str	r0, [r2, #0]
 8001602:	7019      	strb	r1, [r3, #0]
 8001604:	4608      	mov	r0, r1
 8001606:	bc10      	pop	{r4}
 8001608:	4770      	bx	lr

0800160a <__sfputs_r>:
 800160a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160c:	4606      	mov	r6, r0
 800160e:	460f      	mov	r7, r1
 8001610:	4614      	mov	r4, r2
 8001612:	18d5      	adds	r5, r2, r3
 8001614:	42ac      	cmp	r4, r5
 8001616:	d101      	bne.n	800161c <__sfputs_r+0x12>
 8001618:	2000      	movs	r0, #0
 800161a:	e007      	b.n	800162c <__sfputs_r+0x22>
 800161c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001620:	463a      	mov	r2, r7
 8001622:	4630      	mov	r0, r6
 8001624:	f7ff ffdc 	bl	80015e0 <__sfputc_r>
 8001628:	1c43      	adds	r3, r0, #1
 800162a:	d1f3      	bne.n	8001614 <__sfputs_r+0xa>
 800162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001630 <_vfiprintf_r>:
 8001630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001634:	460d      	mov	r5, r1
 8001636:	b09d      	sub	sp, #116	@ 0x74
 8001638:	4614      	mov	r4, r2
 800163a:	4698      	mov	r8, r3
 800163c:	4606      	mov	r6, r0
 800163e:	b118      	cbz	r0, 8001648 <_vfiprintf_r+0x18>
 8001640:	6a03      	ldr	r3, [r0, #32]
 8001642:	b90b      	cbnz	r3, 8001648 <_vfiprintf_r+0x18>
 8001644:	f7ff fdcc 	bl	80011e0 <__sinit>
 8001648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800164a:	07d9      	lsls	r1, r3, #31
 800164c:	d405      	bmi.n	800165a <_vfiprintf_r+0x2a>
 800164e:	89ab      	ldrh	r3, [r5, #12]
 8001650:	059a      	lsls	r2, r3, #22
 8001652:	d402      	bmi.n	800165a <_vfiprintf_r+0x2a>
 8001654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001656:	f7ff fec8 	bl	80013ea <__retarget_lock_acquire_recursive>
 800165a:	89ab      	ldrh	r3, [r5, #12]
 800165c:	071b      	lsls	r3, r3, #28
 800165e:	d501      	bpl.n	8001664 <_vfiprintf_r+0x34>
 8001660:	692b      	ldr	r3, [r5, #16]
 8001662:	b99b      	cbnz	r3, 800168c <_vfiprintf_r+0x5c>
 8001664:	4629      	mov	r1, r5
 8001666:	4630      	mov	r0, r6
 8001668:	f000 fb6c 	bl	8001d44 <__swsetup_r>
 800166c:	b170      	cbz	r0, 800168c <_vfiprintf_r+0x5c>
 800166e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001670:	07dc      	lsls	r4, r3, #31
 8001672:	d504      	bpl.n	800167e <_vfiprintf_r+0x4e>
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	b01d      	add	sp, #116	@ 0x74
 800167a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800167e:	89ab      	ldrh	r3, [r5, #12]
 8001680:	0598      	lsls	r0, r3, #22
 8001682:	d4f7      	bmi.n	8001674 <_vfiprintf_r+0x44>
 8001684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001686:	f7ff feb1 	bl	80013ec <__retarget_lock_release_recursive>
 800168a:	e7f3      	b.n	8001674 <_vfiprintf_r+0x44>
 800168c:	2300      	movs	r3, #0
 800168e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001690:	2320      	movs	r3, #32
 8001692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001696:	f8cd 800c 	str.w	r8, [sp, #12]
 800169a:	2330      	movs	r3, #48	@ 0x30
 800169c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800184c <_vfiprintf_r+0x21c>
 80016a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80016a4:	f04f 0901 	mov.w	r9, #1
 80016a8:	4623      	mov	r3, r4
 80016aa:	469a      	mov	sl, r3
 80016ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016b0:	b10a      	cbz	r2, 80016b6 <_vfiprintf_r+0x86>
 80016b2:	2a25      	cmp	r2, #37	@ 0x25
 80016b4:	d1f9      	bne.n	80016aa <_vfiprintf_r+0x7a>
 80016b6:	ebba 0b04 	subs.w	fp, sl, r4
 80016ba:	d00b      	beq.n	80016d4 <_vfiprintf_r+0xa4>
 80016bc:	465b      	mov	r3, fp
 80016be:	4622      	mov	r2, r4
 80016c0:	4629      	mov	r1, r5
 80016c2:	4630      	mov	r0, r6
 80016c4:	f7ff ffa1 	bl	800160a <__sfputs_r>
 80016c8:	3001      	adds	r0, #1
 80016ca:	f000 80a7 	beq.w	800181c <_vfiprintf_r+0x1ec>
 80016ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80016d0:	445a      	add	r2, fp
 80016d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80016d4:	f89a 3000 	ldrb.w	r3, [sl]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 809f 	beq.w	800181c <_vfiprintf_r+0x1ec>
 80016de:	2300      	movs	r3, #0
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016e8:	f10a 0a01 	add.w	sl, sl, #1
 80016ec:	9304      	str	r3, [sp, #16]
 80016ee:	9307      	str	r3, [sp, #28]
 80016f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80016f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80016f6:	4654      	mov	r4, sl
 80016f8:	2205      	movs	r2, #5
 80016fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016fe:	4853      	ldr	r0, [pc, #332]	@ (800184c <_vfiprintf_r+0x21c>)
 8001700:	f7fe fd86 	bl	8000210 <memchr>
 8001704:	9a04      	ldr	r2, [sp, #16]
 8001706:	b9d8      	cbnz	r0, 8001740 <_vfiprintf_r+0x110>
 8001708:	06d1      	lsls	r1, r2, #27
 800170a:	bf44      	itt	mi
 800170c:	2320      	movmi	r3, #32
 800170e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001712:	0713      	lsls	r3, r2, #28
 8001714:	bf44      	itt	mi
 8001716:	232b      	movmi	r3, #43	@ 0x2b
 8001718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800171c:	f89a 3000 	ldrb.w	r3, [sl]
 8001720:	2b2a      	cmp	r3, #42	@ 0x2a
 8001722:	d015      	beq.n	8001750 <_vfiprintf_r+0x120>
 8001724:	9a07      	ldr	r2, [sp, #28]
 8001726:	4654      	mov	r4, sl
 8001728:	2000      	movs	r0, #0
 800172a:	f04f 0c0a 	mov.w	ip, #10
 800172e:	4621      	mov	r1, r4
 8001730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001734:	3b30      	subs	r3, #48	@ 0x30
 8001736:	2b09      	cmp	r3, #9
 8001738:	d94b      	bls.n	80017d2 <_vfiprintf_r+0x1a2>
 800173a:	b1b0      	cbz	r0, 800176a <_vfiprintf_r+0x13a>
 800173c:	9207      	str	r2, [sp, #28]
 800173e:	e014      	b.n	800176a <_vfiprintf_r+0x13a>
 8001740:	eba0 0308 	sub.w	r3, r0, r8
 8001744:	fa09 f303 	lsl.w	r3, r9, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	9304      	str	r3, [sp, #16]
 800174c:	46a2      	mov	sl, r4
 800174e:	e7d2      	b.n	80016f6 <_vfiprintf_r+0xc6>
 8001750:	9b03      	ldr	r3, [sp, #12]
 8001752:	1d19      	adds	r1, r3, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	9103      	str	r1, [sp, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	bfbb      	ittet	lt
 800175c:	425b      	neglt	r3, r3
 800175e:	f042 0202 	orrlt.w	r2, r2, #2
 8001762:	9307      	strge	r3, [sp, #28]
 8001764:	9307      	strlt	r3, [sp, #28]
 8001766:	bfb8      	it	lt
 8001768:	9204      	strlt	r2, [sp, #16]
 800176a:	7823      	ldrb	r3, [r4, #0]
 800176c:	2b2e      	cmp	r3, #46	@ 0x2e
 800176e:	d10a      	bne.n	8001786 <_vfiprintf_r+0x156>
 8001770:	7863      	ldrb	r3, [r4, #1]
 8001772:	2b2a      	cmp	r3, #42	@ 0x2a
 8001774:	d132      	bne.n	80017dc <_vfiprintf_r+0x1ac>
 8001776:	9b03      	ldr	r3, [sp, #12]
 8001778:	1d1a      	adds	r2, r3, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	9203      	str	r2, [sp, #12]
 800177e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001782:	3402      	adds	r4, #2
 8001784:	9305      	str	r3, [sp, #20]
 8001786:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001850 <_vfiprintf_r+0x220>
 800178a:	7821      	ldrb	r1, [r4, #0]
 800178c:	2203      	movs	r2, #3
 800178e:	4650      	mov	r0, sl
 8001790:	f7fe fd3e 	bl	8000210 <memchr>
 8001794:	b138      	cbz	r0, 80017a6 <_vfiprintf_r+0x176>
 8001796:	9b04      	ldr	r3, [sp, #16]
 8001798:	eba0 000a 	sub.w	r0, r0, sl
 800179c:	2240      	movs	r2, #64	@ 0x40
 800179e:	4082      	lsls	r2, r0
 80017a0:	4313      	orrs	r3, r2
 80017a2:	3401      	adds	r4, #1
 80017a4:	9304      	str	r3, [sp, #16]
 80017a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017aa:	482a      	ldr	r0, [pc, #168]	@ (8001854 <_vfiprintf_r+0x224>)
 80017ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80017b0:	2206      	movs	r2, #6
 80017b2:	f7fe fd2d 	bl	8000210 <memchr>
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d03f      	beq.n	800183a <_vfiprintf_r+0x20a>
 80017ba:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <_vfiprintf_r+0x228>)
 80017bc:	bb1b      	cbnz	r3, 8001806 <_vfiprintf_r+0x1d6>
 80017be:	9b03      	ldr	r3, [sp, #12]
 80017c0:	3307      	adds	r3, #7
 80017c2:	f023 0307 	bic.w	r3, r3, #7
 80017c6:	3308      	adds	r3, #8
 80017c8:	9303      	str	r3, [sp, #12]
 80017ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80017cc:	443b      	add	r3, r7
 80017ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80017d0:	e76a      	b.n	80016a8 <_vfiprintf_r+0x78>
 80017d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80017d6:	460c      	mov	r4, r1
 80017d8:	2001      	movs	r0, #1
 80017da:	e7a8      	b.n	800172e <_vfiprintf_r+0xfe>
 80017dc:	2300      	movs	r3, #0
 80017de:	3401      	adds	r4, #1
 80017e0:	9305      	str	r3, [sp, #20]
 80017e2:	4619      	mov	r1, r3
 80017e4:	f04f 0c0a 	mov.w	ip, #10
 80017e8:	4620      	mov	r0, r4
 80017ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017ee:	3a30      	subs	r2, #48	@ 0x30
 80017f0:	2a09      	cmp	r2, #9
 80017f2:	d903      	bls.n	80017fc <_vfiprintf_r+0x1cc>
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0c6      	beq.n	8001786 <_vfiprintf_r+0x156>
 80017f8:	9105      	str	r1, [sp, #20]
 80017fa:	e7c4      	b.n	8001786 <_vfiprintf_r+0x156>
 80017fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001800:	4604      	mov	r4, r0
 8001802:	2301      	movs	r3, #1
 8001804:	e7f0      	b.n	80017e8 <_vfiprintf_r+0x1b8>
 8001806:	ab03      	add	r3, sp, #12
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	462a      	mov	r2, r5
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <_vfiprintf_r+0x22c>)
 800180e:	a904      	add	r1, sp, #16
 8001810:	4630      	mov	r0, r6
 8001812:	f3af 8000 	nop.w
 8001816:	4607      	mov	r7, r0
 8001818:	1c78      	adds	r0, r7, #1
 800181a:	d1d6      	bne.n	80017ca <_vfiprintf_r+0x19a>
 800181c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800181e:	07d9      	lsls	r1, r3, #31
 8001820:	d405      	bmi.n	800182e <_vfiprintf_r+0x1fe>
 8001822:	89ab      	ldrh	r3, [r5, #12]
 8001824:	059a      	lsls	r2, r3, #22
 8001826:	d402      	bmi.n	800182e <_vfiprintf_r+0x1fe>
 8001828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800182a:	f7ff fddf 	bl	80013ec <__retarget_lock_release_recursive>
 800182e:	89ab      	ldrh	r3, [r5, #12]
 8001830:	065b      	lsls	r3, r3, #25
 8001832:	f53f af1f 	bmi.w	8001674 <_vfiprintf_r+0x44>
 8001836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001838:	e71e      	b.n	8001678 <_vfiprintf_r+0x48>
 800183a:	ab03      	add	r3, sp, #12
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	462a      	mov	r2, r5
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <_vfiprintf_r+0x22c>)
 8001842:	a904      	add	r1, sp, #16
 8001844:	4630      	mov	r0, r6
 8001846:	f000 f879 	bl	800193c <_printf_i>
 800184a:	e7e4      	b.n	8001816 <_vfiprintf_r+0x1e6>
 800184c:	08001fc9 	.word	0x08001fc9
 8001850:	08001fcf 	.word	0x08001fcf
 8001854:	08001fd3 	.word	0x08001fd3
 8001858:	00000000 	.word	0x00000000
 800185c:	0800160b 	.word	0x0800160b

08001860 <_printf_common>:
 8001860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001864:	4616      	mov	r6, r2
 8001866:	4698      	mov	r8, r3
 8001868:	688a      	ldr	r2, [r1, #8]
 800186a:	690b      	ldr	r3, [r1, #16]
 800186c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001870:	4293      	cmp	r3, r2
 8001872:	bfb8      	it	lt
 8001874:	4613      	movlt	r3, r2
 8001876:	6033      	str	r3, [r6, #0]
 8001878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800187c:	4607      	mov	r7, r0
 800187e:	460c      	mov	r4, r1
 8001880:	b10a      	cbz	r2, 8001886 <_printf_common+0x26>
 8001882:	3301      	adds	r3, #1
 8001884:	6033      	str	r3, [r6, #0]
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	0699      	lsls	r1, r3, #26
 800188a:	bf42      	ittt	mi
 800188c:	6833      	ldrmi	r3, [r6, #0]
 800188e:	3302      	addmi	r3, #2
 8001890:	6033      	strmi	r3, [r6, #0]
 8001892:	6825      	ldr	r5, [r4, #0]
 8001894:	f015 0506 	ands.w	r5, r5, #6
 8001898:	d106      	bne.n	80018a8 <_printf_common+0x48>
 800189a:	f104 0a19 	add.w	sl, r4, #25
 800189e:	68e3      	ldr	r3, [r4, #12]
 80018a0:	6832      	ldr	r2, [r6, #0]
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	42ab      	cmp	r3, r5
 80018a6:	dc26      	bgt.n	80018f6 <_printf_common+0x96>
 80018a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	3b00      	subs	r3, #0
 80018b0:	bf18      	it	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	0692      	lsls	r2, r2, #26
 80018b6:	d42b      	bmi.n	8001910 <_printf_common+0xb0>
 80018b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80018bc:	4641      	mov	r1, r8
 80018be:	4638      	mov	r0, r7
 80018c0:	47c8      	blx	r9
 80018c2:	3001      	adds	r0, #1
 80018c4:	d01e      	beq.n	8001904 <_printf_common+0xa4>
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	6922      	ldr	r2, [r4, #16]
 80018ca:	f003 0306 	and.w	r3, r3, #6
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf02      	ittt	eq
 80018d2:	68e5      	ldreq	r5, [r4, #12]
 80018d4:	6833      	ldreq	r3, [r6, #0]
 80018d6:	1aed      	subeq	r5, r5, r3
 80018d8:	68a3      	ldr	r3, [r4, #8]
 80018da:	bf0c      	ite	eq
 80018dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018e0:	2500      	movne	r5, #0
 80018e2:	4293      	cmp	r3, r2
 80018e4:	bfc4      	itt	gt
 80018e6:	1a9b      	subgt	r3, r3, r2
 80018e8:	18ed      	addgt	r5, r5, r3
 80018ea:	2600      	movs	r6, #0
 80018ec:	341a      	adds	r4, #26
 80018ee:	42b5      	cmp	r5, r6
 80018f0:	d11a      	bne.n	8001928 <_printf_common+0xc8>
 80018f2:	2000      	movs	r0, #0
 80018f4:	e008      	b.n	8001908 <_printf_common+0xa8>
 80018f6:	2301      	movs	r3, #1
 80018f8:	4652      	mov	r2, sl
 80018fa:	4641      	mov	r1, r8
 80018fc:	4638      	mov	r0, r7
 80018fe:	47c8      	blx	r9
 8001900:	3001      	adds	r0, #1
 8001902:	d103      	bne.n	800190c <_printf_common+0xac>
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800190c:	3501      	adds	r5, #1
 800190e:	e7c6      	b.n	800189e <_printf_common+0x3e>
 8001910:	18e1      	adds	r1, r4, r3
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	2030      	movs	r0, #48	@ 0x30
 8001916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800191a:	4422      	add	r2, r4
 800191c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001924:	3302      	adds	r3, #2
 8001926:	e7c7      	b.n	80018b8 <_printf_common+0x58>
 8001928:	2301      	movs	r3, #1
 800192a:	4622      	mov	r2, r4
 800192c:	4641      	mov	r1, r8
 800192e:	4638      	mov	r0, r7
 8001930:	47c8      	blx	r9
 8001932:	3001      	adds	r0, #1
 8001934:	d0e6      	beq.n	8001904 <_printf_common+0xa4>
 8001936:	3601      	adds	r6, #1
 8001938:	e7d9      	b.n	80018ee <_printf_common+0x8e>
	...

0800193c <_printf_i>:
 800193c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001940:	7e0f      	ldrb	r7, [r1, #24]
 8001942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001944:	2f78      	cmp	r7, #120	@ 0x78
 8001946:	4691      	mov	r9, r2
 8001948:	4680      	mov	r8, r0
 800194a:	460c      	mov	r4, r1
 800194c:	469a      	mov	sl, r3
 800194e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001952:	d807      	bhi.n	8001964 <_printf_i+0x28>
 8001954:	2f62      	cmp	r7, #98	@ 0x62
 8001956:	d80a      	bhi.n	800196e <_printf_i+0x32>
 8001958:	2f00      	cmp	r7, #0
 800195a:	f000 80d1 	beq.w	8001b00 <_printf_i+0x1c4>
 800195e:	2f58      	cmp	r7, #88	@ 0x58
 8001960:	f000 80b8 	beq.w	8001ad4 <_printf_i+0x198>
 8001964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800196c:	e03a      	b.n	80019e4 <_printf_i+0xa8>
 800196e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001972:	2b15      	cmp	r3, #21
 8001974:	d8f6      	bhi.n	8001964 <_printf_i+0x28>
 8001976:	a101      	add	r1, pc, #4	@ (adr r1, 800197c <_printf_i+0x40>)
 8001978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800197c:	080019d5 	.word	0x080019d5
 8001980:	080019e9 	.word	0x080019e9
 8001984:	08001965 	.word	0x08001965
 8001988:	08001965 	.word	0x08001965
 800198c:	08001965 	.word	0x08001965
 8001990:	08001965 	.word	0x08001965
 8001994:	080019e9 	.word	0x080019e9
 8001998:	08001965 	.word	0x08001965
 800199c:	08001965 	.word	0x08001965
 80019a0:	08001965 	.word	0x08001965
 80019a4:	08001965 	.word	0x08001965
 80019a8:	08001ae7 	.word	0x08001ae7
 80019ac:	08001a13 	.word	0x08001a13
 80019b0:	08001aa1 	.word	0x08001aa1
 80019b4:	08001965 	.word	0x08001965
 80019b8:	08001965 	.word	0x08001965
 80019bc:	08001b09 	.word	0x08001b09
 80019c0:	08001965 	.word	0x08001965
 80019c4:	08001a13 	.word	0x08001a13
 80019c8:	08001965 	.word	0x08001965
 80019cc:	08001965 	.word	0x08001965
 80019d0:	08001aa9 	.word	0x08001aa9
 80019d4:	6833      	ldr	r3, [r6, #0]
 80019d6:	1d1a      	adds	r2, r3, #4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6032      	str	r2, [r6, #0]
 80019dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80019e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019e4:	2301      	movs	r3, #1
 80019e6:	e09c      	b.n	8001b22 <_printf_i+0x1e6>
 80019e8:	6833      	ldr	r3, [r6, #0]
 80019ea:	6820      	ldr	r0, [r4, #0]
 80019ec:	1d19      	adds	r1, r3, #4
 80019ee:	6031      	str	r1, [r6, #0]
 80019f0:	0606      	lsls	r6, r0, #24
 80019f2:	d501      	bpl.n	80019f8 <_printf_i+0xbc>
 80019f4:	681d      	ldr	r5, [r3, #0]
 80019f6:	e003      	b.n	8001a00 <_printf_i+0xc4>
 80019f8:	0645      	lsls	r5, r0, #25
 80019fa:	d5fb      	bpl.n	80019f4 <_printf_i+0xb8>
 80019fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001a00:	2d00      	cmp	r5, #0
 8001a02:	da03      	bge.n	8001a0c <_printf_i+0xd0>
 8001a04:	232d      	movs	r3, #45	@ 0x2d
 8001a06:	426d      	negs	r5, r5
 8001a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a0c:	4858      	ldr	r0, [pc, #352]	@ (8001b70 <_printf_i+0x234>)
 8001a0e:	230a      	movs	r3, #10
 8001a10:	e011      	b.n	8001a36 <_printf_i+0xfa>
 8001a12:	6821      	ldr	r1, [r4, #0]
 8001a14:	6833      	ldr	r3, [r6, #0]
 8001a16:	0608      	lsls	r0, r1, #24
 8001a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8001a1c:	d402      	bmi.n	8001a24 <_printf_i+0xe8>
 8001a1e:	0649      	lsls	r1, r1, #25
 8001a20:	bf48      	it	mi
 8001a22:	b2ad      	uxthmi	r5, r5
 8001a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8001a26:	4852      	ldr	r0, [pc, #328]	@ (8001b70 <_printf_i+0x234>)
 8001a28:	6033      	str	r3, [r6, #0]
 8001a2a:	bf14      	ite	ne
 8001a2c:	230a      	movne	r3, #10
 8001a2e:	2308      	moveq	r3, #8
 8001a30:	2100      	movs	r1, #0
 8001a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001a36:	6866      	ldr	r6, [r4, #4]
 8001a38:	60a6      	str	r6, [r4, #8]
 8001a3a:	2e00      	cmp	r6, #0
 8001a3c:	db05      	blt.n	8001a4a <_printf_i+0x10e>
 8001a3e:	6821      	ldr	r1, [r4, #0]
 8001a40:	432e      	orrs	r6, r5
 8001a42:	f021 0104 	bic.w	r1, r1, #4
 8001a46:	6021      	str	r1, [r4, #0]
 8001a48:	d04b      	beq.n	8001ae2 <_printf_i+0x1a6>
 8001a4a:	4616      	mov	r6, r2
 8001a4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a50:	fb03 5711 	mls	r7, r3, r1, r5
 8001a54:	5dc7      	ldrb	r7, [r0, r7]
 8001a56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001a5a:	462f      	mov	r7, r5
 8001a5c:	42bb      	cmp	r3, r7
 8001a5e:	460d      	mov	r5, r1
 8001a60:	d9f4      	bls.n	8001a4c <_printf_i+0x110>
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d10b      	bne.n	8001a7e <_printf_i+0x142>
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	07df      	lsls	r7, r3, #31
 8001a6a:	d508      	bpl.n	8001a7e <_printf_i+0x142>
 8001a6c:	6923      	ldr	r3, [r4, #16]
 8001a6e:	6861      	ldr	r1, [r4, #4]
 8001a70:	4299      	cmp	r1, r3
 8001a72:	bfde      	ittt	le
 8001a74:	2330      	movle	r3, #48	@ 0x30
 8001a76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001a7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001a7e:	1b92      	subs	r2, r2, r6
 8001a80:	6122      	str	r2, [r4, #16]
 8001a82:	f8cd a000 	str.w	sl, [sp]
 8001a86:	464b      	mov	r3, r9
 8001a88:	aa03      	add	r2, sp, #12
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	f7ff fee7 	bl	8001860 <_printf_common>
 8001a92:	3001      	adds	r0, #1
 8001a94:	d14a      	bne.n	8001b2c <_printf_i+0x1f0>
 8001a96:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9a:	b004      	add	sp, #16
 8001a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	f043 0320 	orr.w	r3, r3, #32
 8001aa6:	6023      	str	r3, [r4, #0]
 8001aa8:	4832      	ldr	r0, [pc, #200]	@ (8001b74 <_printf_i+0x238>)
 8001aaa:	2778      	movs	r7, #120	@ 0x78
 8001aac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	6831      	ldr	r1, [r6, #0]
 8001ab4:	061f      	lsls	r7, r3, #24
 8001ab6:	f851 5b04 	ldr.w	r5, [r1], #4
 8001aba:	d402      	bmi.n	8001ac2 <_printf_i+0x186>
 8001abc:	065f      	lsls	r7, r3, #25
 8001abe:	bf48      	it	mi
 8001ac0:	b2ad      	uxthmi	r5, r5
 8001ac2:	6031      	str	r1, [r6, #0]
 8001ac4:	07d9      	lsls	r1, r3, #31
 8001ac6:	bf44      	itt	mi
 8001ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8001acc:	6023      	strmi	r3, [r4, #0]
 8001ace:	b11d      	cbz	r5, 8001ad8 <_printf_i+0x19c>
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	e7ad      	b.n	8001a30 <_printf_i+0xf4>
 8001ad4:	4826      	ldr	r0, [pc, #152]	@ (8001b70 <_printf_i+0x234>)
 8001ad6:	e7e9      	b.n	8001aac <_printf_i+0x170>
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f023 0320 	bic.w	r3, r3, #32
 8001ade:	6023      	str	r3, [r4, #0]
 8001ae0:	e7f6      	b.n	8001ad0 <_printf_i+0x194>
 8001ae2:	4616      	mov	r6, r2
 8001ae4:	e7bd      	b.n	8001a62 <_printf_i+0x126>
 8001ae6:	6833      	ldr	r3, [r6, #0]
 8001ae8:	6825      	ldr	r5, [r4, #0]
 8001aea:	6961      	ldr	r1, [r4, #20]
 8001aec:	1d18      	adds	r0, r3, #4
 8001aee:	6030      	str	r0, [r6, #0]
 8001af0:	062e      	lsls	r6, r5, #24
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	d501      	bpl.n	8001afa <_printf_i+0x1be>
 8001af6:	6019      	str	r1, [r3, #0]
 8001af8:	e002      	b.n	8001b00 <_printf_i+0x1c4>
 8001afa:	0668      	lsls	r0, r5, #25
 8001afc:	d5fb      	bpl.n	8001af6 <_printf_i+0x1ba>
 8001afe:	8019      	strh	r1, [r3, #0]
 8001b00:	2300      	movs	r3, #0
 8001b02:	6123      	str	r3, [r4, #16]
 8001b04:	4616      	mov	r6, r2
 8001b06:	e7bc      	b.n	8001a82 <_printf_i+0x146>
 8001b08:	6833      	ldr	r3, [r6, #0]
 8001b0a:	1d1a      	adds	r2, r3, #4
 8001b0c:	6032      	str	r2, [r6, #0]
 8001b0e:	681e      	ldr	r6, [r3, #0]
 8001b10:	6862      	ldr	r2, [r4, #4]
 8001b12:	2100      	movs	r1, #0
 8001b14:	4630      	mov	r0, r6
 8001b16:	f7fe fb7b 	bl	8000210 <memchr>
 8001b1a:	b108      	cbz	r0, 8001b20 <_printf_i+0x1e4>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	6060      	str	r0, [r4, #4]
 8001b20:	6863      	ldr	r3, [r4, #4]
 8001b22:	6123      	str	r3, [r4, #16]
 8001b24:	2300      	movs	r3, #0
 8001b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b2a:	e7aa      	b.n	8001a82 <_printf_i+0x146>
 8001b2c:	6923      	ldr	r3, [r4, #16]
 8001b2e:	4632      	mov	r2, r6
 8001b30:	4649      	mov	r1, r9
 8001b32:	4640      	mov	r0, r8
 8001b34:	47d0      	blx	sl
 8001b36:	3001      	adds	r0, #1
 8001b38:	d0ad      	beq.n	8001a96 <_printf_i+0x15a>
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	079b      	lsls	r3, r3, #30
 8001b3e:	d413      	bmi.n	8001b68 <_printf_i+0x22c>
 8001b40:	68e0      	ldr	r0, [r4, #12]
 8001b42:	9b03      	ldr	r3, [sp, #12]
 8001b44:	4298      	cmp	r0, r3
 8001b46:	bfb8      	it	lt
 8001b48:	4618      	movlt	r0, r3
 8001b4a:	e7a6      	b.n	8001a9a <_printf_i+0x15e>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4632      	mov	r2, r6
 8001b50:	4649      	mov	r1, r9
 8001b52:	4640      	mov	r0, r8
 8001b54:	47d0      	blx	sl
 8001b56:	3001      	adds	r0, #1
 8001b58:	d09d      	beq.n	8001a96 <_printf_i+0x15a>
 8001b5a:	3501      	adds	r5, #1
 8001b5c:	68e3      	ldr	r3, [r4, #12]
 8001b5e:	9903      	ldr	r1, [sp, #12]
 8001b60:	1a5b      	subs	r3, r3, r1
 8001b62:	42ab      	cmp	r3, r5
 8001b64:	dcf2      	bgt.n	8001b4c <_printf_i+0x210>
 8001b66:	e7eb      	b.n	8001b40 <_printf_i+0x204>
 8001b68:	2500      	movs	r5, #0
 8001b6a:	f104 0619 	add.w	r6, r4, #25
 8001b6e:	e7f5      	b.n	8001b5c <_printf_i+0x220>
 8001b70:	08001fda 	.word	0x08001fda
 8001b74:	08001feb 	.word	0x08001feb

08001b78 <__sflush_r>:
 8001b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	0716      	lsls	r6, r2, #28
 8001b80:	4605      	mov	r5, r0
 8001b82:	460c      	mov	r4, r1
 8001b84:	d454      	bmi.n	8001c30 <__sflush_r+0xb8>
 8001b86:	684b      	ldr	r3, [r1, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	dc02      	bgt.n	8001b92 <__sflush_r+0x1a>
 8001b8c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dd48      	ble.n	8001c24 <__sflush_r+0xac>
 8001b92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b94:	2e00      	cmp	r6, #0
 8001b96:	d045      	beq.n	8001c24 <__sflush_r+0xac>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001b9e:	682f      	ldr	r7, [r5, #0]
 8001ba0:	6a21      	ldr	r1, [r4, #32]
 8001ba2:	602b      	str	r3, [r5, #0]
 8001ba4:	d030      	beq.n	8001c08 <__sflush_r+0x90>
 8001ba6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ba8:	89a3      	ldrh	r3, [r4, #12]
 8001baa:	0759      	lsls	r1, r3, #29
 8001bac:	d505      	bpl.n	8001bba <__sflush_r+0x42>
 8001bae:	6863      	ldr	r3, [r4, #4]
 8001bb0:	1ad2      	subs	r2, r2, r3
 8001bb2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001bb4:	b10b      	cbz	r3, 8001bba <__sflush_r+0x42>
 8001bb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	2300      	movs	r3, #0
 8001bbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001bbe:	6a21      	ldr	r1, [r4, #32]
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	47b0      	blx	r6
 8001bc4:	1c43      	adds	r3, r0, #1
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	d106      	bne.n	8001bd8 <__sflush_r+0x60>
 8001bca:	6829      	ldr	r1, [r5, #0]
 8001bcc:	291d      	cmp	r1, #29
 8001bce:	d82b      	bhi.n	8001c28 <__sflush_r+0xb0>
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <__sflush_r+0xfc>)
 8001bd2:	40ca      	lsrs	r2, r1
 8001bd4:	07d6      	lsls	r6, r2, #31
 8001bd6:	d527      	bpl.n	8001c28 <__sflush_r+0xb0>
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6062      	str	r2, [r4, #4]
 8001bdc:	04d9      	lsls	r1, r3, #19
 8001bde:	6922      	ldr	r2, [r4, #16]
 8001be0:	6022      	str	r2, [r4, #0]
 8001be2:	d504      	bpl.n	8001bee <__sflush_r+0x76>
 8001be4:	1c42      	adds	r2, r0, #1
 8001be6:	d101      	bne.n	8001bec <__sflush_r+0x74>
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	b903      	cbnz	r3, 8001bee <__sflush_r+0x76>
 8001bec:	6560      	str	r0, [r4, #84]	@ 0x54
 8001bee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001bf0:	602f      	str	r7, [r5, #0]
 8001bf2:	b1b9      	cbz	r1, 8001c24 <__sflush_r+0xac>
 8001bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001bf8:	4299      	cmp	r1, r3
 8001bfa:	d002      	beq.n	8001c02 <__sflush_r+0x8a>
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	f7ff fbf7 	bl	80013f0 <_free_r>
 8001c02:	2300      	movs	r3, #0
 8001c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8001c06:	e00d      	b.n	8001c24 <__sflush_r+0xac>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	47b0      	blx	r6
 8001c0e:	4602      	mov	r2, r0
 8001c10:	1c50      	adds	r0, r2, #1
 8001c12:	d1c9      	bne.n	8001ba8 <__sflush_r+0x30>
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0c6      	beq.n	8001ba8 <__sflush_r+0x30>
 8001c1a:	2b1d      	cmp	r3, #29
 8001c1c:	d001      	beq.n	8001c22 <__sflush_r+0xaa>
 8001c1e:	2b16      	cmp	r3, #22
 8001c20:	d11d      	bne.n	8001c5e <__sflush_r+0xe6>
 8001c22:	602f      	str	r7, [r5, #0]
 8001c24:	2000      	movs	r0, #0
 8001c26:	e021      	b.n	8001c6c <__sflush_r+0xf4>
 8001c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	e01a      	b.n	8001c66 <__sflush_r+0xee>
 8001c30:	690f      	ldr	r7, [r1, #16]
 8001c32:	2f00      	cmp	r7, #0
 8001c34:	d0f6      	beq.n	8001c24 <__sflush_r+0xac>
 8001c36:	0793      	lsls	r3, r2, #30
 8001c38:	680e      	ldr	r6, [r1, #0]
 8001c3a:	bf08      	it	eq
 8001c3c:	694b      	ldreq	r3, [r1, #20]
 8001c3e:	600f      	str	r7, [r1, #0]
 8001c40:	bf18      	it	ne
 8001c42:	2300      	movne	r3, #0
 8001c44:	1bf6      	subs	r6, r6, r7
 8001c46:	608b      	str	r3, [r1, #8]
 8001c48:	2e00      	cmp	r6, #0
 8001c4a:	ddeb      	ble.n	8001c24 <__sflush_r+0xac>
 8001c4c:	6a21      	ldr	r1, [r4, #32]
 8001c4e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001c52:	4633      	mov	r3, r6
 8001c54:	463a      	mov	r2, r7
 8001c56:	4628      	mov	r0, r5
 8001c58:	47e0      	blx	ip
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	dc07      	bgt.n	8001c6e <__sflush_r+0xf6>
 8001c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c66:	81a3      	strh	r3, [r4, #12]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c6e:	4407      	add	r7, r0
 8001c70:	1a36      	subs	r6, r6, r0
 8001c72:	e7e9      	b.n	8001c48 <__sflush_r+0xd0>
 8001c74:	20400001 	.word	0x20400001

08001c78 <_fflush_r>:
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	690b      	ldr	r3, [r1, #16]
 8001c7c:	4605      	mov	r5, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	b913      	cbnz	r3, 8001c88 <_fflush_r+0x10>
 8001c82:	2500      	movs	r5, #0
 8001c84:	4628      	mov	r0, r5
 8001c86:	bd38      	pop	{r3, r4, r5, pc}
 8001c88:	b118      	cbz	r0, 8001c92 <_fflush_r+0x1a>
 8001c8a:	6a03      	ldr	r3, [r0, #32]
 8001c8c:	b90b      	cbnz	r3, 8001c92 <_fflush_r+0x1a>
 8001c8e:	f7ff faa7 	bl	80011e0 <__sinit>
 8001c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f3      	beq.n	8001c82 <_fflush_r+0xa>
 8001c9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c9c:	07d0      	lsls	r0, r2, #31
 8001c9e:	d404      	bmi.n	8001caa <_fflush_r+0x32>
 8001ca0:	0599      	lsls	r1, r3, #22
 8001ca2:	d402      	bmi.n	8001caa <_fflush_r+0x32>
 8001ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ca6:	f7ff fba0 	bl	80013ea <__retarget_lock_acquire_recursive>
 8001caa:	4628      	mov	r0, r5
 8001cac:	4621      	mov	r1, r4
 8001cae:	f7ff ff63 	bl	8001b78 <__sflush_r>
 8001cb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cb4:	07da      	lsls	r2, r3, #31
 8001cb6:	4605      	mov	r5, r0
 8001cb8:	d4e4      	bmi.n	8001c84 <_fflush_r+0xc>
 8001cba:	89a3      	ldrh	r3, [r4, #12]
 8001cbc:	059b      	lsls	r3, r3, #22
 8001cbe:	d4e1      	bmi.n	8001c84 <_fflush_r+0xc>
 8001cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cc2:	f7ff fb93 	bl	80013ec <__retarget_lock_release_recursive>
 8001cc6:	e7dd      	b.n	8001c84 <_fflush_r+0xc>

08001cc8 <__swbuf_r>:
 8001cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cca:	460e      	mov	r6, r1
 8001ccc:	4614      	mov	r4, r2
 8001cce:	4605      	mov	r5, r0
 8001cd0:	b118      	cbz	r0, 8001cda <__swbuf_r+0x12>
 8001cd2:	6a03      	ldr	r3, [r0, #32]
 8001cd4:	b90b      	cbnz	r3, 8001cda <__swbuf_r+0x12>
 8001cd6:	f7ff fa83 	bl	80011e0 <__sinit>
 8001cda:	69a3      	ldr	r3, [r4, #24]
 8001cdc:	60a3      	str	r3, [r4, #8]
 8001cde:	89a3      	ldrh	r3, [r4, #12]
 8001ce0:	071a      	lsls	r2, r3, #28
 8001ce2:	d501      	bpl.n	8001ce8 <__swbuf_r+0x20>
 8001ce4:	6923      	ldr	r3, [r4, #16]
 8001ce6:	b943      	cbnz	r3, 8001cfa <__swbuf_r+0x32>
 8001ce8:	4621      	mov	r1, r4
 8001cea:	4628      	mov	r0, r5
 8001cec:	f000 f82a 	bl	8001d44 <__swsetup_r>
 8001cf0:	b118      	cbz	r0, 8001cfa <__swbuf_r+0x32>
 8001cf2:	f04f 37ff 	mov.w	r7, #4294967295
 8001cf6:	4638      	mov	r0, r7
 8001cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	6922      	ldr	r2, [r4, #16]
 8001cfe:	1a98      	subs	r0, r3, r2
 8001d00:	6963      	ldr	r3, [r4, #20]
 8001d02:	b2f6      	uxtb	r6, r6
 8001d04:	4283      	cmp	r3, r0
 8001d06:	4637      	mov	r7, r6
 8001d08:	dc05      	bgt.n	8001d16 <__swbuf_r+0x4e>
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff ffb3 	bl	8001c78 <_fflush_r>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	d1ed      	bne.n	8001cf2 <__swbuf_r+0x2a>
 8001d16:	68a3      	ldr	r3, [r4, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60a3      	str	r3, [r4, #8]
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	6022      	str	r2, [r4, #0]
 8001d22:	701e      	strb	r6, [r3, #0]
 8001d24:	6962      	ldr	r2, [r4, #20]
 8001d26:	1c43      	adds	r3, r0, #1
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d004      	beq.n	8001d36 <__swbuf_r+0x6e>
 8001d2c:	89a3      	ldrh	r3, [r4, #12]
 8001d2e:	07db      	lsls	r3, r3, #31
 8001d30:	d5e1      	bpl.n	8001cf6 <__swbuf_r+0x2e>
 8001d32:	2e0a      	cmp	r6, #10
 8001d34:	d1df      	bne.n	8001cf6 <__swbuf_r+0x2e>
 8001d36:	4621      	mov	r1, r4
 8001d38:	4628      	mov	r0, r5
 8001d3a:	f7ff ff9d 	bl	8001c78 <_fflush_r>
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d0d9      	beq.n	8001cf6 <__swbuf_r+0x2e>
 8001d42:	e7d6      	b.n	8001cf2 <__swbuf_r+0x2a>

08001d44 <__swsetup_r>:
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <__swsetup_r+0xa8>)
 8001d48:	4605      	mov	r5, r0
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	b118      	cbz	r0, 8001d58 <__swsetup_r+0x14>
 8001d50:	6a03      	ldr	r3, [r0, #32]
 8001d52:	b90b      	cbnz	r3, 8001d58 <__swsetup_r+0x14>
 8001d54:	f7ff fa44 	bl	80011e0 <__sinit>
 8001d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d5c:	0719      	lsls	r1, r3, #28
 8001d5e:	d422      	bmi.n	8001da6 <__swsetup_r+0x62>
 8001d60:	06da      	lsls	r2, r3, #27
 8001d62:	d407      	bmi.n	8001d74 <__swsetup_r+0x30>
 8001d64:	2209      	movs	r2, #9
 8001d66:	602a      	str	r2, [r5, #0]
 8001d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d6c:	81a3      	strh	r3, [r4, #12]
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d72:	e033      	b.n	8001ddc <__swsetup_r+0x98>
 8001d74:	0758      	lsls	r0, r3, #29
 8001d76:	d512      	bpl.n	8001d9e <__swsetup_r+0x5a>
 8001d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d7a:	b141      	cbz	r1, 8001d8e <__swsetup_r+0x4a>
 8001d7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d80:	4299      	cmp	r1, r3
 8001d82:	d002      	beq.n	8001d8a <__swsetup_r+0x46>
 8001d84:	4628      	mov	r0, r5
 8001d86:	f7ff fb33 	bl	80013f0 <_free_r>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d94:	81a3      	strh	r3, [r4, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	6063      	str	r3, [r4, #4]
 8001d9a:	6923      	ldr	r3, [r4, #16]
 8001d9c:	6023      	str	r3, [r4, #0]
 8001d9e:	89a3      	ldrh	r3, [r4, #12]
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	81a3      	strh	r3, [r4, #12]
 8001da6:	6923      	ldr	r3, [r4, #16]
 8001da8:	b94b      	cbnz	r3, 8001dbe <__swsetup_r+0x7a>
 8001daa:	89a3      	ldrh	r3, [r4, #12]
 8001dac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001db4:	d003      	beq.n	8001dbe <__swsetup_r+0x7a>
 8001db6:	4621      	mov	r1, r4
 8001db8:	4628      	mov	r0, r5
 8001dba:	f000 f84f 	bl	8001e5c <__smakebuf_r>
 8001dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dc2:	f013 0201 	ands.w	r2, r3, #1
 8001dc6:	d00a      	beq.n	8001dde <__swsetup_r+0x9a>
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60a2      	str	r2, [r4, #8]
 8001dcc:	6962      	ldr	r2, [r4, #20]
 8001dce:	4252      	negs	r2, r2
 8001dd0:	61a2      	str	r2, [r4, #24]
 8001dd2:	6922      	ldr	r2, [r4, #16]
 8001dd4:	b942      	cbnz	r2, 8001de8 <__swsetup_r+0xa4>
 8001dd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001dda:	d1c5      	bne.n	8001d68 <__swsetup_r+0x24>
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
 8001dde:	0799      	lsls	r1, r3, #30
 8001de0:	bf58      	it	pl
 8001de2:	6962      	ldrpl	r2, [r4, #20]
 8001de4:	60a2      	str	r2, [r4, #8]
 8001de6:	e7f4      	b.n	8001dd2 <__swsetup_r+0x8e>
 8001de8:	2000      	movs	r0, #0
 8001dea:	e7f7      	b.n	8001ddc <__swsetup_r+0x98>
 8001dec:	20000028 	.word	0x20000028

08001df0 <_sbrk_r>:
 8001df0:	b538      	push	{r3, r4, r5, lr}
 8001df2:	4d06      	ldr	r5, [pc, #24]	@ (8001e0c <_sbrk_r+0x1c>)
 8001df4:	2300      	movs	r3, #0
 8001df6:	4604      	mov	r4, r0
 8001df8:	4608      	mov	r0, r1
 8001dfa:	602b      	str	r3, [r5, #0]
 8001dfc:	f7fe fb82 	bl	8000504 <_sbrk>
 8001e00:	1c43      	adds	r3, r0, #1
 8001e02:	d102      	bne.n	8001e0a <_sbrk_r+0x1a>
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	b103      	cbz	r3, 8001e0a <_sbrk_r+0x1a>
 8001e08:	6023      	str	r3, [r4, #0]
 8001e0a:	bd38      	pop	{r3, r4, r5, pc}
 8001e0c:	200001f4 	.word	0x200001f4

08001e10 <__swhatbuf_r>:
 8001e10:	b570      	push	{r4, r5, r6, lr}
 8001e12:	460c      	mov	r4, r1
 8001e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e18:	2900      	cmp	r1, #0
 8001e1a:	b096      	sub	sp, #88	@ 0x58
 8001e1c:	4615      	mov	r5, r2
 8001e1e:	461e      	mov	r6, r3
 8001e20:	da0d      	bge.n	8001e3e <__swhatbuf_r+0x2e>
 8001e22:	89a3      	ldrh	r3, [r4, #12]
 8001e24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2340      	movne	r3, #64	@ 0x40
 8001e30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001e34:	2000      	movs	r0, #0
 8001e36:	6031      	str	r1, [r6, #0]
 8001e38:	602b      	str	r3, [r5, #0]
 8001e3a:	b016      	add	sp, #88	@ 0x58
 8001e3c:	bd70      	pop	{r4, r5, r6, pc}
 8001e3e:	466a      	mov	r2, sp
 8001e40:	f000 f848 	bl	8001ed4 <_fstat_r>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	dbec      	blt.n	8001e22 <__swhatbuf_r+0x12>
 8001e48:	9901      	ldr	r1, [sp, #4]
 8001e4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001e4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e52:	4259      	negs	r1, r3
 8001e54:	4159      	adcs	r1, r3
 8001e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e5a:	e7eb      	b.n	8001e34 <__swhatbuf_r+0x24>

08001e5c <__smakebuf_r>:
 8001e5c:	898b      	ldrh	r3, [r1, #12]
 8001e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e60:	079d      	lsls	r5, r3, #30
 8001e62:	4606      	mov	r6, r0
 8001e64:	460c      	mov	r4, r1
 8001e66:	d507      	bpl.n	8001e78 <__smakebuf_r+0x1c>
 8001e68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001e6c:	6023      	str	r3, [r4, #0]
 8001e6e:	6123      	str	r3, [r4, #16]
 8001e70:	2301      	movs	r3, #1
 8001e72:	6163      	str	r3, [r4, #20]
 8001e74:	b003      	add	sp, #12
 8001e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e78:	ab01      	add	r3, sp, #4
 8001e7a:	466a      	mov	r2, sp
 8001e7c:	f7ff ffc8 	bl	8001e10 <__swhatbuf_r>
 8001e80:	9f00      	ldr	r7, [sp, #0]
 8001e82:	4605      	mov	r5, r0
 8001e84:	4639      	mov	r1, r7
 8001e86:	4630      	mov	r0, r6
 8001e88:	f7ff fb1e 	bl	80014c8 <_malloc_r>
 8001e8c:	b948      	cbnz	r0, 8001ea2 <__smakebuf_r+0x46>
 8001e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e92:	059a      	lsls	r2, r3, #22
 8001e94:	d4ee      	bmi.n	8001e74 <__smakebuf_r+0x18>
 8001e96:	f023 0303 	bic.w	r3, r3, #3
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	81a3      	strh	r3, [r4, #12]
 8001ea0:	e7e2      	b.n	8001e68 <__smakebuf_r+0xc>
 8001ea2:	89a3      	ldrh	r3, [r4, #12]
 8001ea4:	6020      	str	r0, [r4, #0]
 8001ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eaa:	81a3      	strh	r3, [r4, #12]
 8001eac:	9b01      	ldr	r3, [sp, #4]
 8001eae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001eb2:	b15b      	cbz	r3, 8001ecc <__smakebuf_r+0x70>
 8001eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f000 f81d 	bl	8001ef8 <_isatty_r>
 8001ebe:	b128      	cbz	r0, 8001ecc <__smakebuf_r+0x70>
 8001ec0:	89a3      	ldrh	r3, [r4, #12]
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	81a3      	strh	r3, [r4, #12]
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	431d      	orrs	r5, r3
 8001ed0:	81a5      	strh	r5, [r4, #12]
 8001ed2:	e7cf      	b.n	8001e74 <__smakebuf_r+0x18>

08001ed4 <_fstat_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4d07      	ldr	r5, [pc, #28]	@ (8001ef4 <_fstat_r+0x20>)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4604      	mov	r4, r0
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	602b      	str	r3, [r5, #0]
 8001ee2:	f7fe fae9 	bl	80004b8 <_fstat>
 8001ee6:	1c43      	adds	r3, r0, #1
 8001ee8:	d102      	bne.n	8001ef0 <_fstat_r+0x1c>
 8001eea:	682b      	ldr	r3, [r5, #0]
 8001eec:	b103      	cbz	r3, 8001ef0 <_fstat_r+0x1c>
 8001eee:	6023      	str	r3, [r4, #0]
 8001ef0:	bd38      	pop	{r3, r4, r5, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200001f4 	.word	0x200001f4

08001ef8 <_isatty_r>:
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	4d06      	ldr	r5, [pc, #24]	@ (8001f14 <_isatty_r+0x1c>)
 8001efc:	2300      	movs	r3, #0
 8001efe:	4604      	mov	r4, r0
 8001f00:	4608      	mov	r0, r1
 8001f02:	602b      	str	r3, [r5, #0]
 8001f04:	f7fe fae7 	bl	80004d6 <_isatty>
 8001f08:	1c43      	adds	r3, r0, #1
 8001f0a:	d102      	bne.n	8001f12 <_isatty_r+0x1a>
 8001f0c:	682b      	ldr	r3, [r5, #0]
 8001f0e:	b103      	cbz	r3, 8001f12 <_isatty_r+0x1a>
 8001f10:	6023      	str	r3, [r4, #0]
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
 8001f14:	200001f4 	.word	0x200001f4

08001f18 <_init>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	bf00      	nop
 8001f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1e:	bc08      	pop	{r3}
 8001f20:	469e      	mov	lr, r3
 8001f22:	4770      	bx	lr

08001f24 <_fini>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	bf00      	nop
 8001f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2a:	bc08      	pop	{r3}
 8001f2c:	469e      	mov	lr, r3
 8001f2e:	4770      	bx	lr
