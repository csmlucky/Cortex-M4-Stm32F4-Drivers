
stm32f4_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800257c  0800257c  0000357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002604  08002604  00004084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002604  08002604  00003604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800260c  0800260c  00004084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800260c  0800260c  0000360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002610  08002610  00003610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08002614  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000084  08002698  00004084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08002698  00004620  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022c1  00000000  00000000  000040ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008ba  00000000  00000000  0000636f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  00006c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001f3  00000000  00000000  00006ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000259f  00000000  00000000  000070c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000cad  00000000  00000000  00009662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0000a30f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001138  00000000  00000000  0000a354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  0000b48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002564 	.word	0x08002564

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08002564 	.word	0x08002564

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <USART2_GPIOInits>:


/*
 * Initialize GPIO pins as Usart 2 pins
 */
void USART2_GPIOInits(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART2Pin;

	USART2Pin.pGPIOx = GPIOA;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	@ (80002fc <USART2_GPIOInits+0x3c>)
 80002c8:	607b      	str	r3, [r7, #4]
	USART2Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ca:	2302      	movs	r3, #2
 80002cc:	727b      	strb	r3, [r7, #9]
	USART2Pin.GPIO_PinConfig.GPIO_AltrFnMode = 7;
 80002ce:	2307      	movs	r3, #7
 80002d0:	737b      	strb	r3, [r7, #13]
	USART2Pin.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 80002d2:	2302      	movs	r3, #2
 80002d4:	72fb      	strb	r3, [r7, #11]
	USART2Pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 80002d6:	2300      	movs	r3, #0
 80002d8:	733b      	strb	r3, [r7, #12]

	USART2Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80002da:	2302      	movs	r3, #2
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2Pin);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fad7 	bl	8000894 <GPIO_Init>

	USART2Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80002e6:	2303      	movs	r3, #3
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2Pin);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fad1 	bl	8000894 <GPIO_Init>

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020000 	.word	0x40020000

08000300 <GPIO_Button_Inits>:

/*
 * GPIO-Button INit
 */
void GPIO_Button_Inits(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 8000306:	4b09      	ldr	r3, [pc, #36]	@ (800032c <GPIO_Button_Inits+0x2c>)
 8000308:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800030a:	230d      	movs	r3, #13
 800030c:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800030e:	2300      	movs	r3, #0
 8000310:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 8000312:	2302      	movs	r3, #2
 8000314:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 8000316:	2300      	movs	r3, #0
 8000318:	733b      	strb	r3, [r7, #12]

	GPIO_Init(&GpioButton);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fab9 	bl	8000894 <GPIO_Init>

}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40020800 	.word	0x40020800

08000330 <delay>:


/*
 * delay
 */
void delay (void){
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
	/* ~200 msec when sys clock is 16 MHZ */
	for(uint32_t i = 0; i < 500000/2; i ++);
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	e002      	b.n	8000342 <delay+0x12>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <delay+0x28>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d9f8      	bls.n	800033c <delay+0xc>
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	0003d08f 	.word	0x0003d08f

0800035c <WAIT_ForButtonPress>:

/*
 * WAIT_ForButtonPress
 * Polling button
 */
void WAIT_ForButtonPress (void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_NOT_PRESSED);
 8000360:	bf00      	nop
 8000362:	210d      	movs	r1, #13
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <WAIT_ForButtonPress+0x1c>)
 8000366:	f000 fc4f 	bl	8000c08 <GPIO_ReadFromInputPin>
 800036a:	4603      	mov	r3, r0
 800036c:	2b01      	cmp	r3, #1
 800036e:	d0f8      	beq.n	8000362 <WAIT_ForButtonPress+0x6>

	/* debounce */
	delay();
 8000370:	f7ff ffde 	bl	8000330 <delay>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40020800 	.word	0x40020800

0800037c <USART2_Inits>:

/*
 * Usart 2 init
 */

void USART2_Inits(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0



	USART2Handle.pUSARTx = USART2;
 8000380:	4b0d      	ldr	r3, [pc, #52]	@ (80003b8 <USART2_Inits+0x3c>)
 8000382:	4a0e      	ldr	r2, [pc, #56]	@ (80003bc <USART2_Inits+0x40>)
 8000384:	601a      	str	r2, [r3, #0]

	USART2Handle.USART_Config.USART_BaudRate = USART_BAUD_115200;
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <USART2_Inits+0x3c>)
 8000388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800038c:	605a      	str	r2, [r3, #4]
	USART2Handle.USART_Config.USART_DataSize = USART_DATA_8BITS;
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <USART2_Inits+0x3c>)
 8000390:	2200      	movs	r2, #0
 8000392:	725a      	strb	r2, [r3, #9]
	USART2Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000394:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <USART2_Inits+0x3c>)
 8000396:	2200      	movs	r2, #0
 8000398:	731a      	strb	r2, [r3, #12]
	USART2Handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 800039a:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <USART2_Inits+0x3c>)
 800039c:	2202      	movs	r2, #2
 800039e:	721a      	strb	r2, [r3, #8]
	USART2Handle.USART_Config.USART_NoOfStopbits = USART_STOPBITS_1;
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <USART2_Inits+0x3c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	729a      	strb	r2, [r3, #10]
	USART2Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80003a6:	4b04      	ldr	r3, [pc, #16]	@ (80003b8 <USART2_Inits+0x3c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	72da      	strb	r2, [r3, #11]

	USART_Init(&USART2Handle);
 80003ac:	4802      	ldr	r0, [pc, #8]	@ (80003b8 <USART2_Inits+0x3c>)
 80003ae:	f000 fd85 	bl	8000ebc <USART_Init>


}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200004a0 	.word	0x200004a0
 80003bc:	40004400 	.word	0x40004400

080003c0 <main>:



int main (void){
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0

	uint8_t dummy_read;

	/* Initialize the button */
	GPIO_Button_Inits();
 80003c6:	f7ff ff9b 	bl	8000300 <GPIO_Button_Inits>

	/* Initialize I2C pins : Configure the GPIO pins to behave as I2C1 */
	USART2_GPIOInits();
 80003ca:	f7ff ff79 	bl	80002c0 <USART2_GPIOInits>

	/* Configure I2C peripheral */
	USART2_Inits();
 80003ce:	f7ff ffd5 	bl	800037c <USART2_Inits>


	/* Enable USART2 peripheral control */
	USART_PeripheralControl(USART2, ENABLE);
 80003d2:	2101      	movs	r1, #1
 80003d4:	4837      	ldr	r0, [pc, #220]	@ (80004b4 <main+0xf4>)
 80003d6:	f000 fdfa 	bl	8000fce <USART_PeripheralControl>

	/* configure priority for usart2 irq*/
	USART_IRQPriorityConfig(IRQ_NO_USART2, NVIC_IRQ_PR10);
 80003da:	210a      	movs	r1, #10
 80003dc:	2026      	movs	r0, #38	@ 0x26
 80003de:	f001 f883 	bl	80014e8 <USART_IRQPriorityConfig>

	/*Enable USART2 IRQ */
	USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE);
 80003e2:	2101      	movs	r1, #1
 80003e4:	2026      	movs	r0, #38	@ 0x26
 80003e6:	f000 ffd5 	bl	8001394 <USART_IRQInterruptConfig>

	while(1){

		WAIT_ForButtonPress();
 80003ea:	f7ff ffb7 	bl	800035c <WAIT_ForButtonPress>

		/* wait until uart tx free before tranmitting msg*/
		while (USART_SendDataIT(&USART2Handle, (uint8_t *)tx_msg[msg_cnt], strlen(tx_msg[msg_cnt])) == USART_STATUS_BUSY_TX) ;
 80003ee:	bf00      	nop
 80003f0:	4b31      	ldr	r3, [pc, #196]	@ (80004b8 <main+0xf8>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b31      	ldr	r3, [pc, #196]	@ (80004bc <main+0xfc>)
 80003f8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80003fc:	4b2e      	ldr	r3, [pc, #184]	@ (80004b8 <main+0xf8>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	461a      	mov	r2, r3
 8000402:	4b2e      	ldr	r3, [pc, #184]	@ (80004bc <main+0xfc>)
 8000404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff01 	bl	8000210 <strlen>
 800040e:	4603      	mov	r3, r0
 8000410:	461a      	mov	r2, r3
 8000412:	4621      	mov	r1, r4
 8000414:	482a      	ldr	r0, [pc, #168]	@ (80004c0 <main+0x100>)
 8000416:	f000 fe7d 	bl	8001114 <USART_SendDataIT>
 800041a:	4603      	mov	r3, r0
 800041c:	2b01      	cmp	r3, #1
 800041e:	d0e7      	beq.n	80003f0 <main+0x30>

		/* will receive the same msg that is transmitted */
		rx_len = strlen(tx_msg[msg_cnt]);
 8000420:	4b25      	ldr	r3, [pc, #148]	@ (80004b8 <main+0xf8>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b25      	ldr	r3, [pc, #148]	@ (80004bc <main+0xfc>)
 8000428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff feef 	bl	8000210 <strlen>
 8000432:	4603      	mov	r3, r0
 8000434:	4a23      	ldr	r2, [pc, #140]	@ (80004c4 <main+0x104>)
 8000436:	6013      	str	r3, [r2, #0]

		/*uart flush */
		dummy_read = USART2Handle.pUSARTx-> SR;
 8000438:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <main+0x100>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	71fb      	strb	r3, [r7, #7]
		dummy_read = USART2Handle.pUSARTx ->DR;
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <main+0x100>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	71fb      	strb	r3, [r7, #7]
		(void)dummy_read;

		/* wait until uart rx free before receiving the message */
		while(USART_ReceiveDataIT(&USART2Handle, rx_data, rx_len) == USART_STATUS_BUSY_RX);
 8000448:	bf00      	nop
 800044a:	4b1e      	ldr	r3, [pc, #120]	@ (80004c4 <main+0x104>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	461a      	mov	r2, r3
 8000450:	491d      	ldr	r1, [pc, #116]	@ (80004c8 <main+0x108>)
 8000452:	481b      	ldr	r0, [pc, #108]	@ (80004c0 <main+0x100>)
 8000454:	f000 fe8a 	bl	800116c <USART_ReceiveDataIT>
 8000458:	4603      	mov	r3, r0
 800045a:	2b02      	cmp	r3, #2
 800045c:	d0f5      	beq.n	800044a <main+0x8a>

		/* wait until all the bytes are received from PC */
		/* When all the bytes are received rxCmplt will be SET in application callback */
		while(rx_cmplt != SET);
 800045e:	bf00      	nop
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <main+0x10c>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d1fb      	bne.n	8000460 <main+0xa0>
		rx_cmplt = RESET;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <main+0x10c>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]

		rx_data[rx_len] = '\0';
 800046e:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <main+0x104>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a15      	ldr	r2, [pc, #84]	@ (80004c8 <main+0x108>)
 8000474:	2100      	movs	r1, #0
 8000476:	54d1      	strb	r1, [r2, r3]
		printf("received msg:%s\n",rx_data);
 8000478:	4913      	ldr	r1, [pc, #76]	@ (80004c8 <main+0x108>)
 800047a:	4815      	ldr	r0, [pc, #84]	@ (80004d0 <main+0x110>)
 800047c:	f001 fa0c 	bl	8001898 <iprintf>
		memset(rx_data,0,strlen((char*)rx_data));
 8000480:	4811      	ldr	r0, [pc, #68]	@ (80004c8 <main+0x108>)
 8000482:	f7ff fec5 	bl	8000210 <strlen>
 8000486:	4603      	mov	r3, r0
 8000488:	461a      	mov	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	480e      	ldr	r0, [pc, #56]	@ (80004c8 <main+0x108>)
 800048e:	f001 fa58 	bl	8001942 <memset>

		/* msg count increment */
		msg_cnt = (msg_cnt + 1)% 3;
 8000492:	4b09      	ldr	r3, [pc, #36]	@ (80004b8 <main+0xf8>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	1c5a      	adds	r2, r3, #1
 8000498:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <main+0x114>)
 800049a:	fb83 3102 	smull	r3, r1, r3, r2
 800049e:	17d3      	asrs	r3, r2, #31
 80004a0:	1ac9      	subs	r1, r1, r3
 80004a2:	460b      	mov	r3, r1
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	440b      	add	r3, r1
 80004a8:	1ad1      	subs	r1, r2, r3
 80004aa:	b2ca      	uxtb	r2, r1
 80004ac:	4b02      	ldr	r3, [pc, #8]	@ (80004b8 <main+0xf8>)
 80004ae:	701a      	strb	r2, [r3, #0]
		WAIT_ForButtonPress();
 80004b0:	e79b      	b.n	80003ea <main+0x2a>
 80004b2:	bf00      	nop
 80004b4:	40004400 	.word	0x40004400
 80004b8:	200004c4 	.word	0x200004c4
 80004bc:	20000000 	.word	0x20000000
 80004c0:	200004a0 	.word	0x200004a0
 80004c4:	200004c8 	.word	0x200004c8
 80004c8:	200000a0 	.word	0x200000a0
 80004cc:	200004cc 	.word	0x200004cc
 80004d0:	080025c0 	.word	0x080025c0
 80004d4:	55555556 	.word	0x55555556

080004d8 <USART2_IRQHandler>:



/**************************Interrupt SR*********************************************/

void USART2_IRQHandler(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

	USART_IRQHandling(&USART2Handle);
 80004dc:	4802      	ldr	r0, [pc, #8]	@ (80004e8 <USART2_IRQHandler+0x10>)
 80004de:	f001 f830 	bl	8001542 <USART_IRQHandling>

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	200004a0 	.word	0x200004a0

080004ec <USART_ApplicationEventCallback>:


void USART_ApplicationEventCallback (USART_Handle_t *pUSARTHandle, uint8_t AppEv) {
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]

	if( AppEv == USART_EV_RX_CMPLT){
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d102      	bne.n	8000504 <USART_ApplicationEventCallback+0x18>
		rx_cmplt = SET;
 80004fe:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <USART_ApplicationEventCallback+0x24>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]

	}

}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200004cc 	.word	0x200004cc

08000514 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <ITM_SendChar+0x44>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <ITM_SendChar+0x44>)
 8000524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000528:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <ITM_SendChar+0x48>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a0b      	ldr	r2, [pc, #44]	@ (800055c <ITM_SendChar+0x48>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000536:	bf00      	nop
 8000538:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f8      	beq.n	8000538 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000546:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	6013      	str	r3, [r2, #0]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	e000edfc 	.word	0xe000edfc
 800055c:	e0000e00 	.word	0xe0000e00

08000560 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	e00a      	b.n	8000588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000572:	f3af 8000 	nop.w
 8000576:	4601      	mov	r1, r0
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	60ba      	str	r2, [r7, #8]
 800057e:	b2ca      	uxtb	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbf0      	blt.n	8000572 <_read+0x12>
  }

  return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b086      	sub	sp, #24
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	e009      	b.n	80005c0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	/* calling ITM trace mode to write into Serial wire viewer */
	ITM_SendChar(*ptr++);
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	60ba      	str	r2, [r7, #8]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffad 	bl	8000514 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	3301      	adds	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbf1      	blt.n	80005ac <_write+0x12>
  }
  return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <_close>:

int _close(int file)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005f8:	605a      	str	r2, [r3, #4]
  return 0;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <_isatty>:

int _isatty(int file)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061a:	b480      	push	{r7}
 800061c:	b085      	sub	sp, #20
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800063c:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <_sbrk+0x5c>)
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <_sbrk+0x60>)
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <_sbrk+0x64>)
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <_sbrk+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	429a      	cmp	r2, r3
 8000662:	d207      	bcs.n	8000674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000664:	f001 f9bc 	bl	80019e0 <__errno>
 8000668:	4603      	mov	r3, r0
 800066a:	220c      	movs	r2, #12
 800066c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	e009      	b.n	8000688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000674:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067a:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <_sbrk+0x64>)
 8000684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20020000 	.word	0x20020000
 8000694:	00000400 	.word	0x00000400
 8000698:	200004d0 	.word	0x200004d0
 800069c:	20000620 	.word	0x20000620

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ce:	f001 f98d 	bl	80019ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fe75 	bl	80003c0 <main>

080006d6 <LoopForever>:

LoopForever:
  b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80006e4:	08002614 	.word	0x08002614
  ldr r2, =_sbss
 80006e8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80006ec:	20000620 	.word	0x20000620

080006f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC_IRQHandler>
	...

080006f4 <GPIO_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d157      	bne.n	80007b6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a59      	ldr	r2, [pc, #356]	@ (8000870 <GPIO_PeriClockControl+0x17c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d106      	bne.n	800071c <GPIO_PeriClockControl+0x28>
 800070e:	4b59      	ldr	r3, [pc, #356]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a58      	ldr	r2, [pc, #352]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 800071a:	e0a3      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a56      	ldr	r2, [pc, #344]	@ (8000878 <GPIO_PeriClockControl+0x184>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d106      	bne.n	8000732 <GPIO_PeriClockControl+0x3e>
 8000724:	4b53      	ldr	r3, [pc, #332]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000728:	4a52      	ldr	r2, [pc, #328]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000730:	e098      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a51      	ldr	r2, [pc, #324]	@ (800087c <GPIO_PeriClockControl+0x188>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d106      	bne.n	8000748 <GPIO_PeriClockControl+0x54>
 800073a:	4b4e      	ldr	r3, [pc, #312]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a4d      	ldr	r2, [pc, #308]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000746:	e08d      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a4d      	ldr	r2, [pc, #308]	@ (8000880 <GPIO_PeriClockControl+0x18c>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d106      	bne.n	800075e <GPIO_PeriClockControl+0x6a>
 8000750:	4b48      	ldr	r3, [pc, #288]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000754:	4a47      	ldr	r2, [pc, #284]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800075c:	e082      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a48      	ldr	r2, [pc, #288]	@ (8000884 <GPIO_PeriClockControl+0x190>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d106      	bne.n	8000774 <GPIO_PeriClockControl+0x80>
 8000766:	4b43      	ldr	r3, [pc, #268]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a42      	ldr	r2, [pc, #264]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000772:	e077      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a44      	ldr	r2, [pc, #272]	@ (8000888 <GPIO_PeriClockControl+0x194>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d106      	bne.n	800078a <GPIO_PeriClockControl+0x96>
 800077c:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000780:	4a3c      	ldr	r2, [pc, #240]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000782:	f043 0320 	orr.w	r3, r3, #32
 8000786:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000788:	e06c      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_EN();
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a3f      	ldr	r2, [pc, #252]	@ (800088c <GPIO_PeriClockControl+0x198>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d106      	bne.n	80007a0 <GPIO_PeriClockControl+0xac>
 8000792:	4b38      	ldr	r3, [pc, #224]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a37      	ldr	r2, [pc, #220]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800079e:	e061      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000890 <GPIO_PeriClockControl+0x19c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d15d      	bne.n	8000864 <GPIO_PeriClockControl+0x170>
 80007a8:	4b32      	ldr	r3, [pc, #200]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ac:	4a31      	ldr	r2, [pc, #196]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 80007ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007b4:	e056      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000870 <GPIO_PeriClockControl+0x17c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d106      	bne.n	80007cc <GPIO_PeriClockControl+0xd8>
 80007be:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007ca:	e04b      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a2a      	ldr	r2, [pc, #168]	@ (8000878 <GPIO_PeriClockControl+0x184>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d106      	bne.n	80007e2 <GPIO_PeriClockControl+0xee>
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d8:	4a26      	ldr	r2, [pc, #152]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 80007da:	f023 0302 	bic.w	r3, r3, #2
 80007de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007e0:	e040      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a25      	ldr	r2, [pc, #148]	@ (800087c <GPIO_PeriClockControl+0x188>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <GPIO_PeriClockControl+0x104>
 80007ea:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a21      	ldr	r2, [pc, #132]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 80007f0:	f023 0304 	bic.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007f6:	e035      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a21      	ldr	r2, [pc, #132]	@ (8000880 <GPIO_PeriClockControl+0x18c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d106      	bne.n	800080e <GPIO_PeriClockControl+0x11a>
 8000800:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000806:	f023 0308 	bic.w	r3, r3, #8
 800080a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800080c:	e02a      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <GPIO_PeriClockControl+0x190>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <GPIO_PeriClockControl+0x130>
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a16      	ldr	r2, [pc, #88]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 800081c:	f023 0310 	bic.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000822:	e01f      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a18      	ldr	r2, [pc, #96]	@ (8000888 <GPIO_PeriClockControl+0x194>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <GPIO_PeriClockControl+0x146>
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000830:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000832:	f023 0320 	bic.w	r3, r3, #32
 8000836:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000838:	e014      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a13      	ldr	r2, [pc, #76]	@ (800088c <GPIO_PeriClockControl+0x198>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <GPIO_PeriClockControl+0x15c>
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 8000848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800084e:	e009      	b.n	8000864 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <GPIO_PeriClockControl+0x19c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d105      	bne.n	8000864 <GPIO_PeriClockControl+0x170>
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085c:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <GPIO_PeriClockControl+0x180>)
 800085e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000862:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40020000 	.word	0x40020000
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400
 800087c:	40020800 	.word	0x40020800
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40021000 	.word	0x40021000
 8000888:	40021400 	.word	0x40021400
 800088c:	40021800 	.word	0x40021800
 8000890:	40021c00 	.word	0x40021c00

08000894 <GPIO_Init>:
 *
 * @return		-
 *
 * @note		-
 ************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

	/* Enable GPIO peripheral Clock */
	GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff26 	bl	80006f4 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
	/* 1. Configure the mode for the given gpio pin */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	795b      	ldrb	r3, [r3, #5]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d820      	bhi.n	80008f6 <GPIO_Init+0x62>
		/*Normal GPIO configurations */
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	795b      	ldrb	r3, [r3, #5]
 80008b8:	461a      	mov	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //need to clear bit field before sets
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2103      	movs	r1, #3
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	400a      	ands	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6819      	ldr	r1, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	e0c8      	b.n	8000a88 <GPIO_Init+0x1f4>
	}
	else{
		/* Interrupt configuration */

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	795b      	ldrb	r3, [r3, #5]
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	d117      	bne.n	800092e <GPIO_Init+0x9a>
			/* 1. configure falling edge FTSR */
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80008fe:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <GPIO_Init+0x188>)
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	7912      	ldrb	r2, [r2, #4]
 8000906:	4611      	mov	r1, r2
 8000908:	2201      	movs	r2, #1
 800090a:	408a      	lsls	r2, r1
 800090c:	4611      	mov	r1, r2
 800090e:	4a43      	ldr	r2, [pc, #268]	@ (8000a1c <GPIO_Init+0x188>)
 8000910:	430b      	orrs	r3, r1
 8000912:	60d3      	str	r3, [r2, #12]

			/* clear same bit in RTSR */
			EXTI -> RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000914:	4b41      	ldr	r3, [pc, #260]	@ (8000a1c <GPIO_Init+0x188>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	7912      	ldrb	r2, [r2, #4]
 800091c:	4611      	mov	r1, r2
 800091e:	2201      	movs	r2, #1
 8000920:	408a      	lsls	r2, r1
 8000922:	43d2      	mvns	r2, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a3d      	ldr	r2, [pc, #244]	@ (8000a1c <GPIO_Init+0x188>)
 8000928:	400b      	ands	r3, r1
 800092a:	6093      	str	r3, [r2, #8]
 800092c:	e035      	b.n	800099a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	795b      	ldrb	r3, [r3, #5]
 8000932:	2b04      	cmp	r3, #4
 8000934:	d117      	bne.n	8000966 <GPIO_Init+0xd2>
			/* 1. configure raising edge RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000936:	4b39      	ldr	r3, [pc, #228]	@ (8000a1c <GPIO_Init+0x188>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	7912      	ldrb	r2, [r2, #4]
 800093e:	4611      	mov	r1, r2
 8000940:	2201      	movs	r2, #1
 8000942:	408a      	lsls	r2, r1
 8000944:	4611      	mov	r1, r2
 8000946:	4a35      	ldr	r2, [pc, #212]	@ (8000a1c <GPIO_Init+0x188>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6093      	str	r3, [r2, #8]

			/* clear same bit in FTSR */
			EXTI -> FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800094c:	4b33      	ldr	r3, [pc, #204]	@ (8000a1c <GPIO_Init+0x188>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	7912      	ldrb	r2, [r2, #4]
 8000954:	4611      	mov	r1, r2
 8000956:	2201      	movs	r2, #1
 8000958:	408a      	lsls	r2, r1
 800095a:	43d2      	mvns	r2, r2
 800095c:	4611      	mov	r1, r2
 800095e:	4a2f      	ldr	r2, [pc, #188]	@ (8000a1c <GPIO_Init+0x188>)
 8000960:	400b      	ands	r3, r1
 8000962:	60d3      	str	r3, [r2, #12]
 8000964:	e019      	b.n	800099a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	2b06      	cmp	r3, #6
 800096c:	d115      	bne.n	800099a <GPIO_Init+0x106>
			/* 1. configure both falling and raising edge FTSR, RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800096e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <GPIO_Init+0x188>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	7912      	ldrb	r2, [r2, #4]
 8000976:	4611      	mov	r1, r2
 8000978:	2201      	movs	r2, #1
 800097a:	408a      	lsls	r2, r1
 800097c:	4611      	mov	r1, r2
 800097e:	4a27      	ldr	r2, [pc, #156]	@ (8000a1c <GPIO_Init+0x188>)
 8000980:	430b      	orrs	r3, r1
 8000982:	6093      	str	r3, [r2, #8]
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000984:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <GPIO_Init+0x188>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	7912      	ldrb	r2, [r2, #4]
 800098c:	4611      	mov	r1, r2
 800098e:	2201      	movs	r2, #1
 8000990:	408a      	lsls	r2, r1
 8000992:	4611      	mov	r1, r2
 8000994:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <GPIO_Init+0x188>)
 8000996:	430b      	orrs	r3, r1
 8000998:	60d3      	str	r3, [r2, #12]
		}
		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 4; //selects SYSCFG_EXTIR 0 to 3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	791b      	ldrb	r3, [r3, #4]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4; //selects position in SYSCFG_EXTIR 0 to 3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <GPIO_Init+0x18c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d044      	beq.n	8000a40 <GPIO_Init+0x1ac>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000a24 <GPIO_Init+0x190>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d02b      	beq.n	8000a18 <GPIO_Init+0x184>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <GPIO_Init+0x194>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d024      	beq.n	8000a14 <GPIO_Init+0x180>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <GPIO_Init+0x198>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d01d      	beq.n	8000a10 <GPIO_Init+0x17c>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <GPIO_Init+0x19c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d016      	beq.n	8000a0c <GPIO_Init+0x178>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <GPIO_Init+0x1a0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00f      	beq.n	8000a08 <GPIO_Init+0x174>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <GPIO_Init+0x1a4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d008      	beq.n	8000a04 <GPIO_Init+0x170>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <GPIO_Init+0x1a8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d101      	bne.n	8000a00 <GPIO_Init+0x16c>
 80009fc:	2307      	movs	r3, #7
 80009fe:	e020      	b.n	8000a42 <GPIO_Init+0x1ae>
 8000a00:	2300      	movs	r3, #0
 8000a02:	e01e      	b.n	8000a42 <GPIO_Init+0x1ae>
 8000a04:	2306      	movs	r3, #6
 8000a06:	e01c      	b.n	8000a42 <GPIO_Init+0x1ae>
 8000a08:	2305      	movs	r3, #5
 8000a0a:	e01a      	b.n	8000a42 <GPIO_Init+0x1ae>
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	e018      	b.n	8000a42 <GPIO_Init+0x1ae>
 8000a10:	2303      	movs	r3, #3
 8000a12:	e016      	b.n	8000a42 <GPIO_Init+0x1ae>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e014      	b.n	8000a42 <GPIO_Init+0x1ae>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e012      	b.n	8000a42 <GPIO_Init+0x1ae>
 8000a1c:	40013c00 	.word	0x40013c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40021400 	.word	0x40021400
 8000a38:	40021800 	.word	0x40021800
 8000a3c:	40021c00 	.word	0x40021c00
 8000a40:	2300      	movs	r3, #0
 8000a42:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000a44:	4b6d      	ldr	r3, [pc, #436]	@ (8000bfc <GPIO_Init+0x368>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a48:	4a6c      	ldr	r2, [pc, #432]	@ (8000bfc <GPIO_Init+0x368>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG -> EXTICR[temp1] |= (portcode << (4 *temp2));
 8000a50:	4a6b      	ldr	r2, [pc, #428]	@ (8000c00 <GPIO_Init+0x36c>)
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	3302      	adds	r3, #2
 8000a56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5a:	7a79      	ldrb	r1, [r7, #9]
 8000a5c:	7abb      	ldrb	r3, [r7, #10]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	4966      	ldr	r1, [pc, #408]	@ (8000c00 <GPIO_Init+0x36c>)
 8000a68:	7afb      	ldrb	r3, [r7, #11]
 8000a6a:	4302      	orrs	r2, r0
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. Enable EXTI interrupt delivery using IMR */
		EXTI -> IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a72:	4b64      	ldr	r3, [pc, #400]	@ (8000c04 <GPIO_Init+0x370>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	7912      	ldrb	r2, [r2, #4]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	408a      	lsls	r2, r1
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a60      	ldr	r2, [pc, #384]	@ (8000c04 <GPIO_Init+0x370>)
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6013      	str	r3, [r2, #0]
	}

	/* 3. Configure the speed */
	temp = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	79db      	ldrb	r3, [r3, #7]
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	791b      	ldrb	r3, [r3, #4]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	2103      	movs	r1, #3
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	400a      	ands	r2, r1
 8000aba:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6899      	ldr	r1, [r3, #8]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	609a      	str	r2, [r3, #8]

	/* 4. Configure the Pull-up / Pull-down */
	temp = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7a1b      	ldrb	r3, [r3, #8]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	791b      	ldrb	r3, [r3, #4]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	791b      	ldrb	r3, [r3, #4]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	2103      	movs	r1, #3
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	400a      	ands	r2, r1
 8000afe:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68d9      	ldr	r1, [r3, #12]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	60da      	str	r2, [r3, #12]

	/* 5. Configure the output type */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN){
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	795b      	ldrb	r3, [r3, #5]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d81f      	bhi.n	8000b58 <GPIO_Init+0x2c4>
		temp = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	799b      	ldrb	r3, [r3, #6]
 8000b20:	461a      	mov	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	4619      	mov	r1, r3
 8000b38:	2301      	movs	r3, #1
 8000b3a:	408b      	lsls	r3, r1
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	4619      	mov	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	400a      	ands	r2, r1
 8000b46:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6859      	ldr	r1, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	605a      	str	r2, [r3, #4]
	}

	/* Configure Alternate Function mode */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	795b      	ldrb	r3, [r3, #5]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d149      	bne.n	8000bf4 <GPIO_Init+0x360>

		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	723b      	strb	r3, [r7, #8]

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber <= 7){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	791b      	ldrb	r3, [r3, #4]
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d820      	bhi.n	8000bb4 <GPIO_Init+0x320>
			temp = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7a5b      	ldrb	r3, [r3, #9]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	7a3b      	ldrb	r3, [r7, #8]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRL &= ~(0xf << (4 * temp1));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6a1a      	ldr	r2, [r3, #32]
 8000b8c:	7a3b      	ldrb	r3, [r7, #8]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	210f      	movs	r1, #15
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	4619      	mov	r1, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	621a      	str	r2, [r3, #32]
			pGPIOHandle -> pGPIOx ->AFRL |= temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6a19      	ldr	r1, [r3, #32]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
		}
	}
}
 8000bb2:	e01f      	b.n	8000bf4 <GPIO_Init+0x360>
			temp = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7a5b      	ldrb	r3, [r3, #9]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	7a3b      	ldrb	r3, [r7, #8]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bce:	7a3b      	ldrb	r3, [r7, #8]
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	400a      	ands	r2, r1
 8000be2:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40013800 	.word	0x40013800
 8000c04:	40013c00 	.word	0x40013c00

08000c08 <GPIO_ReadFromInputPin>:
 *
 * @return		- 0 or 1
 *
 * @note		-
 ************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t) ((pGPIOx -> IDR >> PinNumber) & 0x00000001);  //read pin value
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
	return value;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
	...

08000c34 <RCC_GetPCLK1Value>:
 *
 * @return		-uint32_t periperal clk1 value
 *
 * @note		-
 */
uint32_t  RCC_GetPCLK1Value (void){
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0

	uint32_t  pclk1, systemClk;
	uint16_t ahbp;
	uint8_t clkSrc, temp, apb1p;

	clkSrc = (RCC -> CFGR >> 2) & 0x3;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <RCC_GetPCLK1Value+0x90>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	723b      	strb	r3, [r7, #8]

	/* get system clk freq */
	if(clkSrc == 0) systemClk = HSI_CLK_FREQ;
 8000c48:	7a3b      	ldrb	r3, [r7, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <RCC_GetPCLK1Value+0x20>
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <RCC_GetPCLK1Value+0x94>)
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e004      	b.n	8000c5e <RCC_GetPCLK1Value+0x2a>
	else if(clkSrc == 1) systemClk = HSE_CLK_FREQ;
 8000c54:	7a3b      	ldrb	r3, [r7, #8]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d101      	bne.n	8000c5e <RCC_GetPCLK1Value+0x2a>
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <RCC_GetPCLK1Value+0x98>)
 8000c5c:	60fb      	str	r3, [r7, #12]

	/* get ahb prescaler */
	temp = (RCC -> CFGR >> 4) & 0xF;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <RCC_GetPCLK1Value+0x90>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	71fb      	strb	r3, [r7, #7]

	if(temp < 8) ahbp = 1;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d802      	bhi.n	8000c78 <RCC_GetPCLK1Value+0x44>
 8000c72:	2301      	movs	r3, #1
 8000c74:	817b      	strh	r3, [r7, #10]
 8000c76:	e005      	b.n	8000c84 <RCC_GetPCLK1Value+0x50>
	else ahbp = ahb_PreScaler[temp - 8];
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3b08      	subs	r3, #8
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <RCC_GetPCLK1Value+0x9c>)
 8000c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c82:	817b      	strh	r3, [r7, #10]

	/* get apb2 prescaler */
	temp = (RCC -> CFGR >> 13) & 0x7;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <RCC_GetPCLK1Value+0x90>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	0b5b      	lsrs	r3, r3, #13
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f003 0307 	and.w	r3, r3, #7
 8000c90:	71fb      	strb	r3, [r7, #7]

	if(temp < 4) apb1p = 1;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d802      	bhi.n	8000c9e <RCC_GetPCLK1Value+0x6a>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	727b      	strb	r3, [r7, #9]
 8000c9c:	e004      	b.n	8000ca8 <RCC_GetPCLK1Value+0x74>
	else apb1p = abp1_PreScaler[temp - 4];
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	3b04      	subs	r3, #4
 8000ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd4 <RCC_GetPCLK1Value+0xa0>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	727b      	strb	r3, [r7, #9]

	pclk1 = (systemClk / ahbp /apb1p);
 8000ca8:	897b      	ldrh	r3, [r7, #10]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cb0:	7a7b      	ldrb	r3, [r7, #9]
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000cb8:	683b      	ldr	r3, [r7, #0]


}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	00f42400 	.word	0x00f42400
 8000ccc:	007a1200 	.word	0x007a1200
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	20000020 	.word	0x20000020

08000cd8 <RCC_GetPCLK2Value>:
 *
 * @return		-uint32_t periperal clk2 value
 *
 * @note		-
 */
uint32_t  RCC_GetPCLK2Value (void){
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0

	uint32_t  pclk2, systemClk;
	uint16_t ahbp;
	uint8_t clkSrc, temp, apb2p;

	clkSrc = (RCC -> CFGR >> 2) & 0x3;
 8000cde:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <RCC_GetPCLK2Value+0x90>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	723b      	strb	r3, [r7, #8]

	if(clkSrc == 0) systemClk = HSI_CLK_FREQ;
 8000cec:	7a3b      	ldrb	r3, [r7, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <RCC_GetPCLK2Value+0x20>
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <RCC_GetPCLK2Value+0x94>)
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e004      	b.n	8000d02 <RCC_GetPCLK2Value+0x2a>
	else if(clkSrc == 1) systemClk = HSE_CLK_FREQ;
 8000cf8:	7a3b      	ldrb	r3, [r7, #8]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d101      	bne.n	8000d02 <RCC_GetPCLK2Value+0x2a>
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <RCC_GetPCLK2Value+0x98>)
 8000d00:	60fb      	str	r3, [r7, #12]

	temp = (RCC -> CFGR >> 4) & 0xF;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <RCC_GetPCLK2Value+0x90>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	71fb      	strb	r3, [r7, #7]

	if(temp < 8) ahbp = 1;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d802      	bhi.n	8000d1c <RCC_GetPCLK2Value+0x44>
 8000d16:	2301      	movs	r3, #1
 8000d18:	817b      	strh	r3, [r7, #10]
 8000d1a:	e005      	b.n	8000d28 <RCC_GetPCLK2Value+0x50>
	else ahbp = ahb_PreScaler[temp - 8];
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	3b08      	subs	r3, #8
 8000d20:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <RCC_GetPCLK2Value+0x9c>)
 8000d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d26:	817b      	strh	r3, [r7, #10]


	temp = (RCC -> CFGR >> 10) & 0x7;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <RCC_GetPCLK2Value+0x90>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	0a9b      	lsrs	r3, r3, #10
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	71fb      	strb	r3, [r7, #7]

	if(temp < 4) apb2p = 1;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d802      	bhi.n	8000d42 <RCC_GetPCLK2Value+0x6a>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	727b      	strb	r3, [r7, #9]
 8000d40:	e004      	b.n	8000d4c <RCC_GetPCLK2Value+0x74>
	else apb2p = abp2_PreScaler[temp - 4];
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	3b04      	subs	r3, #4
 8000d46:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <RCC_GetPCLK2Value+0xa0>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	727b      	strb	r3, [r7, #9]

	pclk2 = (systemClk / ahbp /apb2p);
 8000d4c:	897b      	ldrh	r3, [r7, #10]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d54:	7a7b      	ldrb	r3, [r7, #9]
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000d5c:	683b      	ldr	r3, [r7, #0]


}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	00f42400 	.word	0x00f42400
 8000d70:	007a1200 	.word	0x007a1200
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	20000024 	.word	0x20000024

08000d7c <USART_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE){
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d141      	bne.n	8000e12 <USART_PeriClockControl+0x96>
		if(pUSARTx == USART1) USART1_PCLK_EN();
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a43      	ldr	r2, [pc, #268]	@ (8000ea0 <USART_PeriClockControl+0x124>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d106      	bne.n	8000da4 <USART_PeriClockControl+0x28>
 8000d96:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a42      	ldr	r2, [pc, #264]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (pUSARTx == UART5) UART5_PCLK_DI();
		else if (pUSARTx == USART6) USART6_PCLK_DI();

	}

}
 8000da2:	e077      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2) USART2_PCLK_EN();
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a40      	ldr	r2, [pc, #256]	@ (8000ea8 <USART_PeriClockControl+0x12c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d106      	bne.n	8000dba <USART_PeriClockControl+0x3e>
 8000dac:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000db8:	e06c      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3) USART3_PCLK_EN();
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8000eac <USART_PeriClockControl+0x130>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d106      	bne.n	8000dd0 <USART_PeriClockControl+0x54>
 8000dc2:	4b38      	ldr	r3, [pc, #224]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a37      	ldr	r2, [pc, #220]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000dce:	e061      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4) UART4_PCLK_EN();
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a37      	ldr	r2, [pc, #220]	@ (8000eb0 <USART_PeriClockControl+0x134>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d106      	bne.n	8000de6 <USART_PeriClockControl+0x6a>
 8000dd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	4a31      	ldr	r2, [pc, #196]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000dde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000de2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000de4:	e056      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5) UART5_PCLK_EN();
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a32      	ldr	r2, [pc, #200]	@ (8000eb4 <USART_PeriClockControl+0x138>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d106      	bne.n	8000dfc <USART_PeriClockControl+0x80>
 8000dee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000df4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000dfa:	e04b      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6) USART6_PCLK_EN();
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8000eb8 <USART_PeriClockControl+0x13c>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d147      	bne.n	8000e94 <USART_PeriClockControl+0x118>
 8000e04:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e08:	4a26      	ldr	r2, [pc, #152]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e10:	e040      	b.n	8000e94 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1) USART1_PCLK_EN();
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <USART_PeriClockControl+0x124>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d106      	bne.n	8000e28 <USART_PeriClockControl+0xac>
 8000e1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e26:	e035      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2) USART2_PCLK_DI();
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea8 <USART_PeriClockControl+0x12c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d106      	bne.n	8000e3e <USART_PeriClockControl+0xc2>
 8000e30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e36:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000e3a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e3c:	e02a      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3) USART3_PCLK_DI();
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a1a      	ldr	r2, [pc, #104]	@ (8000eac <USART_PeriClockControl+0x130>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d106      	bne.n	8000e54 <USART_PeriClockControl+0xd8>
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e52:	e01f      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4) UART4_PCLK_DI();
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a16      	ldr	r2, [pc, #88]	@ (8000eb0 <USART_PeriClockControl+0x134>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d106      	bne.n	8000e6a <USART_PeriClockControl+0xee>
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e62:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000e66:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e68:	e014      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5) UART5_PCLK_DI();
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <USART_PeriClockControl+0x138>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <USART_PeriClockControl+0x104>
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000e7c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e7e:	e009      	b.n	8000e94 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6) USART6_PCLK_DI();
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <USART_PeriClockControl+0x13c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d105      	bne.n	8000e94 <USART_PeriClockControl+0x118>
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <USART_PeriClockControl+0x128>)
 8000e8e:	f023 0320 	bic.w	r3, r3, #32
 8000e92:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40004400 	.word	0x40004400
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	40004c00 	.word	0x40004c00
 8000eb4:	40005000 	.word	0x40005000
 8000eb8:	40011400 	.word	0x40011400

08000ebc <USART_Init>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]

	/*Enable Peripheral clock */
	USART_PeriClockControl(pUSARTHandle -> pUSARTx, ENABLE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff54 	bl	8000d7c <USART_PeriClockControl>

	/******************************** Configuration of CR1******************************************/

	/* Enable USART Tx and Rx engines according to the USART_Mode configuration item */
	if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7a1b      	ldrb	r3, [r3, #8]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d104      	bne.n	8000ee6 <USART_Init+0x2a>
	{
		/* enable the Receiver bit field*/
		tempreg |= (1 << USART_CR1_RE);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e010      	b.n	8000f08 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7a1b      	ldrb	r3, [r3, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d104      	bne.n	8000ef8 <USART_Init+0x3c>
	{
		/* enable the Transmitter bit field */
		tempreg |= ( 1 << USART_CR1_TE );
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	e007      	b.n	8000f08 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7a1b      	ldrb	r3, [r3, #8]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d103      	bne.n	8000f08 <USART_Init+0x4c>
	{
		/* enable the both Transmitter and Receiver bit fields */
		tempreg |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f043 030c 	orr.w	r3, r3, #12
 8000f06:	60fb      	str	r3, [r7, #12]
	}

	/* Word length configuration item */
	tempreg |= pUSARTHandle->USART_Config.USART_DataSize << USART_CR1_M ;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7a5b      	ldrb	r3, [r3, #9]
 8000f0c:	031b      	lsls	r3, r3, #12
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]


	/*Configuration of parity control bit fields */
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7adb      	ldrb	r3, [r3, #11]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d104      	bne.n	8000f26 <USART_Init+0x6a>
	{
		/* enale the parity control */
		tempreg |= ( 1 << USART_CR1_PCE);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e00b      	b.n	8000f3e <USART_Init+0x82>

		/*enable EVEN parity */
		/* Not required because by default EVEN parity will be selected once you enable the parity control */

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7adb      	ldrb	r3, [r3, #11]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d107      	bne.n	8000f3e <USART_Init+0x82>
	{
		/* enable the parity control */
		tempreg |= ( 1 << USART_CR1_PCE);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f34:	60fb      	str	r3, [r7, #12]

		/* enable ODD parity */
		tempreg |= ( 1 << USART_CR1_PS);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3c:	60fb      	str	r3, [r7, #12]

	}

   /*Program the CR1 register */
	pUSARTHandle->pUSARTx->CR1 |= tempreg;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68d9      	ldr	r1, [r3, #12]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	60da      	str	r2, [r3, #12]


	/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]

	/* configure the number of stop bits inserted during USART frame transmission */
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopbits << USART_CR2_STOP1_0;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7a9b      	ldrb	r3, [r3, #10]
 8000f56:	031b      	lsls	r3, r3, #12
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]

	/* Program the CR2 register */
	pUSARTHandle->pUSARTx->CR2 |= tempreg;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6919      	ldr	r1, [r3, #16]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]

	/* Configuration of USART hardware flow control */
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7b1b      	ldrb	r3, [r3, #12]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <USART_Init+0xc8>
	{
		/* enable CTS flow control */
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e014      	b.n	8000fae <USART_Init+0xf2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7b1b      	ldrb	r3, [r3, #12]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d104      	bne.n	8000f96 <USART_Init+0xda>
	{
		/* enable RTS flow control */
		tempreg |= (1 << USART_CR3_RTSE);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e00b      	b.n	8000fae <USART_Init+0xf2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7b1b      	ldrb	r3, [r3, #12]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d107      	bne.n	8000fae <USART_Init+0xf2>
	{
		/* enable both CTS and RTS Flow control */
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa4:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fac:	60fb      	str	r3, [r7, #12]

	}

	/* program the CR3 reg */
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	/*code to configure the baud rate */

	USART_SetBaudRate(pUSARTHandle ->pUSARTx, pUSARTHandle->USART_Config.USART_BaudRate);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	f000 f81f 	bl	8001004 <USART_SetBaudRate>

}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <USART_PeripheralControl>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d106      	bne.n	8000fee <USART_PeripheralControl+0x20>
		pUSARTx -> CR1 |= (1 << USART_CR1_UE);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	60da      	str	r2, [r3, #12]
	}
	else{
		pUSARTx -> CR1 &= ~(1 << USART_CR1_UE);
	}

}
 8000fec:	e005      	b.n	8000ffa <USART_PeripheralControl+0x2c>
		pUSARTx -> CR1 &= ~(1 << USART_CR1_UE);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60da      	str	r2, [r3, #12]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	uint32_t usart_clkfreq;

	/* variables to hold mantissa and fraction */
	uint32_t  usartdiv, usartdiv_mpart, usartdiv_fpart;

	uint32_t temp = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]

	if( (pUSARTx == USART1) || (pUSARTx == USART6)){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a3c      	ldr	r2, [pc, #240]	@ (8001108 <USART_SetBaudRate+0x104>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d003      	beq.n	8001022 <USART_SetBaudRate+0x1e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a3b      	ldr	r2, [pc, #236]	@ (800110c <USART_SetBaudRate+0x108>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d103      	bne.n	800102a <USART_SetBaudRate+0x26>

		usart_clkfreq = RCC_GetPCLK2Value();
 8001022:	f7ff fe59 	bl	8000cd8 <RCC_GetPCLK2Value>
 8001026:	61f8      	str	r0, [r7, #28]
 8001028:	e002      	b.n	8001030 <USART_SetBaudRate+0x2c>
	}
	else{

		usart_clkfreq = RCC_GetPCLK1Value();
 800102a:	f7ff fe03 	bl	8000c34 <RCC_GetPCLK1Value>
 800102e:	61f8      	str	r0, [r7, #28]

	}

	if(pUSARTx ->CR1 & (1 << USART_CR1_OVER8)){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d02a      	beq.n	8001092 <USART_SetBaudRate+0x8e>

		/* over8 = 1 */
		/* usartdiv = (pclk/(8*(2-OVER8)*Baudrate) * 100 = 12.5*pclk/1* Baudrate  => 25 *pclk/ 2* Baudrate */

		usartdiv = 25 * usart_clkfreq /(2 * BaudRate);
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	009a      	lsls	r2, r3, #2
 8001046:	441a      	add	r2, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	60fb      	str	r3, [r7, #12]
		/* calculate mantissa */
		usartdiv_mpart = usartdiv / 100 ;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4a2e      	ldr	r2, [pc, #184]	@ (8001110 <USART_SetBaudRate+0x10c>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	61bb      	str	r3, [r7, #24]

		/* calculate fraction. add 50 to round it up */
		usartdiv_fpart = ((usartdiv - (usartdiv_mpart * 100)) * 8) + 50;
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2264      	movs	r2, #100	@ 0x64
 8001062:	fb02 f303 	mul.w	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	3332      	adds	r3, #50	@ 0x32
 800106e:	617b      	str	r3, [r7, #20]
		usartdiv_fpart /= 100;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <USART_SetBaudRate+0x10c>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	617b      	str	r3, [r7, #20]

		if(usartdiv_fpart > 7){
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b07      	cmp	r3, #7
 8001080:	d902      	bls.n	8001088 <USART_SetBaudRate+0x84>
			usartdiv_mpart += 1;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	3301      	adds	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
		}
		usartdiv_fpart &= (uint8_t)(0x07);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e029      	b.n	80010e6 <USART_SetBaudRate+0xe2>
	else {

		/* over8 = 0 */
		/* usartdiv = (pclk/(8*(2-OVER8)*Baudrate) * 100 = 12.5*pclk/2* Baudrate  => 25 *pclk/ 4* Baudrate */

		usartdiv = 25 * usart_clkfreq /(4 * BaudRate);
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	009a      	lsls	r2, r3, #2
 800109c:	441a      	add	r2, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	60fb      	str	r3, [r7, #12]

		/* calculate mantissa */
		usartdiv_mpart = usartdiv / 100 ;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <USART_SetBaudRate+0x10c>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	61bb      	str	r3, [r7, #24]

		/* calculate fraction. add 50 to round it up */
		usartdiv_fpart = ((usartdiv - (usartdiv_mpart * 100)) * 16) + 50;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2264      	movs	r2, #100	@ 0x64
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	3332      	adds	r3, #50	@ 0x32
 80010c4:	617b      	str	r3, [r7, #20]
		usartdiv_fpart /= 100;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <USART_SetBaudRate+0x10c>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	617b      	str	r3, [r7, #20]

		if(usartdiv_fpart > 15){
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d902      	bls.n	80010de <USART_SetBaudRate+0xda>
			usartdiv_mpart += 1;
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	3301      	adds	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
		}
		usartdiv_fpart &= (uint8_t)(0x0F);
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	617b      	str	r3, [r7, #20]

	}


	/* program the baud rate usartdiv in BRR */
	temp = (usartdiv_mpart << 4);
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	613b      	str	r3, [r7, #16]
	temp |= usartdiv_fpart;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]

	pUSARTx ->BRR |= temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]


}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40011000 	.word	0x40011000
 800110c:	40011400 	.word	0x40011400
 8001110:	51eb851f 	.word	0x51eb851f

08001114 <USART_SendDataIT>:
 *
 * @return		- returns the api state : USART_STATUS_BUSY_TX /USART_STATUS_BUSY_RX /USART_STATUS_READY
 *
 * @note		-
 */
uint8_t  USART_SendDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]

	uint8_t busystate = pUSARTHandle -> TxState;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	7e1b      	ldrb	r3, [r3, #24]
 8001124:	75fb      	strb	r3, [r7, #23]

	if(pUSARTHandle ->TxState != USART_STATUS_BUSY_TX) {
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	7e1b      	ldrb	r3, [r3, #24]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d018      	beq.n	8001160 <USART_SendDataIT+0x4c>

		pUSARTHandle ->TxState = USART_STATUS_BUSY_TX;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2201      	movs	r2, #1
 8001132:	761a      	strb	r2, [r3, #24]
		pUSARTHandle ->TxBuffer = pTxBuffer;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	611a      	str	r2, [r3, #16]
		pUSARTHandle ->TxLen = Len;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	621a      	str	r2, [r3, #32]

		/* Enable TX interrupt */
		pUSARTHandle ->pUSARTx ->CR1 |= (1 << USART_CR1_TXEIE);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800114e:	60da      	str	r2, [r3, #12]

		/* Enable TCE */
		pUSARTHandle ->pUSARTx ->CR1 |= (1 << USART_CR1_TCIE);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800115e:	60da      	str	r2, [r3, #12]


	}

	return busystate;
 8001160:	7dfb      	ldrb	r3, [r7, #23]
}
 8001162:	4618      	mov	r0, r3
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <USART_ReceiveDataIT>:
 *
 * @return		-returns the api state : USART_STATUS_BUSY_TX /USART_STATUS_BUSY_RX /USART_STATUS_READY
 *
 * @note		-
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len){
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]

	uint8_t busystate = pUSARTHandle -> RxState;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	7e5b      	ldrb	r3, [r3, #25]
 800117c:	75fb      	strb	r3, [r7, #23]

	if(pUSARTHandle ->RxState != USART_STATUS_BUSY_RX) {
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	7e5b      	ldrb	r3, [r3, #25]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d010      	beq.n	80011a8 <USART_ReceiveDataIT+0x3c>

			pUSARTHandle ->RxState = USART_STATUS_BUSY_RX;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2202      	movs	r2, #2
 800118a:	765a      	strb	r2, [r3, #25]
			pUSARTHandle ->RxBuffer = pRxBuffer;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	615a      	str	r2, [r3, #20]
			pUSARTHandle ->RxLen = Len;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	61da      	str	r2, [r3, #28]

			/* Enable RX interrupt */
			pUSARTHandle ->pUSARTx ->CR1 |= (1 << USART_CR1_RXNEIE);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0220 	orr.w	r2, r2, #32
 80011a6:	60da      	str	r2, [r3, #12]

		}

	return busystate;
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <USART_HandleRXNEInterrupt>:
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
static void USART_HandleRXNEInterrupt (USART_Handle_t *pUSARTHandle){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

	if(pUSARTHandle->RxState == USART_STATUS_BUSY_RX)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e5b      	ldrb	r3, [r3, #25]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d17d      	bne.n	80012c0 <USART_HandleRXNEInterrupt+0x10c>
	{
		/*RX is set so receive data */
		if(pUSARTHandle->RxLen > 0)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d058      	beq.n	800127e <USART_HandleRXNEInterrupt+0xca>
		{
			/*Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit */
			if(pUSARTHandle->USART_Config.USART_DataSize == USART_DATA_9BITS)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7a5b      	ldrb	r3, [r3, #9]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d134      	bne.n	800123e <USART_HandleRXNEInterrupt+0x8a>
			{
				/*We are going to receive 9bit data in a frame */

				/*Now, check are we using USART_ParityControl control or not */
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7adb      	ldrb	r3, [r3, #11]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11e      	bne.n	800121a <USART_HandleRXNEInterrupt+0x66>
				{
					/*No parity is used. so, all 9bits will be of user data */

					/*read only first 9 bits so mask the DR with 0x01FF */
					*((uint16_t*) pUSARTHandle ->RxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011ec:	b292      	uxth	r2, r2
 80011ee:	801a      	strh	r2, [r3, #0]

					/*Now increment the pRxBuffer two times */
					pUSARTHandle ->RxBuffer++;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	615a      	str	r2, [r3, #20]
					pUSARTHandle ->RxBuffer++;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	615a      	str	r2, [r3, #20]

					/* Implement the code to decrement the length */
					pUSARTHandle ->RxLen --;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	61da      	str	r2, [r3, #28]
					pUSARTHandle ->RxLen --;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	61da      	str	r2, [r3, #28]
 8001218:	e031      	b.n	800127e <USART_HandleRXNEInterrupt+0xca>
				}
				else
				{
					/* Parity is used. so, 8bits will be of user data and 1 bit is parity */
					 *pUSARTHandle ->RxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	701a      	strb	r2, [r3, #0]

					 /* Now increment the pRxBuffer */
					 pUSARTHandle->RxBuffer++;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	615a      	str	r2, [r3, #20]

					 /* Implement the code to decrement the length */
					 pUSARTHandle ->RxLen --;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	1e5a      	subs	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	61da      	str	r2, [r3, #28]
 800123c:	e01f      	b.n	800127e <USART_HandleRXNEInterrupt+0xca>
			else
			{
				/*We are going to receive 8bit data in a frame */

				/*Now, check are we using USART_ParityControl control or not */
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7adb      	ldrb	r3, [r3, #11]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <USART_HandleRXNEInterrupt+0xa2>
				{
					/*No parity is used , so all 8bits will be of user data */

					/* read 8 bits from DR */
					 *pUSARTHandle ->RxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e009      	b.n	800126a <USART_HandleRXNEInterrupt+0xb6>
				else
				{
					/* Parity is used, so , 7 bits will be of user data and 1 bit is parity */

					/* read only 7 bits , hence mask the DR with 0X7F */
					 *pUSARTHandle -> RxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]

				}

				/* Now , increment the pRxBuffer */
				pUSARTHandle ->RxBuffer++;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	615a      	str	r2, [r3, #20]

				/* decrement the length */
				pUSARTHandle ->RxLen --;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	61da      	str	r2, [r3, #28]
			}


		}//if of >0

		if(! pUSARTHandle->RxLen)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d11c      	bne.n	80012c0 <USART_HandleRXNEInterrupt+0x10c>
		{
			/* disable the rxne */
			uint8_t dummy;
			pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0220 	bic.w	r2, r2, #32
 8001294:	60da      	str	r2, [r3, #12]
			pUSARTHandle->RxState = USART_STATUS_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	765a      	strb	r2, [r3, #25]
			pUSARTHandle ->RxBuffer = NULL;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
			pUSARTHandle ->RxLen = 0;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
			dummy = pUSARTHandle ->pUSARTx ->SR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	73fb      	strb	r3, [r7, #15]
			dummy = pUSARTHandle ->pUSARTx ->DR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
			USART_ApplicationEventCallback(pUSARTHandle,USART_EV_RX_CMPLT);
 80012b8:	2101      	movs	r1, #1
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f916 	bl	80004ec <USART_ApplicationEventCallback>
		}
	}



}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <USART_HandleTXEInterrupt>:
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
static void USART_HandleTXEInterrupt (USART_Handle_t *pUSARTHandle){
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

	uint16_t *pdata;

	if(pUSARTHandle->TxState == USART_STATUS_BUSY_TX)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7e1b      	ldrb	r3, [r3, #24]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d158      	bne.n	800138a <USART_HandleTXEInterrupt+0xc2>
	{
		/*Keep sending data until Txlen reaches to zero */
		if(pUSARTHandle->TxLen > 0)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d048      	beq.n	8001372 <USART_HandleTXEInterrupt+0xaa>
		{
			/*Check the USART_WordLength item for 9BIT or 8BIT in a frame */
			if(pUSARTHandle->USART_Config.USART_DataSize == USART_DATA_9BITS)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7a5b      	ldrb	r3, [r3, #9]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d134      	bne.n	8001352 <USART_HandleTXEInterrupt+0x8a>
			{
				/*if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits */
				pdata = (uint16_t*) pUSARTHandle ->TxBuffer;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	60fb      	str	r3, [r7, #12]

				/* check for USART_ParityControl */
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7adb      	ldrb	r3, [r3, #11]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d11c      	bne.n	8001330 <USART_HandleTXEInterrupt+0x68>
				{
					/*loading only first 9 bits , so we have to mask with the value 0x01FF */
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001304:	605a      	str	r2, [r3, #4]

					/* No parity is used in this transfer , so, 9bits of user data will be sent */
					/*Implement the code to increment pTxBuffer twice */
					pUSARTHandle ->TxBuffer++;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	611a      	str	r2, [r3, #16]
					pUSARTHandle ->TxBuffer++;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	611a      	str	r2, [r3, #16]

					/*Implement the code to decrement the length */
					pUSARTHandle ->TxLen --;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	621a      	str	r2, [r3, #32]
					pUSARTHandle ->TxLen --;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	1e5a      	subs	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	621a      	str	r2, [r3, #32]
 800132e:	e020      	b.n	8001372 <USART_HandleTXEInterrupt+0xaa>
				}
				else
				{
					/* Parity bit is used in this transfer . so , 8bits of user data will be sent */
					/* The 9th bit will be replaced by parity bit by the hardware */
					pUSARTHandle ->pUSARTx ->DR = * pUSARTHandle ->TxBuffer;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
					pUSARTHandle ->TxBuffer++;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	611a      	str	r2, [r3, #16]

					/* decrement the length */
					pUSARTHandle ->TxLen --;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	e00f      	b.n	8001372 <USART_HandleTXEInterrupt+0xaa>
				}
			}
			else
			{
				/*This is 8bit data transfer */
				pUSARTHandle->pUSARTx->DR = (*pUSARTHandle ->TxBuffer  & (uint8_t)0xFF);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]

				/* Increment the buffer address */
				pUSARTHandle ->TxBuffer++;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	611a      	str	r2, [r3, #16]

				/* decrement the length */
				pUSARTHandle ->TxLen --;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	621a      	str	r2, [r3, #32]
			}

		}
		if (pUSARTHandle->TxLen == 0 )
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d107      	bne.n	800138a <USART_HandleTXEInterrupt+0xc2>
		{
			/* TxLen is zero */
			/* clear the TXEIE bit (disable interrupt for TXE flag ) */
			pUSARTHandle ->pUSARTx ->CR1 &= ~(1 << USART_CR1_TXEIE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001388:	60da      	str	r2, [r3, #12]
		}
	}



}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <USART_IRQInterruptConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d144      	bne.n	8001434 <USART_IRQInterruptConfig+0xa0>
		if(IRQNumber <= 31){
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b1f      	cmp	r3, #31
 80013ae:	d809      	bhi.n	80013c4 <USART_IRQInterruptConfig+0x30>
			/* configure ISER0 */
			*NVIC_ISER0 |= (1 << IRQNumber);
 80013b0:	4b45      	ldr	r3, [pc, #276]	@ (80014c8 <USART_IRQInterruptConfig+0x134>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	79fa      	ldrb	r2, [r7, #7]
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	4611      	mov	r1, r2
 80013be:	4a42      	ldr	r2, [pc, #264]	@ (80014c8 <USART_IRQInterruptConfig+0x134>)
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 32 && IRQNumber < 64){
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b1f      	cmp	r3, #31
 80013c8:	d90e      	bls.n	80013e8 <USART_IRQInterruptConfig+0x54>
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80013ce:	d80b      	bhi.n	80013e8 <USART_IRQInterruptConfig+0x54>
			/* configure ISER1 */
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80013d0:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <USART_IRQInterruptConfig+0x138>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	79fa      	ldrb	r2, [r7, #7]
 80013d6:	f002 021f 	and.w	r2, r2, #31
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	4611      	mov	r1, r2
 80013e2:	4a3a      	ldr	r2, [pc, #232]	@ (80014cc <USART_IRQInterruptConfig+0x138>)
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 64 && IRQNumber < 96){
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80013ec:	d90e      	bls.n	800140c <USART_IRQInterruptConfig+0x78>
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b5f      	cmp	r3, #95	@ 0x5f
 80013f2:	d80b      	bhi.n	800140c <USART_IRQInterruptConfig+0x78>
			/* configure ISER2 */
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 80013f4:	4b36      	ldr	r3, [pc, #216]	@ (80014d0 <USART_IRQInterruptConfig+0x13c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	f002 021f 	and.w	r2, r2, #31
 80013fe:	2101      	movs	r1, #1
 8001400:	fa01 f202 	lsl.w	r2, r1, r2
 8001404:	4611      	mov	r1, r2
 8001406:	4a32      	ldr	r2, [pc, #200]	@ (80014d0 <USART_IRQInterruptConfig+0x13c>)
 8001408:	430b      	orrs	r3, r1
 800140a:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 96 && IRQNumber < 128){
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b5f      	cmp	r3, #95	@ 0x5f
 8001410:	d954      	bls.n	80014bc <USART_IRQInterruptConfig+0x128>
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db50      	blt.n	80014bc <USART_IRQInterruptConfig+0x128>
			/* configure ISER3 */
			*NVIC_ISER3 |= (1 << (IRQNumber % 32));
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <USART_IRQInterruptConfig+0x140>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	f002 021f 	and.w	r2, r2, #31
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f202 	lsl.w	r2, r1, r2
 800142a:	4611      	mov	r1, r2
 800142c:	4a29      	ldr	r2, [pc, #164]	@ (80014d4 <USART_IRQInterruptConfig+0x140>)
 800142e:	430b      	orrs	r3, r1
 8001430:	6013      	str	r3, [r2, #0]
		}

	}


}
 8001432:	e043      	b.n	80014bc <USART_IRQInterruptConfig+0x128>
		if(IRQNumber <= 31){
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b1f      	cmp	r3, #31
 8001438:	d809      	bhi.n	800144e <USART_IRQInterruptConfig+0xba>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <USART_IRQInterruptConfig+0x144>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	4611      	mov	r1, r2
 8001448:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <USART_IRQInterruptConfig+0x144>)
 800144a:	430b      	orrs	r3, r1
 800144c:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 32 && IRQNumber < 64){
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b1f      	cmp	r3, #31
 8001452:	d90e      	bls.n	8001472 <USART_IRQInterruptConfig+0xde>
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b3f      	cmp	r3, #63	@ 0x3f
 8001458:	d80b      	bhi.n	8001472 <USART_IRQInterruptConfig+0xde>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <USART_IRQInterruptConfig+0x148>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	79fa      	ldrb	r2, [r7, #7]
 8001460:	f002 021f 	and.w	r2, r2, #31
 8001464:	2101      	movs	r1, #1
 8001466:	fa01 f202 	lsl.w	r2, r1, r2
 800146a:	4611      	mov	r1, r2
 800146c:	4a1b      	ldr	r2, [pc, #108]	@ (80014dc <USART_IRQInterruptConfig+0x148>)
 800146e:	430b      	orrs	r3, r1
 8001470:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 64 && IRQNumber < 96){
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b3f      	cmp	r3, #63	@ 0x3f
 8001476:	d90e      	bls.n	8001496 <USART_IRQInterruptConfig+0x102>
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b5f      	cmp	r3, #95	@ 0x5f
 800147c:	d80b      	bhi.n	8001496 <USART_IRQInterruptConfig+0x102>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <USART_IRQInterruptConfig+0x14c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	f002 021f 	and.w	r2, r2, #31
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	4611      	mov	r1, r2
 8001490:	4a13      	ldr	r2, [pc, #76]	@ (80014e0 <USART_IRQInterruptConfig+0x14c>)
 8001492:	430b      	orrs	r3, r1
 8001494:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 96 && IRQNumber < 128){
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b5f      	cmp	r3, #95	@ 0x5f
 800149a:	d90f      	bls.n	80014bc <USART_IRQInterruptConfig+0x128>
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0b      	blt.n	80014bc <USART_IRQInterruptConfig+0x128>
			*NVIC_ICER3 |= (1 << (IRQNumber % 32));
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <USART_IRQInterruptConfig+0x150>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	f002 021f 	and.w	r2, r2, #31
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4611      	mov	r1, r2
 80014b6:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <USART_IRQInterruptConfig+0x150>)
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000e104 	.word	0xe000e104
 80014d0:	e000e108 	.word	0xe000e108
 80014d4:	e000e10c 	.word	0xe000e10c
 80014d8:	e000e180 	.word	0xe000e180
 80014dc:	e000e184 	.word	0xe000e184
 80014e0:	e000e188 	.word	0xe000e188
 80014e4:	e000e18c 	.word	0xe000e18c

080014e8 <USART_IRQPriorityConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	460a      	mov	r2, r1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	4613      	mov	r3, r2
 80014f6:	71bb      	strb	r3, [r7, #6]

	uint8_t iprx = IRQNumber / 4;  			/* ipr reg number offset address */
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;    /* position in iprx reg */
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_position = (8 * iprx_section) + (8 - NO_IPR_BITS_IMPLEMENTED);  //only upper 4 bits are implemented in IPR
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	3304      	adds	r3, #4
 800150e:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_position);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8001518:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	79b9      	ldrb	r1, [r7, #6]
 8001520:	7b7b      	ldrb	r3, [r7, #13]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	4619      	mov	r1, r3
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8001530:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]


}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <USART_IRQHandling>:
 *
 * @return		-
 *
 * @note		- Interrupt handling for different USART events (refer SR1)
 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle){
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
	uint32_t temp1 , temp2, temp3;

/*************************Check for TC flag ********************************************/

	/* check the state of TC bit in the SR */
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001554:	617b      	str	r3, [r7, #20]

	 /*check the state of TCEIE bit */
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001560:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d027      	beq.n	80015b8 <USART_IRQHandling+0x76>
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d024      	beq.n	80015b8 <USART_IRQHandling+0x76>
	{
		/* this interrupt is because of TC */

		/* close transmission and call application callback if TxLen is zero */
		if ( pUSARTHandle->TxState == USART_STATUS_BUSY_TX)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7e1b      	ldrb	r3, [r3, #24]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d120      	bne.n	80015b8 <USART_IRQHandling+0x76>
		{
			/* Check the TxLen . If it is zero then close the data transmission */
			if(! pUSARTHandle->TxLen )
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11c      	bne.n	80015b8 <USART_IRQHandling+0x76>
			{
				/* clear the TC flag */
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800158c:	601a      	str	r2, [r3, #0]

				/* clear the TCIE control bit */
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TCIE);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800159c:	60da      	str	r2, [r3, #12]

				/*Reset the application state */
				pUSARTHandle->TxState = USART_STATUS_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	761a      	strb	r2, [r3, #24]

				/*Reset Buffer address to NULL */
				pUSARTHandle ->TxBuffer = NULL;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle ->TxLen = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]

				//Call the applicaton call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EV_TX_CMPLT);
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7fe ff9a 	bl	80004ec <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	/*check the state of TXE bit in the SR */
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c2:	617b      	str	r3, [r7, #20]

	/*check the state of TXEIE bit in CR1 */
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ce:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <USART_IRQHandling+0xa0>
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <USART_IRQHandling+0xa0>
	{
		/* this interrupt is because of TXE */
		USART_HandleTXEInterrupt(pUSARTHandle);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fe73 	bl	80012c8 <USART_HandleTXEInterrupt>

	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <USART_IRQHandling+0xca>
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <USART_IRQHandling+0xca>
	{
		/*this interrupt is because of rxne */
		USART_HandleRXNEInterrupt(pUSARTHandle);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fdd4 	bl	80011b4 <USART_HandleRXNEInterrupt>

/*************************Check for CTS flag ********************************************/
/* Note : CTS feature is not applicable for UART4 and UART5 */

	/* check the status of CTS bit in the SR */
	temp1 = pUSARTHandle ->pUSARTx ->SR & (1 << USART_SR_CTS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001616:	617b      	str	r3, [r7, #20]

	/* check the state of CTSE bit in CR1 */
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001622:	613b      	str	r3, [r7, #16]

	/* check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.) */
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162e:	60fb      	str	r3, [r7, #12]
	(void) temp3;

	if(temp1  && temp2 )
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00e      	beq.n	8001654 <USART_IRQHandling+0x112>
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <USART_IRQHandling+0x112>
	{
		/* clear the CTS flag in SR */
		pUSARTHandle ->pUSARTx ->SR &= ~(1 << USART_SR_CTS);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800164a:	601a      	str	r2, [r3, #0]

		/* this interrupt is because of cts */
		USART_ApplicationEventCallback(pUSARTHandle,USART_EV_CTS);
 800164c:	2102      	movs	r1, #2
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7fe ff4c 	bl	80004ec <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	/* check the status of IDLE flag bit in the SR */
	temp1 = pUSARTHandle ->pUSARTx ->SR & (1 << USART_SR_IDLE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	617b      	str	r3, [r7, #20]

	/* check the state of IDLEIE bit in CR1 */
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR1_IDLEIE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00e      	beq.n	8001690 <USART_IRQHandling+0x14e>
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00b      	beq.n	8001690 <USART_IRQHandling+0x14e>
	{
		/* clear the IDLE flag. read SR followed by read DR */
		/* dummy read */
		temp1 = pUSARTHandle ->pUSARTx ->SR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	617b      	str	r3, [r7, #20]
		temp1 = pUSARTHandle ->pUSARTx ->DR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	617b      	str	r3, [r7, #20]

		/* this interrupt is because of idle */
		USART_ApplicationEventCallback(pUSARTHandle,USART_EV_IDLE);
 8001688:	2103      	movs	r1, #3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7fe ff2e 	bl	80004ec <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	/* check the status of ORE flag  in the SR */
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	617b      	str	r3, [r7, #20]

	/* check the status of RXNEIE  bit in the CR1 */
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f003 0305 	and.w	r3, r3, #5
 80016a6:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <USART_IRQHandling+0x17a>
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <USART_IRQHandling+0x17a>
	{
		/*Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .*/

		/* this interrupt is because of Overrun error */
		USART_ApplicationEventCallback(pUSARTHandle,USART_EV_ERR_ORE);
 80016b4:	2104      	movs	r1, #4
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7fe ff18 	bl	80004ec <USART_ApplicationEventCallback>
/*************************Check for Error Flag ********************************************/

/* Noise Flag, Overrun error and Framing Error in multibuffer communication */
//The blow code will get executed in only if multibuffer mode is used. */

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]

	if(temp2 )
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01e      	beq.n	800170c <USART_IRQHandling+0x1ca>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <USART_IRQHandling+0x1a6>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_EV_ERR_FE);
 80016e0:	2106      	movs	r1, #6
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7fe ff02 	bl	80004ec <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NF) )
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <USART_IRQHandling+0x1b8>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_EV_ERR_NE);
 80016f2:	2105      	movs	r1, #5
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7fe fef9 	bl	80004ec <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <USART_IRQHandling+0x1ca>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_EV_ERR_ORE);
 8001704:	2104      	movs	r1, #4
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7fe fef0 	bl	80004ec <USART_ApplicationEventCallback>
		}
	}


}
 800170c:	bf00      	nop
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <std>:
 8001714:	2300      	movs	r3, #0
 8001716:	b510      	push	{r4, lr}
 8001718:	4604      	mov	r4, r0
 800171a:	e9c0 3300 	strd	r3, r3, [r0]
 800171e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001722:	6083      	str	r3, [r0, #8]
 8001724:	8181      	strh	r1, [r0, #12]
 8001726:	6643      	str	r3, [r0, #100]	@ 0x64
 8001728:	81c2      	strh	r2, [r0, #14]
 800172a:	6183      	str	r3, [r0, #24]
 800172c:	4619      	mov	r1, r3
 800172e:	2208      	movs	r2, #8
 8001730:	305c      	adds	r0, #92	@ 0x5c
 8001732:	f000 f906 	bl	8001942 <memset>
 8001736:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <std+0x58>)
 8001738:	6263      	str	r3, [r4, #36]	@ 0x24
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <std+0x5c>)
 800173c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <std+0x60>)
 8001740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <std+0x64>)
 8001744:	6323      	str	r3, [r4, #48]	@ 0x30
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <std+0x68>)
 8001748:	6224      	str	r4, [r4, #32]
 800174a:	429c      	cmp	r4, r3
 800174c:	d006      	beq.n	800175c <std+0x48>
 800174e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001752:	4294      	cmp	r4, r2
 8001754:	d002      	beq.n	800175c <std+0x48>
 8001756:	33d0      	adds	r3, #208	@ 0xd0
 8001758:	429c      	cmp	r4, r3
 800175a:	d105      	bne.n	8001768 <std+0x54>
 800175c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001764:	f000 b966 	b.w	8001a34 <__retarget_lock_init_recursive>
 8001768:	bd10      	pop	{r4, pc}
 800176a:	bf00      	nop
 800176c:	080018bd 	.word	0x080018bd
 8001770:	080018df 	.word	0x080018df
 8001774:	08001917 	.word	0x08001917
 8001778:	0800193b 	.word	0x0800193b
 800177c:	200004d4 	.word	0x200004d4

08001780 <stdio_exit_handler>:
 8001780:	4a02      	ldr	r2, [pc, #8]	@ (800178c <stdio_exit_handler+0xc>)
 8001782:	4903      	ldr	r1, [pc, #12]	@ (8001790 <stdio_exit_handler+0x10>)
 8001784:	4803      	ldr	r0, [pc, #12]	@ (8001794 <stdio_exit_handler+0x14>)
 8001786:	f000 b869 	b.w	800185c <_fwalk_sglue>
 800178a:	bf00      	nop
 800178c:	20000028 	.word	0x20000028
 8001790:	080022c5 	.word	0x080022c5
 8001794:	20000038 	.word	0x20000038

08001798 <cleanup_stdio>:
 8001798:	6841      	ldr	r1, [r0, #4]
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <cleanup_stdio+0x34>)
 800179c:	4299      	cmp	r1, r3
 800179e:	b510      	push	{r4, lr}
 80017a0:	4604      	mov	r4, r0
 80017a2:	d001      	beq.n	80017a8 <cleanup_stdio+0x10>
 80017a4:	f000 fd8e 	bl	80022c4 <_fflush_r>
 80017a8:	68a1      	ldr	r1, [r4, #8]
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <cleanup_stdio+0x38>)
 80017ac:	4299      	cmp	r1, r3
 80017ae:	d002      	beq.n	80017b6 <cleanup_stdio+0x1e>
 80017b0:	4620      	mov	r0, r4
 80017b2:	f000 fd87 	bl	80022c4 <_fflush_r>
 80017b6:	68e1      	ldr	r1, [r4, #12]
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <cleanup_stdio+0x3c>)
 80017ba:	4299      	cmp	r1, r3
 80017bc:	d004      	beq.n	80017c8 <cleanup_stdio+0x30>
 80017be:	4620      	mov	r0, r4
 80017c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017c4:	f000 bd7e 	b.w	80022c4 <_fflush_r>
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	bf00      	nop
 80017cc:	200004d4 	.word	0x200004d4
 80017d0:	2000053c 	.word	0x2000053c
 80017d4:	200005a4 	.word	0x200005a4

080017d8 <global_stdio_init.part.0>:
 80017d8:	b510      	push	{r4, lr}
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <global_stdio_init.part.0+0x30>)
 80017dc:	4c0b      	ldr	r4, [pc, #44]	@ (800180c <global_stdio_init.part.0+0x34>)
 80017de:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <global_stdio_init.part.0+0x38>)
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	4620      	mov	r0, r4
 80017e4:	2200      	movs	r2, #0
 80017e6:	2104      	movs	r1, #4
 80017e8:	f7ff ff94 	bl	8001714 <std>
 80017ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80017f0:	2201      	movs	r2, #1
 80017f2:	2109      	movs	r1, #9
 80017f4:	f7ff ff8e 	bl	8001714 <std>
 80017f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80017fc:	2202      	movs	r2, #2
 80017fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001802:	2112      	movs	r1, #18
 8001804:	f7ff bf86 	b.w	8001714 <std>
 8001808:	2000060c 	.word	0x2000060c
 800180c:	200004d4 	.word	0x200004d4
 8001810:	08001781 	.word	0x08001781

08001814 <__sfp_lock_acquire>:
 8001814:	4801      	ldr	r0, [pc, #4]	@ (800181c <__sfp_lock_acquire+0x8>)
 8001816:	f000 b90e 	b.w	8001a36 <__retarget_lock_acquire_recursive>
 800181a:	bf00      	nop
 800181c:	20000615 	.word	0x20000615

08001820 <__sfp_lock_release>:
 8001820:	4801      	ldr	r0, [pc, #4]	@ (8001828 <__sfp_lock_release+0x8>)
 8001822:	f000 b909 	b.w	8001a38 <__retarget_lock_release_recursive>
 8001826:	bf00      	nop
 8001828:	20000615 	.word	0x20000615

0800182c <__sinit>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	f7ff fff0 	bl	8001814 <__sfp_lock_acquire>
 8001834:	6a23      	ldr	r3, [r4, #32]
 8001836:	b11b      	cbz	r3, 8001840 <__sinit+0x14>
 8001838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800183c:	f7ff bff0 	b.w	8001820 <__sfp_lock_release>
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <__sinit+0x28>)
 8001842:	6223      	str	r3, [r4, #32]
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <__sinit+0x2c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f5      	bne.n	8001838 <__sinit+0xc>
 800184c:	f7ff ffc4 	bl	80017d8 <global_stdio_init.part.0>
 8001850:	e7f2      	b.n	8001838 <__sinit+0xc>
 8001852:	bf00      	nop
 8001854:	08001799 	.word	0x08001799
 8001858:	2000060c 	.word	0x2000060c

0800185c <_fwalk_sglue>:
 800185c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001860:	4607      	mov	r7, r0
 8001862:	4688      	mov	r8, r1
 8001864:	4614      	mov	r4, r2
 8001866:	2600      	movs	r6, #0
 8001868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800186c:	f1b9 0901 	subs.w	r9, r9, #1
 8001870:	d505      	bpl.n	800187e <_fwalk_sglue+0x22>
 8001872:	6824      	ldr	r4, [r4, #0]
 8001874:	2c00      	cmp	r4, #0
 8001876:	d1f7      	bne.n	8001868 <_fwalk_sglue+0xc>
 8001878:	4630      	mov	r0, r6
 800187a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800187e:	89ab      	ldrh	r3, [r5, #12]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d907      	bls.n	8001894 <_fwalk_sglue+0x38>
 8001884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001888:	3301      	adds	r3, #1
 800188a:	d003      	beq.n	8001894 <_fwalk_sglue+0x38>
 800188c:	4629      	mov	r1, r5
 800188e:	4638      	mov	r0, r7
 8001890:	47c0      	blx	r8
 8001892:	4306      	orrs	r6, r0
 8001894:	3568      	adds	r5, #104	@ 0x68
 8001896:	e7e9      	b.n	800186c <_fwalk_sglue+0x10>

08001898 <iprintf>:
 8001898:	b40f      	push	{r0, r1, r2, r3}
 800189a:	b507      	push	{r0, r1, r2, lr}
 800189c:	4906      	ldr	r1, [pc, #24]	@ (80018b8 <iprintf+0x20>)
 800189e:	ab04      	add	r3, sp, #16
 80018a0:	6808      	ldr	r0, [r1, #0]
 80018a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80018a6:	6881      	ldr	r1, [r0, #8]
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	f000 f9e7 	bl	8001c7c <_vfiprintf_r>
 80018ae:	b003      	add	sp, #12
 80018b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80018b4:	b004      	add	sp, #16
 80018b6:	4770      	bx	lr
 80018b8:	20000034 	.word	0x20000034

080018bc <__sread>:
 80018bc:	b510      	push	{r4, lr}
 80018be:	460c      	mov	r4, r1
 80018c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018c4:	f000 f868 	bl	8001998 <_read_r>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	bfab      	itete	ge
 80018cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80018ce:	89a3      	ldrhlt	r3, [r4, #12]
 80018d0:	181b      	addge	r3, r3, r0
 80018d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80018d6:	bfac      	ite	ge
 80018d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80018da:	81a3      	strhlt	r3, [r4, #12]
 80018dc:	bd10      	pop	{r4, pc}

080018de <__swrite>:
 80018de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e2:	461f      	mov	r7, r3
 80018e4:	898b      	ldrh	r3, [r1, #12]
 80018e6:	05db      	lsls	r3, r3, #23
 80018e8:	4605      	mov	r5, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	4616      	mov	r6, r2
 80018ee:	d505      	bpl.n	80018fc <__swrite+0x1e>
 80018f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018f4:	2302      	movs	r3, #2
 80018f6:	2200      	movs	r2, #0
 80018f8:	f000 f83c 	bl	8001974 <_lseek_r>
 80018fc:	89a3      	ldrh	r3, [r4, #12]
 80018fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001906:	81a3      	strh	r3, [r4, #12]
 8001908:	4632      	mov	r2, r6
 800190a:	463b      	mov	r3, r7
 800190c:	4628      	mov	r0, r5
 800190e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001912:	f000 b853 	b.w	80019bc <_write_r>

08001916 <__sseek>:
 8001916:	b510      	push	{r4, lr}
 8001918:	460c      	mov	r4, r1
 800191a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800191e:	f000 f829 	bl	8001974 <_lseek_r>
 8001922:	1c43      	adds	r3, r0, #1
 8001924:	89a3      	ldrh	r3, [r4, #12]
 8001926:	bf15      	itete	ne
 8001928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800192a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800192e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001932:	81a3      	strheq	r3, [r4, #12]
 8001934:	bf18      	it	ne
 8001936:	81a3      	strhne	r3, [r4, #12]
 8001938:	bd10      	pop	{r4, pc}

0800193a <__sclose>:
 800193a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800193e:	f000 b809 	b.w	8001954 <_close_r>

08001942 <memset>:
 8001942:	4402      	add	r2, r0
 8001944:	4603      	mov	r3, r0
 8001946:	4293      	cmp	r3, r2
 8001948:	d100      	bne.n	800194c <memset+0xa>
 800194a:	4770      	bx	lr
 800194c:	f803 1b01 	strb.w	r1, [r3], #1
 8001950:	e7f9      	b.n	8001946 <memset+0x4>
	...

08001954 <_close_r>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4d06      	ldr	r5, [pc, #24]	@ (8001970 <_close_r+0x1c>)
 8001958:	2300      	movs	r3, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	602b      	str	r3, [r5, #0]
 8001960:	f7fe fe37 	bl	80005d2 <_close>
 8001964:	1c43      	adds	r3, r0, #1
 8001966:	d102      	bne.n	800196e <_close_r+0x1a>
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	b103      	cbz	r3, 800196e <_close_r+0x1a>
 800196c:	6023      	str	r3, [r4, #0]
 800196e:	bd38      	pop	{r3, r4, r5, pc}
 8001970:	20000610 	.word	0x20000610

08001974 <_lseek_r>:
 8001974:	b538      	push	{r3, r4, r5, lr}
 8001976:	4d07      	ldr	r5, [pc, #28]	@ (8001994 <_lseek_r+0x20>)
 8001978:	4604      	mov	r4, r0
 800197a:	4608      	mov	r0, r1
 800197c:	4611      	mov	r1, r2
 800197e:	2200      	movs	r2, #0
 8001980:	602a      	str	r2, [r5, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	f7fe fe49 	bl	800061a <_lseek>
 8001988:	1c43      	adds	r3, r0, #1
 800198a:	d102      	bne.n	8001992 <_lseek_r+0x1e>
 800198c:	682b      	ldr	r3, [r5, #0]
 800198e:	b103      	cbz	r3, 8001992 <_lseek_r+0x1e>
 8001990:	6023      	str	r3, [r4, #0]
 8001992:	bd38      	pop	{r3, r4, r5, pc}
 8001994:	20000610 	.word	0x20000610

08001998 <_read_r>:
 8001998:	b538      	push	{r3, r4, r5, lr}
 800199a:	4d07      	ldr	r5, [pc, #28]	@ (80019b8 <_read_r+0x20>)
 800199c:	4604      	mov	r4, r0
 800199e:	4608      	mov	r0, r1
 80019a0:	4611      	mov	r1, r2
 80019a2:	2200      	movs	r2, #0
 80019a4:	602a      	str	r2, [r5, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	f7fe fdda 	bl	8000560 <_read>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	d102      	bne.n	80019b6 <_read_r+0x1e>
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	b103      	cbz	r3, 80019b6 <_read_r+0x1e>
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
 80019b8:	20000610 	.word	0x20000610

080019bc <_write_r>:
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4d07      	ldr	r5, [pc, #28]	@ (80019dc <_write_r+0x20>)
 80019c0:	4604      	mov	r4, r0
 80019c2:	4608      	mov	r0, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	2200      	movs	r2, #0
 80019c8:	602a      	str	r2, [r5, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f7fe fde5 	bl	800059a <_write>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_write_r+0x1e>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	b103      	cbz	r3, 80019da <_write_r+0x1e>
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	20000610 	.word	0x20000610

080019e0 <__errno>:
 80019e0:	4b01      	ldr	r3, [pc, #4]	@ (80019e8 <__errno+0x8>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000034 	.word	0x20000034

080019ec <__libc_init_array>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	4d0d      	ldr	r5, [pc, #52]	@ (8001a24 <__libc_init_array+0x38>)
 80019f0:	4c0d      	ldr	r4, [pc, #52]	@ (8001a28 <__libc_init_array+0x3c>)
 80019f2:	1b64      	subs	r4, r4, r5
 80019f4:	10a4      	asrs	r4, r4, #2
 80019f6:	2600      	movs	r6, #0
 80019f8:	42a6      	cmp	r6, r4
 80019fa:	d109      	bne.n	8001a10 <__libc_init_array+0x24>
 80019fc:	4d0b      	ldr	r5, [pc, #44]	@ (8001a2c <__libc_init_array+0x40>)
 80019fe:	4c0c      	ldr	r4, [pc, #48]	@ (8001a30 <__libc_init_array+0x44>)
 8001a00:	f000 fdb0 	bl	8002564 <_init>
 8001a04:	1b64      	subs	r4, r4, r5
 8001a06:	10a4      	asrs	r4, r4, #2
 8001a08:	2600      	movs	r6, #0
 8001a0a:	42a6      	cmp	r6, r4
 8001a0c:	d105      	bne.n	8001a1a <__libc_init_array+0x2e>
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a14:	4798      	blx	r3
 8001a16:	3601      	adds	r6, #1
 8001a18:	e7ee      	b.n	80019f8 <__libc_init_array+0xc>
 8001a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1e:	4798      	blx	r3
 8001a20:	3601      	adds	r6, #1
 8001a22:	e7f2      	b.n	8001a0a <__libc_init_array+0x1e>
 8001a24:	0800260c 	.word	0x0800260c
 8001a28:	0800260c 	.word	0x0800260c
 8001a2c:	0800260c 	.word	0x0800260c
 8001a30:	08002610 	.word	0x08002610

08001a34 <__retarget_lock_init_recursive>:
 8001a34:	4770      	bx	lr

08001a36 <__retarget_lock_acquire_recursive>:
 8001a36:	4770      	bx	lr

08001a38 <__retarget_lock_release_recursive>:
 8001a38:	4770      	bx	lr
	...

08001a3c <_free_r>:
 8001a3c:	b538      	push	{r3, r4, r5, lr}
 8001a3e:	4605      	mov	r5, r0
 8001a40:	2900      	cmp	r1, #0
 8001a42:	d041      	beq.n	8001ac8 <_free_r+0x8c>
 8001a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a48:	1f0c      	subs	r4, r1, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bfb8      	it	lt
 8001a4e:	18e4      	addlt	r4, r4, r3
 8001a50:	f000 f8e0 	bl	8001c14 <__malloc_lock>
 8001a54:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <_free_r+0x90>)
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	b933      	cbnz	r3, 8001a68 <_free_r+0x2c>
 8001a5a:	6063      	str	r3, [r4, #4]
 8001a5c:	6014      	str	r4, [r2, #0]
 8001a5e:	4628      	mov	r0, r5
 8001a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a64:	f000 b8dc 	b.w	8001c20 <__malloc_unlock>
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	d908      	bls.n	8001a7e <_free_r+0x42>
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	1821      	adds	r1, r4, r0
 8001a70:	428b      	cmp	r3, r1
 8001a72:	bf01      	itttt	eq
 8001a74:	6819      	ldreq	r1, [r3, #0]
 8001a76:	685b      	ldreq	r3, [r3, #4]
 8001a78:	1809      	addeq	r1, r1, r0
 8001a7a:	6021      	streq	r1, [r4, #0]
 8001a7c:	e7ed      	b.n	8001a5a <_free_r+0x1e>
 8001a7e:	461a      	mov	r2, r3
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	b10b      	cbz	r3, 8001a88 <_free_r+0x4c>
 8001a84:	42a3      	cmp	r3, r4
 8001a86:	d9fa      	bls.n	8001a7e <_free_r+0x42>
 8001a88:	6811      	ldr	r1, [r2, #0]
 8001a8a:	1850      	adds	r0, r2, r1
 8001a8c:	42a0      	cmp	r0, r4
 8001a8e:	d10b      	bne.n	8001aa8 <_free_r+0x6c>
 8001a90:	6820      	ldr	r0, [r4, #0]
 8001a92:	4401      	add	r1, r0
 8001a94:	1850      	adds	r0, r2, r1
 8001a96:	4283      	cmp	r3, r0
 8001a98:	6011      	str	r1, [r2, #0]
 8001a9a:	d1e0      	bne.n	8001a5e <_free_r+0x22>
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	6053      	str	r3, [r2, #4]
 8001aa2:	4408      	add	r0, r1
 8001aa4:	6010      	str	r0, [r2, #0]
 8001aa6:	e7da      	b.n	8001a5e <_free_r+0x22>
 8001aa8:	d902      	bls.n	8001ab0 <_free_r+0x74>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	602b      	str	r3, [r5, #0]
 8001aae:	e7d6      	b.n	8001a5e <_free_r+0x22>
 8001ab0:	6820      	ldr	r0, [r4, #0]
 8001ab2:	1821      	adds	r1, r4, r0
 8001ab4:	428b      	cmp	r3, r1
 8001ab6:	bf04      	itt	eq
 8001ab8:	6819      	ldreq	r1, [r3, #0]
 8001aba:	685b      	ldreq	r3, [r3, #4]
 8001abc:	6063      	str	r3, [r4, #4]
 8001abe:	bf04      	itt	eq
 8001ac0:	1809      	addeq	r1, r1, r0
 8001ac2:	6021      	streq	r1, [r4, #0]
 8001ac4:	6054      	str	r4, [r2, #4]
 8001ac6:	e7ca      	b.n	8001a5e <_free_r+0x22>
 8001ac8:	bd38      	pop	{r3, r4, r5, pc}
 8001aca:	bf00      	nop
 8001acc:	2000061c 	.word	0x2000061c

08001ad0 <sbrk_aligned>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8001b10 <sbrk_aligned+0x40>)
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	6831      	ldr	r1, [r6, #0]
 8001ad8:	4605      	mov	r5, r0
 8001ada:	b911      	cbnz	r1, 8001ae2 <sbrk_aligned+0x12>
 8001adc:	f000 fcae 	bl	800243c <_sbrk_r>
 8001ae0:	6030      	str	r0, [r6, #0]
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f000 fca9 	bl	800243c <_sbrk_r>
 8001aea:	1c43      	adds	r3, r0, #1
 8001aec:	d103      	bne.n	8001af6 <sbrk_aligned+0x26>
 8001aee:	f04f 34ff 	mov.w	r4, #4294967295
 8001af2:	4620      	mov	r0, r4
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
 8001af6:	1cc4      	adds	r4, r0, #3
 8001af8:	f024 0403 	bic.w	r4, r4, #3
 8001afc:	42a0      	cmp	r0, r4
 8001afe:	d0f8      	beq.n	8001af2 <sbrk_aligned+0x22>
 8001b00:	1a21      	subs	r1, r4, r0
 8001b02:	4628      	mov	r0, r5
 8001b04:	f000 fc9a 	bl	800243c <_sbrk_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d1f2      	bne.n	8001af2 <sbrk_aligned+0x22>
 8001b0c:	e7ef      	b.n	8001aee <sbrk_aligned+0x1e>
 8001b0e:	bf00      	nop
 8001b10:	20000618 	.word	0x20000618

08001b14 <_malloc_r>:
 8001b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b18:	1ccd      	adds	r5, r1, #3
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	4606      	mov	r6, r0
 8001b2a:	db01      	blt.n	8001b30 <_malloc_r+0x1c>
 8001b2c:	42a9      	cmp	r1, r5
 8001b2e:	d904      	bls.n	8001b3a <_malloc_r+0x26>
 8001b30:	230c      	movs	r3, #12
 8001b32:	6033      	str	r3, [r6, #0]
 8001b34:	2000      	movs	r0, #0
 8001b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c10 <_malloc_r+0xfc>
 8001b3e:	f000 f869 	bl	8001c14 <__malloc_lock>
 8001b42:	f8d8 3000 	ldr.w	r3, [r8]
 8001b46:	461c      	mov	r4, r3
 8001b48:	bb44      	cbnz	r4, 8001b9c <_malloc_r+0x88>
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f7ff ffbf 	bl	8001ad0 <sbrk_aligned>
 8001b52:	1c43      	adds	r3, r0, #1
 8001b54:	4604      	mov	r4, r0
 8001b56:	d158      	bne.n	8001c0a <_malloc_r+0xf6>
 8001b58:	f8d8 4000 	ldr.w	r4, [r8]
 8001b5c:	4627      	mov	r7, r4
 8001b5e:	2f00      	cmp	r7, #0
 8001b60:	d143      	bne.n	8001bea <_malloc_r+0xd6>
 8001b62:	2c00      	cmp	r4, #0
 8001b64:	d04b      	beq.n	8001bfe <_malloc_r+0xea>
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	4639      	mov	r1, r7
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	eb04 0903 	add.w	r9, r4, r3
 8001b70:	f000 fc64 	bl	800243c <_sbrk_r>
 8001b74:	4581      	cmp	r9, r0
 8001b76:	d142      	bne.n	8001bfe <_malloc_r+0xea>
 8001b78:	6821      	ldr	r1, [r4, #0]
 8001b7a:	1a6d      	subs	r5, r5, r1
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f7ff ffa6 	bl	8001ad0 <sbrk_aligned>
 8001b84:	3001      	adds	r0, #1
 8001b86:	d03a      	beq.n	8001bfe <_malloc_r+0xea>
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	442b      	add	r3, r5
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	bb62      	cbnz	r2, 8001bf0 <_malloc_r+0xdc>
 8001b96:	f8c8 7000 	str.w	r7, [r8]
 8001b9a:	e00f      	b.n	8001bbc <_malloc_r+0xa8>
 8001b9c:	6822      	ldr	r2, [r4, #0]
 8001b9e:	1b52      	subs	r2, r2, r5
 8001ba0:	d420      	bmi.n	8001be4 <_malloc_r+0xd0>
 8001ba2:	2a0b      	cmp	r2, #11
 8001ba4:	d917      	bls.n	8001bd6 <_malloc_r+0xc2>
 8001ba6:	1961      	adds	r1, r4, r5
 8001ba8:	42a3      	cmp	r3, r4
 8001baa:	6025      	str	r5, [r4, #0]
 8001bac:	bf18      	it	ne
 8001bae:	6059      	strne	r1, [r3, #4]
 8001bb0:	6863      	ldr	r3, [r4, #4]
 8001bb2:	bf08      	it	eq
 8001bb4:	f8c8 1000 	streq.w	r1, [r8]
 8001bb8:	5162      	str	r2, [r4, r5]
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f000 f82f 	bl	8001c20 <__malloc_unlock>
 8001bc2:	f104 000b 	add.w	r0, r4, #11
 8001bc6:	1d23      	adds	r3, r4, #4
 8001bc8:	f020 0007 	bic.w	r0, r0, #7
 8001bcc:	1ac2      	subs	r2, r0, r3
 8001bce:	bf1c      	itt	ne
 8001bd0:	1a1b      	subne	r3, r3, r0
 8001bd2:	50a3      	strne	r3, [r4, r2]
 8001bd4:	e7af      	b.n	8001b36 <_malloc_r+0x22>
 8001bd6:	6862      	ldr	r2, [r4, #4]
 8001bd8:	42a3      	cmp	r3, r4
 8001bda:	bf0c      	ite	eq
 8001bdc:	f8c8 2000 	streq.w	r2, [r8]
 8001be0:	605a      	strne	r2, [r3, #4]
 8001be2:	e7eb      	b.n	8001bbc <_malloc_r+0xa8>
 8001be4:	4623      	mov	r3, r4
 8001be6:	6864      	ldr	r4, [r4, #4]
 8001be8:	e7ae      	b.n	8001b48 <_malloc_r+0x34>
 8001bea:	463c      	mov	r4, r7
 8001bec:	687f      	ldr	r7, [r7, #4]
 8001bee:	e7b6      	b.n	8001b5e <_malloc_r+0x4a>
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	42a3      	cmp	r3, r4
 8001bf6:	d1fb      	bne.n	8001bf0 <_malloc_r+0xdc>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6053      	str	r3, [r2, #4]
 8001bfc:	e7de      	b.n	8001bbc <_malloc_r+0xa8>
 8001bfe:	230c      	movs	r3, #12
 8001c00:	6033      	str	r3, [r6, #0]
 8001c02:	4630      	mov	r0, r6
 8001c04:	f000 f80c 	bl	8001c20 <__malloc_unlock>
 8001c08:	e794      	b.n	8001b34 <_malloc_r+0x20>
 8001c0a:	6005      	str	r5, [r0, #0]
 8001c0c:	e7d6      	b.n	8001bbc <_malloc_r+0xa8>
 8001c0e:	bf00      	nop
 8001c10:	2000061c 	.word	0x2000061c

08001c14 <__malloc_lock>:
 8001c14:	4801      	ldr	r0, [pc, #4]	@ (8001c1c <__malloc_lock+0x8>)
 8001c16:	f7ff bf0e 	b.w	8001a36 <__retarget_lock_acquire_recursive>
 8001c1a:	bf00      	nop
 8001c1c:	20000614 	.word	0x20000614

08001c20 <__malloc_unlock>:
 8001c20:	4801      	ldr	r0, [pc, #4]	@ (8001c28 <__malloc_unlock+0x8>)
 8001c22:	f7ff bf09 	b.w	8001a38 <__retarget_lock_release_recursive>
 8001c26:	bf00      	nop
 8001c28:	20000614 	.word	0x20000614

08001c2c <__sfputc_r>:
 8001c2c:	6893      	ldr	r3, [r2, #8]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	b410      	push	{r4}
 8001c34:	6093      	str	r3, [r2, #8]
 8001c36:	da07      	bge.n	8001c48 <__sfputc_r+0x1c>
 8001c38:	6994      	ldr	r4, [r2, #24]
 8001c3a:	42a3      	cmp	r3, r4
 8001c3c:	db01      	blt.n	8001c42 <__sfputc_r+0x16>
 8001c3e:	290a      	cmp	r1, #10
 8001c40:	d102      	bne.n	8001c48 <__sfputc_r+0x1c>
 8001c42:	bc10      	pop	{r4}
 8001c44:	f000 bb66 	b.w	8002314 <__swbuf_r>
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	1c58      	adds	r0, r3, #1
 8001c4c:	6010      	str	r0, [r2, #0]
 8001c4e:	7019      	strb	r1, [r3, #0]
 8001c50:	4608      	mov	r0, r1
 8001c52:	bc10      	pop	{r4}
 8001c54:	4770      	bx	lr

08001c56 <__sfputs_r>:
 8001c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c58:	4606      	mov	r6, r0
 8001c5a:	460f      	mov	r7, r1
 8001c5c:	4614      	mov	r4, r2
 8001c5e:	18d5      	adds	r5, r2, r3
 8001c60:	42ac      	cmp	r4, r5
 8001c62:	d101      	bne.n	8001c68 <__sfputs_r+0x12>
 8001c64:	2000      	movs	r0, #0
 8001c66:	e007      	b.n	8001c78 <__sfputs_r+0x22>
 8001c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c6c:	463a      	mov	r2, r7
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff ffdc 	bl	8001c2c <__sfputc_r>
 8001c74:	1c43      	adds	r3, r0, #1
 8001c76:	d1f3      	bne.n	8001c60 <__sfputs_r+0xa>
 8001c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c7c <_vfiprintf_r>:
 8001c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c80:	460d      	mov	r5, r1
 8001c82:	b09d      	sub	sp, #116	@ 0x74
 8001c84:	4614      	mov	r4, r2
 8001c86:	4698      	mov	r8, r3
 8001c88:	4606      	mov	r6, r0
 8001c8a:	b118      	cbz	r0, 8001c94 <_vfiprintf_r+0x18>
 8001c8c:	6a03      	ldr	r3, [r0, #32]
 8001c8e:	b90b      	cbnz	r3, 8001c94 <_vfiprintf_r+0x18>
 8001c90:	f7ff fdcc 	bl	800182c <__sinit>
 8001c94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c96:	07d9      	lsls	r1, r3, #31
 8001c98:	d405      	bmi.n	8001ca6 <_vfiprintf_r+0x2a>
 8001c9a:	89ab      	ldrh	r3, [r5, #12]
 8001c9c:	059a      	lsls	r2, r3, #22
 8001c9e:	d402      	bmi.n	8001ca6 <_vfiprintf_r+0x2a>
 8001ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ca2:	f7ff fec8 	bl	8001a36 <__retarget_lock_acquire_recursive>
 8001ca6:	89ab      	ldrh	r3, [r5, #12]
 8001ca8:	071b      	lsls	r3, r3, #28
 8001caa:	d501      	bpl.n	8001cb0 <_vfiprintf_r+0x34>
 8001cac:	692b      	ldr	r3, [r5, #16]
 8001cae:	b99b      	cbnz	r3, 8001cd8 <_vfiprintf_r+0x5c>
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	4630      	mov	r0, r6
 8001cb4:	f000 fb6c 	bl	8002390 <__swsetup_r>
 8001cb8:	b170      	cbz	r0, 8001cd8 <_vfiprintf_r+0x5c>
 8001cba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001cbc:	07dc      	lsls	r4, r3, #31
 8001cbe:	d504      	bpl.n	8001cca <_vfiprintf_r+0x4e>
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	b01d      	add	sp, #116	@ 0x74
 8001cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cca:	89ab      	ldrh	r3, [r5, #12]
 8001ccc:	0598      	lsls	r0, r3, #22
 8001cce:	d4f7      	bmi.n	8001cc0 <_vfiprintf_r+0x44>
 8001cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001cd2:	f7ff feb1 	bl	8001a38 <__retarget_lock_release_recursive>
 8001cd6:	e7f3      	b.n	8001cc0 <_vfiprintf_r+0x44>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8001cdc:	2320      	movs	r3, #32
 8001cde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ce6:	2330      	movs	r3, #48	@ 0x30
 8001ce8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001e98 <_vfiprintf_r+0x21c>
 8001cec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001cf0:	f04f 0901 	mov.w	r9, #1
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	469a      	mov	sl, r3
 8001cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cfc:	b10a      	cbz	r2, 8001d02 <_vfiprintf_r+0x86>
 8001cfe:	2a25      	cmp	r2, #37	@ 0x25
 8001d00:	d1f9      	bne.n	8001cf6 <_vfiprintf_r+0x7a>
 8001d02:	ebba 0b04 	subs.w	fp, sl, r4
 8001d06:	d00b      	beq.n	8001d20 <_vfiprintf_r+0xa4>
 8001d08:	465b      	mov	r3, fp
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	4630      	mov	r0, r6
 8001d10:	f7ff ffa1 	bl	8001c56 <__sfputs_r>
 8001d14:	3001      	adds	r0, #1
 8001d16:	f000 80a7 	beq.w	8001e68 <_vfiprintf_r+0x1ec>
 8001d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d1c:	445a      	add	r2, fp
 8001d1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d20:	f89a 3000 	ldrb.w	r3, [sl]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 809f 	beq.w	8001e68 <_vfiprintf_r+0x1ec>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d34:	f10a 0a01 	add.w	sl, sl, #1
 8001d38:	9304      	str	r3, [sp, #16]
 8001d3a:	9307      	str	r3, [sp, #28]
 8001d3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d40:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d42:	4654      	mov	r4, sl
 8001d44:	2205      	movs	r2, #5
 8001d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d4a:	4853      	ldr	r0, [pc, #332]	@ (8001e98 <_vfiprintf_r+0x21c>)
 8001d4c:	f7fe fa68 	bl	8000220 <memchr>
 8001d50:	9a04      	ldr	r2, [sp, #16]
 8001d52:	b9d8      	cbnz	r0, 8001d8c <_vfiprintf_r+0x110>
 8001d54:	06d1      	lsls	r1, r2, #27
 8001d56:	bf44      	itt	mi
 8001d58:	2320      	movmi	r3, #32
 8001d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d5e:	0713      	lsls	r3, r2, #28
 8001d60:	bf44      	itt	mi
 8001d62:	232b      	movmi	r3, #43	@ 0x2b
 8001d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d68:	f89a 3000 	ldrb.w	r3, [sl]
 8001d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d6e:	d015      	beq.n	8001d9c <_vfiprintf_r+0x120>
 8001d70:	9a07      	ldr	r2, [sp, #28]
 8001d72:	4654      	mov	r4, sl
 8001d74:	2000      	movs	r0, #0
 8001d76:	f04f 0c0a 	mov.w	ip, #10
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d80:	3b30      	subs	r3, #48	@ 0x30
 8001d82:	2b09      	cmp	r3, #9
 8001d84:	d94b      	bls.n	8001e1e <_vfiprintf_r+0x1a2>
 8001d86:	b1b0      	cbz	r0, 8001db6 <_vfiprintf_r+0x13a>
 8001d88:	9207      	str	r2, [sp, #28]
 8001d8a:	e014      	b.n	8001db6 <_vfiprintf_r+0x13a>
 8001d8c:	eba0 0308 	sub.w	r3, r0, r8
 8001d90:	fa09 f303 	lsl.w	r3, r9, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	46a2      	mov	sl, r4
 8001d9a:	e7d2      	b.n	8001d42 <_vfiprintf_r+0xc6>
 8001d9c:	9b03      	ldr	r3, [sp, #12]
 8001d9e:	1d19      	adds	r1, r3, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	9103      	str	r1, [sp, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bfbb      	ittet	lt
 8001da8:	425b      	neglt	r3, r3
 8001daa:	f042 0202 	orrlt.w	r2, r2, #2
 8001dae:	9307      	strge	r3, [sp, #28]
 8001db0:	9307      	strlt	r3, [sp, #28]
 8001db2:	bfb8      	it	lt
 8001db4:	9204      	strlt	r2, [sp, #16]
 8001db6:	7823      	ldrb	r3, [r4, #0]
 8001db8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dba:	d10a      	bne.n	8001dd2 <_vfiprintf_r+0x156>
 8001dbc:	7863      	ldrb	r3, [r4, #1]
 8001dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dc0:	d132      	bne.n	8001e28 <_vfiprintf_r+0x1ac>
 8001dc2:	9b03      	ldr	r3, [sp, #12]
 8001dc4:	1d1a      	adds	r2, r3, #4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	9203      	str	r2, [sp, #12]
 8001dca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001dce:	3402      	adds	r4, #2
 8001dd0:	9305      	str	r3, [sp, #20]
 8001dd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001e9c <_vfiprintf_r+0x220>
 8001dd6:	7821      	ldrb	r1, [r4, #0]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4650      	mov	r0, sl
 8001ddc:	f7fe fa20 	bl	8000220 <memchr>
 8001de0:	b138      	cbz	r0, 8001df2 <_vfiprintf_r+0x176>
 8001de2:	9b04      	ldr	r3, [sp, #16]
 8001de4:	eba0 000a 	sub.w	r0, r0, sl
 8001de8:	2240      	movs	r2, #64	@ 0x40
 8001dea:	4082      	lsls	r2, r0
 8001dec:	4313      	orrs	r3, r2
 8001dee:	3401      	adds	r4, #1
 8001df0:	9304      	str	r3, [sp, #16]
 8001df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001df6:	482a      	ldr	r0, [pc, #168]	@ (8001ea0 <_vfiprintf_r+0x224>)
 8001df8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001dfc:	2206      	movs	r2, #6
 8001dfe:	f7fe fa0f 	bl	8000220 <memchr>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d03f      	beq.n	8001e86 <_vfiprintf_r+0x20a>
 8001e06:	4b27      	ldr	r3, [pc, #156]	@ (8001ea4 <_vfiprintf_r+0x228>)
 8001e08:	bb1b      	cbnz	r3, 8001e52 <_vfiprintf_r+0x1d6>
 8001e0a:	9b03      	ldr	r3, [sp, #12]
 8001e0c:	3307      	adds	r3, #7
 8001e0e:	f023 0307 	bic.w	r3, r3, #7
 8001e12:	3308      	adds	r3, #8
 8001e14:	9303      	str	r3, [sp, #12]
 8001e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e18:	443b      	add	r3, r7
 8001e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e1c:	e76a      	b.n	8001cf4 <_vfiprintf_r+0x78>
 8001e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e22:	460c      	mov	r4, r1
 8001e24:	2001      	movs	r0, #1
 8001e26:	e7a8      	b.n	8001d7a <_vfiprintf_r+0xfe>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	3401      	adds	r4, #1
 8001e2c:	9305      	str	r3, [sp, #20]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f04f 0c0a 	mov.w	ip, #10
 8001e34:	4620      	mov	r0, r4
 8001e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e3a:	3a30      	subs	r2, #48	@ 0x30
 8001e3c:	2a09      	cmp	r2, #9
 8001e3e:	d903      	bls.n	8001e48 <_vfiprintf_r+0x1cc>
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0c6      	beq.n	8001dd2 <_vfiprintf_r+0x156>
 8001e44:	9105      	str	r1, [sp, #20]
 8001e46:	e7c4      	b.n	8001dd2 <_vfiprintf_r+0x156>
 8001e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e7f0      	b.n	8001e34 <_vfiprintf_r+0x1b8>
 8001e52:	ab03      	add	r3, sp, #12
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	462a      	mov	r2, r5
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <_vfiprintf_r+0x22c>)
 8001e5a:	a904      	add	r1, sp, #16
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f3af 8000 	nop.w
 8001e62:	4607      	mov	r7, r0
 8001e64:	1c78      	adds	r0, r7, #1
 8001e66:	d1d6      	bne.n	8001e16 <_vfiprintf_r+0x19a>
 8001e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e6a:	07d9      	lsls	r1, r3, #31
 8001e6c:	d405      	bmi.n	8001e7a <_vfiprintf_r+0x1fe>
 8001e6e:	89ab      	ldrh	r3, [r5, #12]
 8001e70:	059a      	lsls	r2, r3, #22
 8001e72:	d402      	bmi.n	8001e7a <_vfiprintf_r+0x1fe>
 8001e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e76:	f7ff fddf 	bl	8001a38 <__retarget_lock_release_recursive>
 8001e7a:	89ab      	ldrh	r3, [r5, #12]
 8001e7c:	065b      	lsls	r3, r3, #25
 8001e7e:	f53f af1f 	bmi.w	8001cc0 <_vfiprintf_r+0x44>
 8001e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001e84:	e71e      	b.n	8001cc4 <_vfiprintf_r+0x48>
 8001e86:	ab03      	add	r3, sp, #12
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	462a      	mov	r2, r5
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <_vfiprintf_r+0x22c>)
 8001e8e:	a904      	add	r1, sp, #16
 8001e90:	4630      	mov	r0, r6
 8001e92:	f000 f879 	bl	8001f88 <_printf_i>
 8001e96:	e7e4      	b.n	8001e62 <_vfiprintf_r+0x1e6>
 8001e98:	080025d1 	.word	0x080025d1
 8001e9c:	080025d7 	.word	0x080025d7
 8001ea0:	080025db 	.word	0x080025db
 8001ea4:	00000000 	.word	0x00000000
 8001ea8:	08001c57 	.word	0x08001c57

08001eac <_printf_common>:
 8001eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb0:	4616      	mov	r6, r2
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	688a      	ldr	r2, [r1, #8]
 8001eb6:	690b      	ldr	r3, [r1, #16]
 8001eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	bfb8      	it	lt
 8001ec0:	4613      	movlt	r3, r2
 8001ec2:	6033      	str	r3, [r6, #0]
 8001ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ec8:	4607      	mov	r7, r0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	b10a      	cbz	r2, 8001ed2 <_printf_common+0x26>
 8001ece:	3301      	adds	r3, #1
 8001ed0:	6033      	str	r3, [r6, #0]
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	0699      	lsls	r1, r3, #26
 8001ed6:	bf42      	ittt	mi
 8001ed8:	6833      	ldrmi	r3, [r6, #0]
 8001eda:	3302      	addmi	r3, #2
 8001edc:	6033      	strmi	r3, [r6, #0]
 8001ede:	6825      	ldr	r5, [r4, #0]
 8001ee0:	f015 0506 	ands.w	r5, r5, #6
 8001ee4:	d106      	bne.n	8001ef4 <_printf_common+0x48>
 8001ee6:	f104 0a19 	add.w	sl, r4, #25
 8001eea:	68e3      	ldr	r3, [r4, #12]
 8001eec:	6832      	ldr	r2, [r6, #0]
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	42ab      	cmp	r3, r5
 8001ef2:	dc26      	bgt.n	8001f42 <_printf_common+0x96>
 8001ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	3b00      	subs	r3, #0
 8001efc:	bf18      	it	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	0692      	lsls	r2, r2, #26
 8001f02:	d42b      	bmi.n	8001f5c <_printf_common+0xb0>
 8001f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f08:	4641      	mov	r1, r8
 8001f0a:	4638      	mov	r0, r7
 8001f0c:	47c8      	blx	r9
 8001f0e:	3001      	adds	r0, #1
 8001f10:	d01e      	beq.n	8001f50 <_printf_common+0xa4>
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	6922      	ldr	r2, [r4, #16]
 8001f16:	f003 0306 	and.w	r3, r3, #6
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	bf02      	ittt	eq
 8001f1e:	68e5      	ldreq	r5, [r4, #12]
 8001f20:	6833      	ldreq	r3, [r6, #0]
 8001f22:	1aed      	subeq	r5, r5, r3
 8001f24:	68a3      	ldr	r3, [r4, #8]
 8001f26:	bf0c      	ite	eq
 8001f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f2c:	2500      	movne	r5, #0
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	bfc4      	itt	gt
 8001f32:	1a9b      	subgt	r3, r3, r2
 8001f34:	18ed      	addgt	r5, r5, r3
 8001f36:	2600      	movs	r6, #0
 8001f38:	341a      	adds	r4, #26
 8001f3a:	42b5      	cmp	r5, r6
 8001f3c:	d11a      	bne.n	8001f74 <_printf_common+0xc8>
 8001f3e:	2000      	movs	r0, #0
 8001f40:	e008      	b.n	8001f54 <_printf_common+0xa8>
 8001f42:	2301      	movs	r3, #1
 8001f44:	4652      	mov	r2, sl
 8001f46:	4641      	mov	r1, r8
 8001f48:	4638      	mov	r0, r7
 8001f4a:	47c8      	blx	r9
 8001f4c:	3001      	adds	r0, #1
 8001f4e:	d103      	bne.n	8001f58 <_printf_common+0xac>
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f58:	3501      	adds	r5, #1
 8001f5a:	e7c6      	b.n	8001eea <_printf_common+0x3e>
 8001f5c:	18e1      	adds	r1, r4, r3
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	2030      	movs	r0, #48	@ 0x30
 8001f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f66:	4422      	add	r2, r4
 8001f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f70:	3302      	adds	r3, #2
 8001f72:	e7c7      	b.n	8001f04 <_printf_common+0x58>
 8001f74:	2301      	movs	r3, #1
 8001f76:	4622      	mov	r2, r4
 8001f78:	4641      	mov	r1, r8
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	47c8      	blx	r9
 8001f7e:	3001      	adds	r0, #1
 8001f80:	d0e6      	beq.n	8001f50 <_printf_common+0xa4>
 8001f82:	3601      	adds	r6, #1
 8001f84:	e7d9      	b.n	8001f3a <_printf_common+0x8e>
	...

08001f88 <_printf_i>:
 8001f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f8c:	7e0f      	ldrb	r7, [r1, #24]
 8001f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f90:	2f78      	cmp	r7, #120	@ 0x78
 8001f92:	4691      	mov	r9, r2
 8001f94:	4680      	mov	r8, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	469a      	mov	sl, r3
 8001f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f9e:	d807      	bhi.n	8001fb0 <_printf_i+0x28>
 8001fa0:	2f62      	cmp	r7, #98	@ 0x62
 8001fa2:	d80a      	bhi.n	8001fba <_printf_i+0x32>
 8001fa4:	2f00      	cmp	r7, #0
 8001fa6:	f000 80d1 	beq.w	800214c <_printf_i+0x1c4>
 8001faa:	2f58      	cmp	r7, #88	@ 0x58
 8001fac:	f000 80b8 	beq.w	8002120 <_printf_i+0x198>
 8001fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fb8:	e03a      	b.n	8002030 <_printf_i+0xa8>
 8001fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fbe:	2b15      	cmp	r3, #21
 8001fc0:	d8f6      	bhi.n	8001fb0 <_printf_i+0x28>
 8001fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8001fc8 <_printf_i+0x40>)
 8001fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fc8:	08002021 	.word	0x08002021
 8001fcc:	08002035 	.word	0x08002035
 8001fd0:	08001fb1 	.word	0x08001fb1
 8001fd4:	08001fb1 	.word	0x08001fb1
 8001fd8:	08001fb1 	.word	0x08001fb1
 8001fdc:	08001fb1 	.word	0x08001fb1
 8001fe0:	08002035 	.word	0x08002035
 8001fe4:	08001fb1 	.word	0x08001fb1
 8001fe8:	08001fb1 	.word	0x08001fb1
 8001fec:	08001fb1 	.word	0x08001fb1
 8001ff0:	08001fb1 	.word	0x08001fb1
 8001ff4:	08002133 	.word	0x08002133
 8001ff8:	0800205f 	.word	0x0800205f
 8001ffc:	080020ed 	.word	0x080020ed
 8002000:	08001fb1 	.word	0x08001fb1
 8002004:	08001fb1 	.word	0x08001fb1
 8002008:	08002155 	.word	0x08002155
 800200c:	08001fb1 	.word	0x08001fb1
 8002010:	0800205f 	.word	0x0800205f
 8002014:	08001fb1 	.word	0x08001fb1
 8002018:	08001fb1 	.word	0x08001fb1
 800201c:	080020f5 	.word	0x080020f5
 8002020:	6833      	ldr	r3, [r6, #0]
 8002022:	1d1a      	adds	r2, r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6032      	str	r2, [r6, #0]
 8002028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800202c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002030:	2301      	movs	r3, #1
 8002032:	e09c      	b.n	800216e <_printf_i+0x1e6>
 8002034:	6833      	ldr	r3, [r6, #0]
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	1d19      	adds	r1, r3, #4
 800203a:	6031      	str	r1, [r6, #0]
 800203c:	0606      	lsls	r6, r0, #24
 800203e:	d501      	bpl.n	8002044 <_printf_i+0xbc>
 8002040:	681d      	ldr	r5, [r3, #0]
 8002042:	e003      	b.n	800204c <_printf_i+0xc4>
 8002044:	0645      	lsls	r5, r0, #25
 8002046:	d5fb      	bpl.n	8002040 <_printf_i+0xb8>
 8002048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800204c:	2d00      	cmp	r5, #0
 800204e:	da03      	bge.n	8002058 <_printf_i+0xd0>
 8002050:	232d      	movs	r3, #45	@ 0x2d
 8002052:	426d      	negs	r5, r5
 8002054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002058:	4858      	ldr	r0, [pc, #352]	@ (80021bc <_printf_i+0x234>)
 800205a:	230a      	movs	r3, #10
 800205c:	e011      	b.n	8002082 <_printf_i+0xfa>
 800205e:	6821      	ldr	r1, [r4, #0]
 8002060:	6833      	ldr	r3, [r6, #0]
 8002062:	0608      	lsls	r0, r1, #24
 8002064:	f853 5b04 	ldr.w	r5, [r3], #4
 8002068:	d402      	bmi.n	8002070 <_printf_i+0xe8>
 800206a:	0649      	lsls	r1, r1, #25
 800206c:	bf48      	it	mi
 800206e:	b2ad      	uxthmi	r5, r5
 8002070:	2f6f      	cmp	r7, #111	@ 0x6f
 8002072:	4852      	ldr	r0, [pc, #328]	@ (80021bc <_printf_i+0x234>)
 8002074:	6033      	str	r3, [r6, #0]
 8002076:	bf14      	ite	ne
 8002078:	230a      	movne	r3, #10
 800207a:	2308      	moveq	r3, #8
 800207c:	2100      	movs	r1, #0
 800207e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002082:	6866      	ldr	r6, [r4, #4]
 8002084:	60a6      	str	r6, [r4, #8]
 8002086:	2e00      	cmp	r6, #0
 8002088:	db05      	blt.n	8002096 <_printf_i+0x10e>
 800208a:	6821      	ldr	r1, [r4, #0]
 800208c:	432e      	orrs	r6, r5
 800208e:	f021 0104 	bic.w	r1, r1, #4
 8002092:	6021      	str	r1, [r4, #0]
 8002094:	d04b      	beq.n	800212e <_printf_i+0x1a6>
 8002096:	4616      	mov	r6, r2
 8002098:	fbb5 f1f3 	udiv	r1, r5, r3
 800209c:	fb03 5711 	mls	r7, r3, r1, r5
 80020a0:	5dc7      	ldrb	r7, [r0, r7]
 80020a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020a6:	462f      	mov	r7, r5
 80020a8:	42bb      	cmp	r3, r7
 80020aa:	460d      	mov	r5, r1
 80020ac:	d9f4      	bls.n	8002098 <_printf_i+0x110>
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d10b      	bne.n	80020ca <_printf_i+0x142>
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	07df      	lsls	r7, r3, #31
 80020b6:	d508      	bpl.n	80020ca <_printf_i+0x142>
 80020b8:	6923      	ldr	r3, [r4, #16]
 80020ba:	6861      	ldr	r1, [r4, #4]
 80020bc:	4299      	cmp	r1, r3
 80020be:	bfde      	ittt	le
 80020c0:	2330      	movle	r3, #48	@ 0x30
 80020c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020ca:	1b92      	subs	r2, r2, r6
 80020cc:	6122      	str	r2, [r4, #16]
 80020ce:	f8cd a000 	str.w	sl, [sp]
 80020d2:	464b      	mov	r3, r9
 80020d4:	aa03      	add	r2, sp, #12
 80020d6:	4621      	mov	r1, r4
 80020d8:	4640      	mov	r0, r8
 80020da:	f7ff fee7 	bl	8001eac <_printf_common>
 80020de:	3001      	adds	r0, #1
 80020e0:	d14a      	bne.n	8002178 <_printf_i+0x1f0>
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295
 80020e6:	b004      	add	sp, #16
 80020e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	f043 0320 	orr.w	r3, r3, #32
 80020f2:	6023      	str	r3, [r4, #0]
 80020f4:	4832      	ldr	r0, [pc, #200]	@ (80021c0 <_printf_i+0x238>)
 80020f6:	2778      	movs	r7, #120	@ 0x78
 80020f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	6831      	ldr	r1, [r6, #0]
 8002100:	061f      	lsls	r7, r3, #24
 8002102:	f851 5b04 	ldr.w	r5, [r1], #4
 8002106:	d402      	bmi.n	800210e <_printf_i+0x186>
 8002108:	065f      	lsls	r7, r3, #25
 800210a:	bf48      	it	mi
 800210c:	b2ad      	uxthmi	r5, r5
 800210e:	6031      	str	r1, [r6, #0]
 8002110:	07d9      	lsls	r1, r3, #31
 8002112:	bf44      	itt	mi
 8002114:	f043 0320 	orrmi.w	r3, r3, #32
 8002118:	6023      	strmi	r3, [r4, #0]
 800211a:	b11d      	cbz	r5, 8002124 <_printf_i+0x19c>
 800211c:	2310      	movs	r3, #16
 800211e:	e7ad      	b.n	800207c <_printf_i+0xf4>
 8002120:	4826      	ldr	r0, [pc, #152]	@ (80021bc <_printf_i+0x234>)
 8002122:	e7e9      	b.n	80020f8 <_printf_i+0x170>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	f023 0320 	bic.w	r3, r3, #32
 800212a:	6023      	str	r3, [r4, #0]
 800212c:	e7f6      	b.n	800211c <_printf_i+0x194>
 800212e:	4616      	mov	r6, r2
 8002130:	e7bd      	b.n	80020ae <_printf_i+0x126>
 8002132:	6833      	ldr	r3, [r6, #0]
 8002134:	6825      	ldr	r5, [r4, #0]
 8002136:	6961      	ldr	r1, [r4, #20]
 8002138:	1d18      	adds	r0, r3, #4
 800213a:	6030      	str	r0, [r6, #0]
 800213c:	062e      	lsls	r6, r5, #24
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	d501      	bpl.n	8002146 <_printf_i+0x1be>
 8002142:	6019      	str	r1, [r3, #0]
 8002144:	e002      	b.n	800214c <_printf_i+0x1c4>
 8002146:	0668      	lsls	r0, r5, #25
 8002148:	d5fb      	bpl.n	8002142 <_printf_i+0x1ba>
 800214a:	8019      	strh	r1, [r3, #0]
 800214c:	2300      	movs	r3, #0
 800214e:	6123      	str	r3, [r4, #16]
 8002150:	4616      	mov	r6, r2
 8002152:	e7bc      	b.n	80020ce <_printf_i+0x146>
 8002154:	6833      	ldr	r3, [r6, #0]
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	6032      	str	r2, [r6, #0]
 800215a:	681e      	ldr	r6, [r3, #0]
 800215c:	6862      	ldr	r2, [r4, #4]
 800215e:	2100      	movs	r1, #0
 8002160:	4630      	mov	r0, r6
 8002162:	f7fe f85d 	bl	8000220 <memchr>
 8002166:	b108      	cbz	r0, 800216c <_printf_i+0x1e4>
 8002168:	1b80      	subs	r0, r0, r6
 800216a:	6060      	str	r0, [r4, #4]
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	6123      	str	r3, [r4, #16]
 8002170:	2300      	movs	r3, #0
 8002172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002176:	e7aa      	b.n	80020ce <_printf_i+0x146>
 8002178:	6923      	ldr	r3, [r4, #16]
 800217a:	4632      	mov	r2, r6
 800217c:	4649      	mov	r1, r9
 800217e:	4640      	mov	r0, r8
 8002180:	47d0      	blx	sl
 8002182:	3001      	adds	r0, #1
 8002184:	d0ad      	beq.n	80020e2 <_printf_i+0x15a>
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	079b      	lsls	r3, r3, #30
 800218a:	d413      	bmi.n	80021b4 <_printf_i+0x22c>
 800218c:	68e0      	ldr	r0, [r4, #12]
 800218e:	9b03      	ldr	r3, [sp, #12]
 8002190:	4298      	cmp	r0, r3
 8002192:	bfb8      	it	lt
 8002194:	4618      	movlt	r0, r3
 8002196:	e7a6      	b.n	80020e6 <_printf_i+0x15e>
 8002198:	2301      	movs	r3, #1
 800219a:	4632      	mov	r2, r6
 800219c:	4649      	mov	r1, r9
 800219e:	4640      	mov	r0, r8
 80021a0:	47d0      	blx	sl
 80021a2:	3001      	adds	r0, #1
 80021a4:	d09d      	beq.n	80020e2 <_printf_i+0x15a>
 80021a6:	3501      	adds	r5, #1
 80021a8:	68e3      	ldr	r3, [r4, #12]
 80021aa:	9903      	ldr	r1, [sp, #12]
 80021ac:	1a5b      	subs	r3, r3, r1
 80021ae:	42ab      	cmp	r3, r5
 80021b0:	dcf2      	bgt.n	8002198 <_printf_i+0x210>
 80021b2:	e7eb      	b.n	800218c <_printf_i+0x204>
 80021b4:	2500      	movs	r5, #0
 80021b6:	f104 0619 	add.w	r6, r4, #25
 80021ba:	e7f5      	b.n	80021a8 <_printf_i+0x220>
 80021bc:	080025e2 	.word	0x080025e2
 80021c0:	080025f3 	.word	0x080025f3

080021c4 <__sflush_r>:
 80021c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	0716      	lsls	r6, r2, #28
 80021cc:	4605      	mov	r5, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	d454      	bmi.n	800227c <__sflush_r+0xb8>
 80021d2:	684b      	ldr	r3, [r1, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	dc02      	bgt.n	80021de <__sflush_r+0x1a>
 80021d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	dd48      	ble.n	8002270 <__sflush_r+0xac>
 80021de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021e0:	2e00      	cmp	r6, #0
 80021e2:	d045      	beq.n	8002270 <__sflush_r+0xac>
 80021e4:	2300      	movs	r3, #0
 80021e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80021ea:	682f      	ldr	r7, [r5, #0]
 80021ec:	6a21      	ldr	r1, [r4, #32]
 80021ee:	602b      	str	r3, [r5, #0]
 80021f0:	d030      	beq.n	8002254 <__sflush_r+0x90>
 80021f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	0759      	lsls	r1, r3, #29
 80021f8:	d505      	bpl.n	8002206 <__sflush_r+0x42>
 80021fa:	6863      	ldr	r3, [r4, #4]
 80021fc:	1ad2      	subs	r2, r2, r3
 80021fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002200:	b10b      	cbz	r3, 8002206 <__sflush_r+0x42>
 8002202:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002204:	1ad2      	subs	r2, r2, r3
 8002206:	2300      	movs	r3, #0
 8002208:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800220a:	6a21      	ldr	r1, [r4, #32]
 800220c:	4628      	mov	r0, r5
 800220e:	47b0      	blx	r6
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	89a3      	ldrh	r3, [r4, #12]
 8002214:	d106      	bne.n	8002224 <__sflush_r+0x60>
 8002216:	6829      	ldr	r1, [r5, #0]
 8002218:	291d      	cmp	r1, #29
 800221a:	d82b      	bhi.n	8002274 <__sflush_r+0xb0>
 800221c:	4a28      	ldr	r2, [pc, #160]	@ (80022c0 <__sflush_r+0xfc>)
 800221e:	40ca      	lsrs	r2, r1
 8002220:	07d6      	lsls	r6, r2, #31
 8002222:	d527      	bpl.n	8002274 <__sflush_r+0xb0>
 8002224:	2200      	movs	r2, #0
 8002226:	6062      	str	r2, [r4, #4]
 8002228:	04d9      	lsls	r1, r3, #19
 800222a:	6922      	ldr	r2, [r4, #16]
 800222c:	6022      	str	r2, [r4, #0]
 800222e:	d504      	bpl.n	800223a <__sflush_r+0x76>
 8002230:	1c42      	adds	r2, r0, #1
 8002232:	d101      	bne.n	8002238 <__sflush_r+0x74>
 8002234:	682b      	ldr	r3, [r5, #0]
 8002236:	b903      	cbnz	r3, 800223a <__sflush_r+0x76>
 8002238:	6560      	str	r0, [r4, #84]	@ 0x54
 800223a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800223c:	602f      	str	r7, [r5, #0]
 800223e:	b1b9      	cbz	r1, 8002270 <__sflush_r+0xac>
 8002240:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002244:	4299      	cmp	r1, r3
 8002246:	d002      	beq.n	800224e <__sflush_r+0x8a>
 8002248:	4628      	mov	r0, r5
 800224a:	f7ff fbf7 	bl	8001a3c <_free_r>
 800224e:	2300      	movs	r3, #0
 8002250:	6363      	str	r3, [r4, #52]	@ 0x34
 8002252:	e00d      	b.n	8002270 <__sflush_r+0xac>
 8002254:	2301      	movs	r3, #1
 8002256:	4628      	mov	r0, r5
 8002258:	47b0      	blx	r6
 800225a:	4602      	mov	r2, r0
 800225c:	1c50      	adds	r0, r2, #1
 800225e:	d1c9      	bne.n	80021f4 <__sflush_r+0x30>
 8002260:	682b      	ldr	r3, [r5, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0c6      	beq.n	80021f4 <__sflush_r+0x30>
 8002266:	2b1d      	cmp	r3, #29
 8002268:	d001      	beq.n	800226e <__sflush_r+0xaa>
 800226a:	2b16      	cmp	r3, #22
 800226c:	d11d      	bne.n	80022aa <__sflush_r+0xe6>
 800226e:	602f      	str	r7, [r5, #0]
 8002270:	2000      	movs	r0, #0
 8002272:	e021      	b.n	80022b8 <__sflush_r+0xf4>
 8002274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002278:	b21b      	sxth	r3, r3
 800227a:	e01a      	b.n	80022b2 <__sflush_r+0xee>
 800227c:	690f      	ldr	r7, [r1, #16]
 800227e:	2f00      	cmp	r7, #0
 8002280:	d0f6      	beq.n	8002270 <__sflush_r+0xac>
 8002282:	0793      	lsls	r3, r2, #30
 8002284:	680e      	ldr	r6, [r1, #0]
 8002286:	bf08      	it	eq
 8002288:	694b      	ldreq	r3, [r1, #20]
 800228a:	600f      	str	r7, [r1, #0]
 800228c:	bf18      	it	ne
 800228e:	2300      	movne	r3, #0
 8002290:	1bf6      	subs	r6, r6, r7
 8002292:	608b      	str	r3, [r1, #8]
 8002294:	2e00      	cmp	r6, #0
 8002296:	ddeb      	ble.n	8002270 <__sflush_r+0xac>
 8002298:	6a21      	ldr	r1, [r4, #32]
 800229a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800229e:	4633      	mov	r3, r6
 80022a0:	463a      	mov	r2, r7
 80022a2:	4628      	mov	r0, r5
 80022a4:	47e0      	blx	ip
 80022a6:	2800      	cmp	r0, #0
 80022a8:	dc07      	bgt.n	80022ba <__sflush_r+0xf6>
 80022aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b2:	81a3      	strh	r3, [r4, #12]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ba:	4407      	add	r7, r0
 80022bc:	1a36      	subs	r6, r6, r0
 80022be:	e7e9      	b.n	8002294 <__sflush_r+0xd0>
 80022c0:	20400001 	.word	0x20400001

080022c4 <_fflush_r>:
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	690b      	ldr	r3, [r1, #16]
 80022c8:	4605      	mov	r5, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	b913      	cbnz	r3, 80022d4 <_fflush_r+0x10>
 80022ce:	2500      	movs	r5, #0
 80022d0:	4628      	mov	r0, r5
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	b118      	cbz	r0, 80022de <_fflush_r+0x1a>
 80022d6:	6a03      	ldr	r3, [r0, #32]
 80022d8:	b90b      	cbnz	r3, 80022de <_fflush_r+0x1a>
 80022da:	f7ff faa7 	bl	800182c <__sinit>
 80022de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f3      	beq.n	80022ce <_fflush_r+0xa>
 80022e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80022e8:	07d0      	lsls	r0, r2, #31
 80022ea:	d404      	bmi.n	80022f6 <_fflush_r+0x32>
 80022ec:	0599      	lsls	r1, r3, #22
 80022ee:	d402      	bmi.n	80022f6 <_fflush_r+0x32>
 80022f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022f2:	f7ff fba0 	bl	8001a36 <__retarget_lock_acquire_recursive>
 80022f6:	4628      	mov	r0, r5
 80022f8:	4621      	mov	r1, r4
 80022fa:	f7ff ff63 	bl	80021c4 <__sflush_r>
 80022fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002300:	07da      	lsls	r2, r3, #31
 8002302:	4605      	mov	r5, r0
 8002304:	d4e4      	bmi.n	80022d0 <_fflush_r+0xc>
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	059b      	lsls	r3, r3, #22
 800230a:	d4e1      	bmi.n	80022d0 <_fflush_r+0xc>
 800230c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800230e:	f7ff fb93 	bl	8001a38 <__retarget_lock_release_recursive>
 8002312:	e7dd      	b.n	80022d0 <_fflush_r+0xc>

08002314 <__swbuf_r>:
 8002314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002316:	460e      	mov	r6, r1
 8002318:	4614      	mov	r4, r2
 800231a:	4605      	mov	r5, r0
 800231c:	b118      	cbz	r0, 8002326 <__swbuf_r+0x12>
 800231e:	6a03      	ldr	r3, [r0, #32]
 8002320:	b90b      	cbnz	r3, 8002326 <__swbuf_r+0x12>
 8002322:	f7ff fa83 	bl	800182c <__sinit>
 8002326:	69a3      	ldr	r3, [r4, #24]
 8002328:	60a3      	str	r3, [r4, #8]
 800232a:	89a3      	ldrh	r3, [r4, #12]
 800232c:	071a      	lsls	r2, r3, #28
 800232e:	d501      	bpl.n	8002334 <__swbuf_r+0x20>
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	b943      	cbnz	r3, 8002346 <__swbuf_r+0x32>
 8002334:	4621      	mov	r1, r4
 8002336:	4628      	mov	r0, r5
 8002338:	f000 f82a 	bl	8002390 <__swsetup_r>
 800233c:	b118      	cbz	r0, 8002346 <__swbuf_r+0x32>
 800233e:	f04f 37ff 	mov.w	r7, #4294967295
 8002342:	4638      	mov	r0, r7
 8002344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	6922      	ldr	r2, [r4, #16]
 800234a:	1a98      	subs	r0, r3, r2
 800234c:	6963      	ldr	r3, [r4, #20]
 800234e:	b2f6      	uxtb	r6, r6
 8002350:	4283      	cmp	r3, r0
 8002352:	4637      	mov	r7, r6
 8002354:	dc05      	bgt.n	8002362 <__swbuf_r+0x4e>
 8002356:	4621      	mov	r1, r4
 8002358:	4628      	mov	r0, r5
 800235a:	f7ff ffb3 	bl	80022c4 <_fflush_r>
 800235e:	2800      	cmp	r0, #0
 8002360:	d1ed      	bne.n	800233e <__swbuf_r+0x2a>
 8002362:	68a3      	ldr	r3, [r4, #8]
 8002364:	3b01      	subs	r3, #1
 8002366:	60a3      	str	r3, [r4, #8]
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	6022      	str	r2, [r4, #0]
 800236e:	701e      	strb	r6, [r3, #0]
 8002370:	6962      	ldr	r2, [r4, #20]
 8002372:	1c43      	adds	r3, r0, #1
 8002374:	429a      	cmp	r2, r3
 8002376:	d004      	beq.n	8002382 <__swbuf_r+0x6e>
 8002378:	89a3      	ldrh	r3, [r4, #12]
 800237a:	07db      	lsls	r3, r3, #31
 800237c:	d5e1      	bpl.n	8002342 <__swbuf_r+0x2e>
 800237e:	2e0a      	cmp	r6, #10
 8002380:	d1df      	bne.n	8002342 <__swbuf_r+0x2e>
 8002382:	4621      	mov	r1, r4
 8002384:	4628      	mov	r0, r5
 8002386:	f7ff ff9d 	bl	80022c4 <_fflush_r>
 800238a:	2800      	cmp	r0, #0
 800238c:	d0d9      	beq.n	8002342 <__swbuf_r+0x2e>
 800238e:	e7d6      	b.n	800233e <__swbuf_r+0x2a>

08002390 <__swsetup_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <__swsetup_r+0xa8>)
 8002394:	4605      	mov	r5, r0
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	460c      	mov	r4, r1
 800239a:	b118      	cbz	r0, 80023a4 <__swsetup_r+0x14>
 800239c:	6a03      	ldr	r3, [r0, #32]
 800239e:	b90b      	cbnz	r3, 80023a4 <__swsetup_r+0x14>
 80023a0:	f7ff fa44 	bl	800182c <__sinit>
 80023a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a8:	0719      	lsls	r1, r3, #28
 80023aa:	d422      	bmi.n	80023f2 <__swsetup_r+0x62>
 80023ac:	06da      	lsls	r2, r3, #27
 80023ae:	d407      	bmi.n	80023c0 <__swsetup_r+0x30>
 80023b0:	2209      	movs	r2, #9
 80023b2:	602a      	str	r2, [r5, #0]
 80023b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b8:	81a3      	strh	r3, [r4, #12]
 80023ba:	f04f 30ff 	mov.w	r0, #4294967295
 80023be:	e033      	b.n	8002428 <__swsetup_r+0x98>
 80023c0:	0758      	lsls	r0, r3, #29
 80023c2:	d512      	bpl.n	80023ea <__swsetup_r+0x5a>
 80023c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023c6:	b141      	cbz	r1, 80023da <__swsetup_r+0x4a>
 80023c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023cc:	4299      	cmp	r1, r3
 80023ce:	d002      	beq.n	80023d6 <__swsetup_r+0x46>
 80023d0:	4628      	mov	r0, r5
 80023d2:	f7ff fb33 	bl	8001a3c <_free_r>
 80023d6:	2300      	movs	r3, #0
 80023d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80023e0:	81a3      	strh	r3, [r4, #12]
 80023e2:	2300      	movs	r3, #0
 80023e4:	6063      	str	r3, [r4, #4]
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	89a3      	ldrh	r3, [r4, #12]
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	6923      	ldr	r3, [r4, #16]
 80023f4:	b94b      	cbnz	r3, 800240a <__swsetup_r+0x7a>
 80023f6:	89a3      	ldrh	r3, [r4, #12]
 80023f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80023fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002400:	d003      	beq.n	800240a <__swsetup_r+0x7a>
 8002402:	4621      	mov	r1, r4
 8002404:	4628      	mov	r0, r5
 8002406:	f000 f84f 	bl	80024a8 <__smakebuf_r>
 800240a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800240e:	f013 0201 	ands.w	r2, r3, #1
 8002412:	d00a      	beq.n	800242a <__swsetup_r+0x9a>
 8002414:	2200      	movs	r2, #0
 8002416:	60a2      	str	r2, [r4, #8]
 8002418:	6962      	ldr	r2, [r4, #20]
 800241a:	4252      	negs	r2, r2
 800241c:	61a2      	str	r2, [r4, #24]
 800241e:	6922      	ldr	r2, [r4, #16]
 8002420:	b942      	cbnz	r2, 8002434 <__swsetup_r+0xa4>
 8002422:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002426:	d1c5      	bne.n	80023b4 <__swsetup_r+0x24>
 8002428:	bd38      	pop	{r3, r4, r5, pc}
 800242a:	0799      	lsls	r1, r3, #30
 800242c:	bf58      	it	pl
 800242e:	6962      	ldrpl	r2, [r4, #20]
 8002430:	60a2      	str	r2, [r4, #8]
 8002432:	e7f4      	b.n	800241e <__swsetup_r+0x8e>
 8002434:	2000      	movs	r0, #0
 8002436:	e7f7      	b.n	8002428 <__swsetup_r+0x98>
 8002438:	20000034 	.word	0x20000034

0800243c <_sbrk_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	4d06      	ldr	r5, [pc, #24]	@ (8002458 <_sbrk_r+0x1c>)
 8002440:	2300      	movs	r3, #0
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	f7fe f8f4 	bl	8000634 <_sbrk>
 800244c:	1c43      	adds	r3, r0, #1
 800244e:	d102      	bne.n	8002456 <_sbrk_r+0x1a>
 8002450:	682b      	ldr	r3, [r5, #0]
 8002452:	b103      	cbz	r3, 8002456 <_sbrk_r+0x1a>
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	bd38      	pop	{r3, r4, r5, pc}
 8002458:	20000610 	.word	0x20000610

0800245c <__swhatbuf_r>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	460c      	mov	r4, r1
 8002460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002464:	2900      	cmp	r1, #0
 8002466:	b096      	sub	sp, #88	@ 0x58
 8002468:	4615      	mov	r5, r2
 800246a:	461e      	mov	r6, r3
 800246c:	da0d      	bge.n	800248a <__swhatbuf_r+0x2e>
 800246e:	89a3      	ldrh	r3, [r4, #12]
 8002470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002474:	f04f 0100 	mov.w	r1, #0
 8002478:	bf14      	ite	ne
 800247a:	2340      	movne	r3, #64	@ 0x40
 800247c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002480:	2000      	movs	r0, #0
 8002482:	6031      	str	r1, [r6, #0]
 8002484:	602b      	str	r3, [r5, #0]
 8002486:	b016      	add	sp, #88	@ 0x58
 8002488:	bd70      	pop	{r4, r5, r6, pc}
 800248a:	466a      	mov	r2, sp
 800248c:	f000 f848 	bl	8002520 <_fstat_r>
 8002490:	2800      	cmp	r0, #0
 8002492:	dbec      	blt.n	800246e <__swhatbuf_r+0x12>
 8002494:	9901      	ldr	r1, [sp, #4]
 8002496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800249a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800249e:	4259      	negs	r1, r3
 80024a0:	4159      	adcs	r1, r3
 80024a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024a6:	e7eb      	b.n	8002480 <__swhatbuf_r+0x24>

080024a8 <__smakebuf_r>:
 80024a8:	898b      	ldrh	r3, [r1, #12]
 80024aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024ac:	079d      	lsls	r5, r3, #30
 80024ae:	4606      	mov	r6, r0
 80024b0:	460c      	mov	r4, r1
 80024b2:	d507      	bpl.n	80024c4 <__smakebuf_r+0x1c>
 80024b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	6123      	str	r3, [r4, #16]
 80024bc:	2301      	movs	r3, #1
 80024be:	6163      	str	r3, [r4, #20]
 80024c0:	b003      	add	sp, #12
 80024c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024c4:	ab01      	add	r3, sp, #4
 80024c6:	466a      	mov	r2, sp
 80024c8:	f7ff ffc8 	bl	800245c <__swhatbuf_r>
 80024cc:	9f00      	ldr	r7, [sp, #0]
 80024ce:	4605      	mov	r5, r0
 80024d0:	4639      	mov	r1, r7
 80024d2:	4630      	mov	r0, r6
 80024d4:	f7ff fb1e 	bl	8001b14 <_malloc_r>
 80024d8:	b948      	cbnz	r0, 80024ee <__smakebuf_r+0x46>
 80024da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024de:	059a      	lsls	r2, r3, #22
 80024e0:	d4ee      	bmi.n	80024c0 <__smakebuf_r+0x18>
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	81a3      	strh	r3, [r4, #12]
 80024ec:	e7e2      	b.n	80024b4 <__smakebuf_r+0xc>
 80024ee:	89a3      	ldrh	r3, [r4, #12]
 80024f0:	6020      	str	r0, [r4, #0]
 80024f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f6:	81a3      	strh	r3, [r4, #12]
 80024f8:	9b01      	ldr	r3, [sp, #4]
 80024fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80024fe:	b15b      	cbz	r3, 8002518 <__smakebuf_r+0x70>
 8002500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002504:	4630      	mov	r0, r6
 8002506:	f000 f81d 	bl	8002544 <_isatty_r>
 800250a:	b128      	cbz	r0, 8002518 <__smakebuf_r+0x70>
 800250c:	89a3      	ldrh	r3, [r4, #12]
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	81a3      	strh	r3, [r4, #12]
 8002518:	89a3      	ldrh	r3, [r4, #12]
 800251a:	431d      	orrs	r5, r3
 800251c:	81a5      	strh	r5, [r4, #12]
 800251e:	e7cf      	b.n	80024c0 <__smakebuf_r+0x18>

08002520 <_fstat_r>:
 8002520:	b538      	push	{r3, r4, r5, lr}
 8002522:	4d07      	ldr	r5, [pc, #28]	@ (8002540 <_fstat_r+0x20>)
 8002524:	2300      	movs	r3, #0
 8002526:	4604      	mov	r4, r0
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	602b      	str	r3, [r5, #0]
 800252e:	f7fe f85b 	bl	80005e8 <_fstat>
 8002532:	1c43      	adds	r3, r0, #1
 8002534:	d102      	bne.n	800253c <_fstat_r+0x1c>
 8002536:	682b      	ldr	r3, [r5, #0]
 8002538:	b103      	cbz	r3, 800253c <_fstat_r+0x1c>
 800253a:	6023      	str	r3, [r4, #0]
 800253c:	bd38      	pop	{r3, r4, r5, pc}
 800253e:	bf00      	nop
 8002540:	20000610 	.word	0x20000610

08002544 <_isatty_r>:
 8002544:	b538      	push	{r3, r4, r5, lr}
 8002546:	4d06      	ldr	r5, [pc, #24]	@ (8002560 <_isatty_r+0x1c>)
 8002548:	2300      	movs	r3, #0
 800254a:	4604      	mov	r4, r0
 800254c:	4608      	mov	r0, r1
 800254e:	602b      	str	r3, [r5, #0]
 8002550:	f7fe f859 	bl	8000606 <_isatty>
 8002554:	1c43      	adds	r3, r0, #1
 8002556:	d102      	bne.n	800255e <_isatty_r+0x1a>
 8002558:	682b      	ldr	r3, [r5, #0]
 800255a:	b103      	cbz	r3, 800255e <_isatty_r+0x1a>
 800255c:	6023      	str	r3, [r4, #0]
 800255e:	bd38      	pop	{r3, r4, r5, pc}
 8002560:	20000610 	.word	0x20000610

08002564 <_init>:
 8002564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002566:	bf00      	nop
 8002568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256a:	bc08      	pop	{r3}
 800256c:	469e      	mov	lr, r3
 800256e:	4770      	bx	lr

08002570 <_fini>:
 8002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002572:	bf00      	nop
 8002574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002576:	bc08      	pop	{r3}
 8002578:	469e      	mov	lr, r3
 800257a:	4770      	bx	lr
