
stm32f4_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080022c8  080022c8  000032c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002394  08002394  00004078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002394  08002394  00003394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800239c  0800239c  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800239c  0800239c  0000339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023a0  080023a0  000033a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080023a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000078  0800241c  00004078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  0800241c  00004214  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dc4  00000000  00000000  000040a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000805  00000000  00000000  00005e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00006670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b6  00000000  00000000  000068c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00001df0  00000000  00000000  00006a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000bc1  00000000  00000000  00008866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00009427  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000fe8  00000000  00000000  0000946c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  0000a454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080022b0 	.word	0x080022b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080022b0 	.word	0x080022b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_Button_Inits>:
uint8_t newRTCRead = 0;

/*
 * GPIO-Button INit
 */
void GPIO_Button_Inits(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <GPIO_Button_Inits+0x2c>)
 80002b8:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ba:	230d      	movs	r3, #13
 80002bc:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002be:	2300      	movs	r3, #0
 80002c0:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 80002c2:	2302      	movs	r3, #2
 80002c4:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 80002c6:	2300      	movs	r3, #0
 80002c8:	733b      	strb	r3, [r7, #12]

	GPIO_Init(&GpioButton);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fa77 	bl	80007c0 <GPIO_Init>

}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40020800 	.word	0x40020800

080002e0 <delay>:

/*
 * delay
 */
void delay (void){
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
	/* ~200 msec when sys clock is 16 MHZ */
	for(uint32_t i = 0; i < 500000/2; i ++);
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	e002      	b.n	80002f2 <delay+0x12>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <delay+0x28>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d9f8      	bls.n	80002ec <delay+0xc>
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	0003d08f 	.word	0x0003d08f

0800030c <WAIT_ForButtonPress>:

/*
 * WAIT_ForButtonPress
 * Polling button
 */
void WAIT_ForButtonPress (void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_NOT_PRESSED);
 8000310:	bf00      	nop
 8000312:	210d      	movs	r1, #13
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <WAIT_ForButtonPress+0x1c>)
 8000316:	f000 fc0d 	bl	8000b34 <GPIO_ReadFromInputPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b01      	cmp	r3, #1
 800031e:	d0f8      	beq.n	8000312 <WAIT_ForButtonPress+0x6>

	/* debounce */
	delay();
 8000320:	f7ff ffde 	bl	80002e0 <delay>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40020800 	.word	0x40020800

0800032c <main>:



int main(void){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	/* Initialize the button */
	GPIO_Button_Inits();
 8000330:	f7ff ffbe 	bl	80002b0 <GPIO_Button_Inits>

	/*rtc clk initialization */
	rtcHandle.RTC_Config.Sync_Prescaler = RTC_SYNCPRESCALER_1HZ;
 8000334:	4b2c      	ldr	r3, [pc, #176]	@ (80003e8 <main+0xbc>)
 8000336:	22ff      	movs	r2, #255	@ 0xff
 8000338:	609a      	str	r2, [r3, #8]
	rtcHandle.RTC_Config.Clock_Source = RTC_CLKSRC_LSE;
 800033a:	4b2b      	ldr	r3, [pc, #172]	@ (80003e8 <main+0xbc>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
	rtcHandle.RTC_Config.Async_Prescaler = RTC_ASYNCPRESCALER_1HZ;
 8000340:	4b29      	ldr	r3, [pc, #164]	@ (80003e8 <main+0xbc>)
 8000342:	227f      	movs	r2, #127	@ 0x7f
 8000344:	605a      	str	r2, [r3, #4]
	rtcHandle.RTC_Config.hour_format = RTC_HOUR_FMT_24;
 8000346:	4b28      	ldr	r3, [pc, #160]	@ (80003e8 <main+0xbc>)
 8000348:	2200      	movs	r2, #0
 800034a:	731a      	strb	r2, [r3, #12]

	/* rtc date and time init */
	rtcHandle.RTC_Time.Day = 30;
 800034c:	4b26      	ldr	r3, [pc, #152]	@ (80003e8 <main+0xbc>)
 800034e:	221e      	movs	r2, #30
 8000350:	755a      	strb	r2, [r3, #21]
	rtcHandle.RTC_Time.Month = 8;
 8000352:	4b25      	ldr	r3, [pc, #148]	@ (80003e8 <main+0xbc>)
 8000354:	2208      	movs	r2, #8
 8000356:	759a      	strb	r2, [r3, #22]
	rtcHandle.RTC_Time.Year = 25;
 8000358:	4b23      	ldr	r3, [pc, #140]	@ (80003e8 <main+0xbc>)
 800035a:	2219      	movs	r2, #25
 800035c:	75da      	strb	r2, [r3, #23]

	rtcHandle.RTC_Time.Hours = 11;
 800035e:	4b22      	ldr	r3, [pc, #136]	@ (80003e8 <main+0xbc>)
 8000360:	220b      	movs	r2, #11
 8000362:	741a      	strb	r2, [r3, #16]
	rtcHandle.RTC_Time.Minutes = 45;
 8000364:	4b20      	ldr	r3, [pc, #128]	@ (80003e8 <main+0xbc>)
 8000366:	222d      	movs	r2, #45	@ 0x2d
 8000368:	745a      	strb	r2, [r3, #17]
	rtcHandle.RTC_Time.Seconds = 0;
 800036a:	4b1f      	ldr	r3, [pc, #124]	@ (80003e8 <main+0xbc>)
 800036c:	2200      	movs	r2, #0
 800036e:	749a      	strb	r2, [r3, #18]
	rtcHandle.RTC_Time.Weekday = 6;
 8000370:	4b1d      	ldr	r3, [pc, #116]	@ (80003e8 <main+0xbc>)
 8000372:	2206      	movs	r2, #6
 8000374:	751a      	strb	r2, [r3, #20]

	RTC_Init(&rtcHandle);
 8000376:	481c      	ldr	r0, [pc, #112]	@ (80003e8 <main+0xbc>)
 8000378:	f000 fd66 	bl	8000e48 <RTC_Init>

	/* wait until the button is pressed */
	WAIT_ForButtonPress();
 800037c:	f7ff ffc6 	bl	800030c <WAIT_ForButtonPress>

	/*wake up timer for every 60 sec */
	WUTConfig.Auto_Reload = 4; 		/* wut runs wutr-value +1 secs */
 8000380:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <main+0xc0>)
 8000382:	2204      	movs	r2, #4
 8000384:	605a      	str	r2, [r3, #4]
	WUTConfig.Clk = RTC_WUT_CLK_SPRE_1HZ;
 8000386:	4b19      	ldr	r3, [pc, #100]	@ (80003ec <main+0xc0>)
 8000388:	2204      	movs	r2, #4
 800038a:	701a      	strb	r2, [r3, #0]
	WUTConfig.Interrupt_EnorDi = ENABLE;
 800038c:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <main+0xc0>)
 800038e:	2201      	movs	r2, #1
 8000390:	721a      	strb	r2, [r3, #8]

	RTC_WUTConfig(&WUTConfig);
 8000392:	4816      	ldr	r0, [pc, #88]	@ (80003ec <main+0xc0>)
 8000394:	f000 fc08 	bl	8000ba8 <RTC_WUTConfig>

	while(1){


		if(newRTCRead){
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <main+0xc4>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0fb      	beq.n	8000398 <main+0x6c>
			printf("Date : %02u : %02u : %02u\n", readTimeDate.Day, readTimeDate.Month, readTimeDate.Year);
 80003a0:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <main+0xc8>)
 80003a2:	795b      	ldrb	r3, [r3, #5]
 80003a4:	4619      	mov	r1, r3
 80003a6:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <main+0xc8>)
 80003a8:	799b      	ldrb	r3, [r3, #6]
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <main+0xc8>)
 80003ae:	79db      	ldrb	r3, [r3, #7]
 80003b0:	4811      	ldr	r0, [pc, #68]	@ (80003f8 <main+0xcc>)
 80003b2:	f001 f917 	bl	80015e4 <iprintf>
			printf("Time : %02u : %02u : %02u\n", readTimeDate.Hours, readTimeDate.Minutes, readTimeDate.Seconds);
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <main+0xc8>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	4619      	mov	r1, r3
 80003bc:	4b0d      	ldr	r3, [pc, #52]	@ (80003f4 <main+0xc8>)
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <main+0xc8>)
 80003c4:	789b      	ldrb	r3, [r3, #2]
 80003c6:	480d      	ldr	r0, [pc, #52]	@ (80003fc <main+0xd0>)
 80003c8:	f001 f90c 	bl	80015e4 <iprintf>
			printf("Day of the week: %s\n", weekDayStr[readTimeDate.Weekday]);
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <main+0xc8>)
 80003ce:	791b      	ldrb	r3, [r3, #4]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <main+0xd4>)
 80003d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d8:	4619      	mov	r1, r3
 80003da:	480a      	ldr	r0, [pc, #40]	@ (8000404 <main+0xd8>)
 80003dc:	f001 f902 	bl	80015e4 <iprintf>

			newRTCRead = 0;
 80003e0:	4b03      	ldr	r3, [pc, #12]	@ (80003f0 <main+0xc4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
		if(newRTCRead){
 80003e6:	e7d7      	b.n	8000398 <main+0x6c>
 80003e8:	2000009c 	.word	0x2000009c
 80003ec:	200000b4 	.word	0x200000b4
 80003f0:	200000c0 	.word	0x200000c0
 80003f4:	20000094 	.word	0x20000094
 80003f8:	08002314 	.word	0x08002314
 80003fc:	08002330 	.word	0x08002330
 8000400:	20000000 	.word	0x20000000
 8000404:	0800234c 	.word	0x0800234c

08000408 <RTC_WKUP_IRQHandler>:
}



/******************************Interrupt **************************************************************/
void RTC_WKUP_IRQHandler (void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

	RTC_WUTIRQHandling();
 800040c:	f001 f802 	bl	8001414 <RTC_WUTIRQHandling>
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <RTC_ApplicationEventCallback>:


/*
 * Call backs
 */
void RTC_ApplicationEventCallback (uint8_t AppEv){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]

	if(AppEv == RTC_EV_WUTI){
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d105      	bne.n	8000430 <RTC_ApplicationEventCallback+0x1c>

		/* Read Time and Date */
		RTC_GetTimeDate(&readTimeDate);
 8000424:	4804      	ldr	r0, [pc, #16]	@ (8000438 <RTC_ApplicationEventCallback+0x24>)
 8000426:	f000 fc3b 	bl	8000ca0 <RTC_GetTimeDate>

		newRTCRead = 1;
 800042a:	4b04      	ldr	r3, [pc, #16]	@ (800043c <RTC_ApplicationEventCallback+0x28>)
 800042c:	2201      	movs	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]


	}
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000094 	.word	0x20000094
 800043c:	200000c0 	.word	0x200000c0

08000440 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <ITM_SendChar+0x44>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <ITM_SendChar+0x44>)
 8000450:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000454:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <ITM_SendChar+0x48>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a0b      	ldr	r2, [pc, #44]	@ (8000488 <ITM_SendChar+0x48>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000462:	bf00      	nop
 8000464:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f8      	beq.n	8000464 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000472:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	6013      	str	r3, [r2, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	e000edfc 	.word	0xe000edfc
 8000488:	e0000e00 	.word	0xe0000e00

0800048c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	e00a      	b.n	80004b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800049e:	f3af 8000 	nop.w
 80004a2:	4601      	mov	r1, r0
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	b2ca      	uxtb	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	3301      	adds	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dbf0      	blt.n	800049e <_read+0x12>
  }

  return len;
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b086      	sub	sp, #24
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
 80004d6:	e009      	b.n	80004ec <_write+0x26>
  {
    //__io_putchar(*ptr++);
	/* calling ITM trace mode to write into Serial wire viewer */
	ITM_SendChar(*ptr++);
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	60ba      	str	r2, [r7, #8]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ffad 	bl	8000440 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	dbf1      	blt.n	80004d8 <_write+0x12>
  }
  return len;
 80004f4:	687b      	ldr	r3, [r7, #4]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3718      	adds	r7, #24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_close>:

int _close(int file)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000524:	605a      	str	r2, [r3, #4]
  return 0;
 8000526:	2300      	movs	r3, #0
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <_isatty>:

int _isatty(int file)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000546:	b480      	push	{r7}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
	...

08000560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000568:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <_sbrk+0x5c>)
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <_sbrk+0x60>)
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000574:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <_sbrk+0x64>)
 800057e:	4a12      	ldr	r2, [pc, #72]	@ (80005c8 <_sbrk+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000582:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	d207      	bcs.n	80005a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000590:	f001 f8cc 	bl	800172c <__errno>
 8000594:	4603      	mov	r3, r0
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	e009      	b.n	80005b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <_sbrk+0x64>)
 80005b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20020000 	.word	0x20020000
 80005c0:	00000400 	.word	0x00000400
 80005c4:	200000c4 	.word	0x200000c4
 80005c8:	20000218 	.word	0x20000218

080005cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005cc:	480d      	ldr	r0, [pc, #52]	@ (8000604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490d      	ldr	r1, [pc, #52]	@ (800060c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000618 <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fa:	f001 f89d 	bl	8001738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fe95 	bl	800032c <main>

08000602 <LoopForever>:

LoopForever:
  b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   r0, =_estack
 8000604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000610:	080023a4 	.word	0x080023a4
  ldr r2, =_sbss
 8000614:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000618:	20000214 	.word	0x20000214

0800061c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC_IRQHandler>
	...

08000620 <GPIO_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d157      	bne.n	80006e2 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a59      	ldr	r2, [pc, #356]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <GPIO_PeriClockControl+0x28>
 800063a:	4b59      	ldr	r3, [pc, #356]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a58      	ldr	r2, [pc, #352]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 8000646:	e0a3      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a56      	ldr	r2, [pc, #344]	@ (80007a4 <GPIO_PeriClockControl+0x184>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d106      	bne.n	800065e <GPIO_PeriClockControl+0x3e>
 8000650:	4b53      	ldr	r3, [pc, #332]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000654:	4a52      	ldr	r2, [pc, #328]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800065c:	e098      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a51      	ldr	r2, [pc, #324]	@ (80007a8 <GPIO_PeriClockControl+0x188>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d106      	bne.n	8000674 <GPIO_PeriClockControl+0x54>
 8000666:	4b4e      	ldr	r3, [pc, #312]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a4d      	ldr	r2, [pc, #308]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000672:	e08d      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a4d      	ldr	r2, [pc, #308]	@ (80007ac <GPIO_PeriClockControl+0x18c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d106      	bne.n	800068a <GPIO_PeriClockControl+0x6a>
 800067c:	4b48      	ldr	r3, [pc, #288]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000680:	4a47      	ldr	r2, [pc, #284]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000682:	f043 0308 	orr.w	r3, r3, #8
 8000686:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000688:	e082      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a48      	ldr	r2, [pc, #288]	@ (80007b0 <GPIO_PeriClockControl+0x190>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <GPIO_PeriClockControl+0x80>
 8000692:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a42      	ldr	r2, [pc, #264]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000698:	f043 0310 	orr.w	r3, r3, #16
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800069e:	e077      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a44      	ldr	r2, [pc, #272]	@ (80007b4 <GPIO_PeriClockControl+0x194>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <GPIO_PeriClockControl+0x96>
 80006a8:	4b3d      	ldr	r3, [pc, #244]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	4a3c      	ldr	r2, [pc, #240]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006b4:	e06c      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_EN();
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a3f      	ldr	r2, [pc, #252]	@ (80007b8 <GPIO_PeriClockControl+0x198>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <GPIO_PeriClockControl+0xac>
 80006be:	4b38      	ldr	r3, [pc, #224]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a37      	ldr	r2, [pc, #220]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006ca:	e061      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a3b      	ldr	r2, [pc, #236]	@ (80007bc <GPIO_PeriClockControl+0x19c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d15d      	bne.n	8000790 <GPIO_PeriClockControl+0x170>
 80006d4:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d8:	4a31      	ldr	r2, [pc, #196]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006e0:	e056      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a2d      	ldr	r2, [pc, #180]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_PeriClockControl+0xd8>
 80006ea:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006f6:	e04b      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a2a      	ldr	r2, [pc, #168]	@ (80007a4 <GPIO_PeriClockControl+0x184>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <GPIO_PeriClockControl+0xee>
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	4a26      	ldr	r2, [pc, #152]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000706:	f023 0302 	bic.w	r3, r3, #2
 800070a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800070c:	e040      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a25      	ldr	r2, [pc, #148]	@ (80007a8 <GPIO_PeriClockControl+0x188>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_PeriClockControl+0x104>
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800071c:	f023 0304 	bic.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000722:	e035      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <GPIO_PeriClockControl+0x18c>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_PeriClockControl+0x11a>
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000730:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000732:	f023 0308 	bic.w	r3, r3, #8
 8000736:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000738:	e02a      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a1c      	ldr	r2, [pc, #112]	@ (80007b0 <GPIO_PeriClockControl+0x190>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_PeriClockControl+0x130>
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a16      	ldr	r2, [pc, #88]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000748:	f023 0310 	bic.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800074e:	e01f      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a18      	ldr	r2, [pc, #96]	@ (80007b4 <GPIO_PeriClockControl+0x194>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <GPIO_PeriClockControl+0x146>
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075c:	4a10      	ldr	r2, [pc, #64]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800075e:	f023 0320 	bic.w	r3, r3, #32
 8000762:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000764:	e014      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <GPIO_PeriClockControl+0x198>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClockControl+0x15c>
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800077a:	e009      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <GPIO_PeriClockControl+0x19c>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d105      	bne.n	8000790 <GPIO_PeriClockControl+0x170>
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000788:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800078a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800078e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40020000 	.word	0x40020000
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40021400 	.word	0x40021400
 80007b8:	40021800 	.word	0x40021800
 80007bc:	40021c00 	.word	0x40021c00

080007c0 <GPIO_Init>:
 *
 * @return		-
 *
 * @note		-
 ************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

	/* Enable GPIO peripheral Clock */
	GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff26 	bl	8000620 <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
	/* 1. Configure the mode for the given gpio pin */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	795b      	ldrb	r3, [r3, #5]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d820      	bhi.n	8000822 <GPIO_Init+0x62>
		/*Normal GPIO configurations */
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //need to clear bit field before sets
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	2103      	movs	r1, #3
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	400a      	ands	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6819      	ldr	r1, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	e0c8      	b.n	80009b4 <GPIO_Init+0x1f4>
	}
	else{
		/* Interrupt configuration */

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	2b05      	cmp	r3, #5
 8000828:	d117      	bne.n	800085a <GPIO_Init+0x9a>
			/* 1. configure falling edge FTSR */
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800082a:	4b47      	ldr	r3, [pc, #284]	@ (8000948 <GPIO_Init+0x188>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	7912      	ldrb	r2, [r2, #4]
 8000832:	4611      	mov	r1, r2
 8000834:	2201      	movs	r2, #1
 8000836:	408a      	lsls	r2, r1
 8000838:	4611      	mov	r1, r2
 800083a:	4a43      	ldr	r2, [pc, #268]	@ (8000948 <GPIO_Init+0x188>)
 800083c:	430b      	orrs	r3, r1
 800083e:	60d3      	str	r3, [r2, #12]

			/* clear same bit in RTSR */
			EXTI -> RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000840:	4b41      	ldr	r3, [pc, #260]	@ (8000948 <GPIO_Init+0x188>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	7912      	ldrb	r2, [r2, #4]
 8000848:	4611      	mov	r1, r2
 800084a:	2201      	movs	r2, #1
 800084c:	408a      	lsls	r2, r1
 800084e:	43d2      	mvns	r2, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a3d      	ldr	r2, [pc, #244]	@ (8000948 <GPIO_Init+0x188>)
 8000854:	400b      	ands	r3, r1
 8000856:	6093      	str	r3, [r2, #8]
 8000858:	e035      	b.n	80008c6 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	795b      	ldrb	r3, [r3, #5]
 800085e:	2b04      	cmp	r3, #4
 8000860:	d117      	bne.n	8000892 <GPIO_Init+0xd2>
			/* 1. configure raising edge RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000862:	4b39      	ldr	r3, [pc, #228]	@ (8000948 <GPIO_Init+0x188>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	7912      	ldrb	r2, [r2, #4]
 800086a:	4611      	mov	r1, r2
 800086c:	2201      	movs	r2, #1
 800086e:	408a      	lsls	r2, r1
 8000870:	4611      	mov	r1, r2
 8000872:	4a35      	ldr	r2, [pc, #212]	@ (8000948 <GPIO_Init+0x188>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6093      	str	r3, [r2, #8]

			/* clear same bit in FTSR */
			EXTI -> FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000878:	4b33      	ldr	r3, [pc, #204]	@ (8000948 <GPIO_Init+0x188>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	7912      	ldrb	r2, [r2, #4]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	43d2      	mvns	r2, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a2f      	ldr	r2, [pc, #188]	@ (8000948 <GPIO_Init+0x188>)
 800088c:	400b      	ands	r3, r1
 800088e:	60d3      	str	r3, [r2, #12]
 8000890:	e019      	b.n	80008c6 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	795b      	ldrb	r3, [r3, #5]
 8000896:	2b06      	cmp	r3, #6
 8000898:	d115      	bne.n	80008c6 <GPIO_Init+0x106>
			/* 1. configure both falling and raising edge FTSR, RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <GPIO_Init+0x188>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	7912      	ldrb	r2, [r2, #4]
 80008a2:	4611      	mov	r1, r2
 80008a4:	2201      	movs	r2, #1
 80008a6:	408a      	lsls	r2, r1
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a27      	ldr	r2, [pc, #156]	@ (8000948 <GPIO_Init+0x188>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6093      	str	r3, [r2, #8]
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80008b0:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <GPIO_Init+0x188>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	7912      	ldrb	r2, [r2, #4]
 80008b8:	4611      	mov	r1, r2
 80008ba:	2201      	movs	r2, #1
 80008bc:	408a      	lsls	r2, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <GPIO_Init+0x188>)
 80008c2:	430b      	orrs	r3, r1
 80008c4:	60d3      	str	r3, [r2, #12]
		}
		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 4; //selects SYSCFG_EXTIR 0 to 3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4; //selects position in SYSCFG_EXTIR 0 to 3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1b      	ldr	r2, [pc, #108]	@ (800094c <GPIO_Init+0x18c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d044      	beq.n	800096c <GPIO_Init+0x1ac>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000950 <GPIO_Init+0x190>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d02b      	beq.n	8000944 <GPIO_Init+0x184>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a18      	ldr	r2, [pc, #96]	@ (8000954 <GPIO_Init+0x194>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d024      	beq.n	8000940 <GPIO_Init+0x180>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a17      	ldr	r2, [pc, #92]	@ (8000958 <GPIO_Init+0x198>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d01d      	beq.n	800093c <GPIO_Init+0x17c>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a15      	ldr	r2, [pc, #84]	@ (800095c <GPIO_Init+0x19c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d016      	beq.n	8000938 <GPIO_Init+0x178>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <GPIO_Init+0x1a0>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d00f      	beq.n	8000934 <GPIO_Init+0x174>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <GPIO_Init+0x1a4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d008      	beq.n	8000930 <GPIO_Init+0x170>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a11      	ldr	r2, [pc, #68]	@ (8000968 <GPIO_Init+0x1a8>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d101      	bne.n	800092c <GPIO_Init+0x16c>
 8000928:	2307      	movs	r3, #7
 800092a:	e020      	b.n	800096e <GPIO_Init+0x1ae>
 800092c:	2300      	movs	r3, #0
 800092e:	e01e      	b.n	800096e <GPIO_Init+0x1ae>
 8000930:	2306      	movs	r3, #6
 8000932:	e01c      	b.n	800096e <GPIO_Init+0x1ae>
 8000934:	2305      	movs	r3, #5
 8000936:	e01a      	b.n	800096e <GPIO_Init+0x1ae>
 8000938:	2304      	movs	r3, #4
 800093a:	e018      	b.n	800096e <GPIO_Init+0x1ae>
 800093c:	2303      	movs	r3, #3
 800093e:	e016      	b.n	800096e <GPIO_Init+0x1ae>
 8000940:	2302      	movs	r3, #2
 8000942:	e014      	b.n	800096e <GPIO_Init+0x1ae>
 8000944:	2301      	movs	r3, #1
 8000946:	e012      	b.n	800096e <GPIO_Init+0x1ae>
 8000948:	40013c00 	.word	0x40013c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400
 8000954:	40020800 	.word	0x40020800
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40021000 	.word	0x40021000
 8000960:	40021400 	.word	0x40021400
 8000964:	40021800 	.word	0x40021800
 8000968:	40021c00 	.word	0x40021c00
 800096c:	2300      	movs	r3, #0
 800096e:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000970:	4b6d      	ldr	r3, [pc, #436]	@ (8000b28 <GPIO_Init+0x368>)
 8000972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000974:	4a6c      	ldr	r2, [pc, #432]	@ (8000b28 <GPIO_Init+0x368>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097a:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG -> EXTICR[temp1] |= (portcode << (4 *temp2));
 800097c:	4a6b      	ldr	r2, [pc, #428]	@ (8000b2c <GPIO_Init+0x36c>)
 800097e:	7afb      	ldrb	r3, [r7, #11]
 8000980:	3302      	adds	r3, #2
 8000982:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000986:	7a79      	ldrb	r1, [r7, #9]
 8000988:	7abb      	ldrb	r3, [r7, #10]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	4618      	mov	r0, r3
 8000992:	4966      	ldr	r1, [pc, #408]	@ (8000b2c <GPIO_Init+0x36c>)
 8000994:	7afb      	ldrb	r3, [r7, #11]
 8000996:	4302      	orrs	r2, r0
 8000998:	3302      	adds	r3, #2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. Enable EXTI interrupt delivery using IMR */
		EXTI -> IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800099e:	4b64      	ldr	r3, [pc, #400]	@ (8000b30 <GPIO_Init+0x370>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	7912      	ldrb	r2, [r2, #4]
 80009a6:	4611      	mov	r1, r2
 80009a8:	2201      	movs	r2, #1
 80009aa:	408a      	lsls	r2, r1
 80009ac:	4611      	mov	r1, r2
 80009ae:	4a60      	ldr	r2, [pc, #384]	@ (8000b30 <GPIO_Init+0x370>)
 80009b0:	430b      	orrs	r3, r1
 80009b2:	6013      	str	r3, [r2, #0]
	}

	/* 3. Configure the speed */
	temp = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	79db      	ldrb	r3, [r3, #7]
 80009bc:	461a      	mov	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2103      	movs	r1, #3
 80009d8:	fa01 f303 	lsl.w	r3, r1, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	4619      	mov	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	400a      	ands	r2, r1
 80009e6:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6899      	ldr	r1, [r3, #8]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	609a      	str	r2, [r3, #8]

	/* 4. Configure the Pull-up / Pull-down */
	temp = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7a1b      	ldrb	r3, [r3, #8]
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2103      	movs	r1, #3
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	4619      	mov	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	400a      	ands	r2, r1
 8000a2a:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	68d9      	ldr	r1, [r3, #12]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	60da      	str	r2, [r3, #12]

	/* 5. Configure the output type */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	795b      	ldrb	r3, [r3, #5]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d81f      	bhi.n	8000a84 <GPIO_Init+0x2c4>
		temp = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	799b      	ldrb	r3, [r3, #6]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	791b      	ldrb	r3, [r3, #4]
 8000a62:	4619      	mov	r1, r3
 8000a64:	2301      	movs	r3, #1
 8000a66:	408b      	lsls	r3, r1
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	400a      	ands	r2, r1
 8000a72:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6859      	ldr	r1, [r3, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	605a      	str	r2, [r3, #4]
	}

	/* Configure Alternate Function mode */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	795b      	ldrb	r3, [r3, #5]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d149      	bne.n	8000b20 <GPIO_Init+0x360>

		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	f003 0307 	and.w	r3, r3, #7
 8000a94:	723b      	strb	r3, [r7, #8]

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber <= 7){
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	791b      	ldrb	r3, [r3, #4]
 8000a9a:	2b07      	cmp	r3, #7
 8000a9c:	d820      	bhi.n	8000ae0 <GPIO_Init+0x320>
			temp = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a5b      	ldrb	r3, [r3, #9]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	7a3b      	ldrb	r3, [r7, #8]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRL &= ~(0xf << (4 * temp1));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6a1a      	ldr	r2, [r3, #32]
 8000ab8:	7a3b      	ldrb	r3, [r7, #8]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	210f      	movs	r1, #15
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	400a      	ands	r2, r1
 8000acc:	621a      	str	r2, [r3, #32]
			pGPIOHandle -> pGPIOx ->AFRL |= temp;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6a19      	ldr	r1, [r3, #32]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
		}
	}
}
 8000ade:	e01f      	b.n	8000b20 <GPIO_Init+0x360>
			temp = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7a5b      	ldrb	r3, [r3, #9]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	7a3b      	ldrb	r3, [r7, #8]
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000afa:	7a3b      	ldrb	r3, [r7, #8]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	210f      	movs	r1, #15
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4619      	mov	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	400a      	ands	r2, r1
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <GPIO_ReadFromInputPin>:
 *
 * @return		- 0 or 1
 *
 * @note		-
 ************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t) ((pGPIOx -> IDR >> PinNumber) & 0x00000001);  //read pin value
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691a      	ldr	r2, [r3, #16]
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
	return value;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
	...

08000b60 <RTC_WUTControl>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_WUTControl(uint8_t EnorDi){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]

	if (EnorDi == DISABLE){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d10d      	bne.n	8000b8c <RTC_WUTControl+0x2c>
		/* Set WUTE in RTC_CR to disable the wakeup timer */
		RTC->CR &= ~(1 << RTC_CR_WUTE);
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <RTC_WUTControl+0x44>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba4 <RTC_WUTControl+0x44>)
 8000b76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000b7a:	6093      	str	r3, [r2, #8]

		/* wait until WUTWF bit is set in RTC_ISR to make sure the access to wakeup auto-reload counter and to WUCKSEL[2:0] bits is allowed */
		while(!(RTC->ISR & (1 << RTC_ISR_WUTWF)));
 8000b7c:	bf00      	nop
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <RTC_WUTControl+0x44>)
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f9      	beq.n	8000b7e <RTC_WUTControl+0x1e>
		/* Set WUTE in RTC_CR to disable the wakeup timer */
		RTC->CR |= (1 << RTC_CR_WUTE);
	}


}
 8000b8a:	e005      	b.n	8000b98 <RTC_WUTControl+0x38>
		RTC->CR |= (1 << RTC_CR_WUTE);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <RTC_WUTControl+0x44>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <RTC_WUTControl+0x44>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b96:	6093      	str	r3, [r2, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <RTC_WUTConfig>:
 * @return		-
 *
 * @note		-
 */

void RTC_WUTConfig(RTC_WUT_Config_t *pWUTConfig){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]

	/* 1.Backup domain write enable */
	BackupDomain_Unlock();
 8000bb4:	f000 fa94 	bl	80010e0 <BackupDomain_Unlock>

	/* 2. RTC write key */
	RTC_Unlock();
 8000bb8:	f000 fab6 	bl	8001128 <RTC_Unlock>

	/* 3. Disable Wake up timer */
	RTC_WUTControl(DISABLE);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff ffcf 	bl	8000b60 <RTC_WUTControl>

	/* 4.Load WUTR with reload value */
	temp = DECTOBCD(pWUTConfig ->Auto_Reload);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a33      	ldr	r2, [pc, #204]	@ (8000c94 <RTC_WUTConfig+0xec>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	0118      	lsls	r0, r3, #4
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6859      	ldr	r1, [r3, #4]
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <RTC_WUTConfig+0xec>)
 8000bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	1aca      	subs	r2, r1, r3
 8000be6:	ea40 0302 	orr.w	r3, r0, r2
 8000bea:	60fb      	str	r3, [r7, #12]
	RTC->WUTR = temp;
 8000bec:	4a2a      	ldr	r2, [pc, #168]	@ (8000c98 <RTC_WUTConfig+0xf0>)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6153      	str	r3, [r2, #20]

	/* 5. Select wakeup clock using WUCKSEL[2:0] bits in RTC-CR */
	RTC->CR |= (pWUTConfig->Clk & 0x0F);
 8000bf2:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <RTC_WUTConfig+0xf0>)
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	4926      	ldr	r1, [pc, #152]	@ (8000c98 <RTC_WUTConfig+0xf0>)
 8000c00:	4313      	orrs	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
		/* will implement later */

	}

	/* clear wutf flag */
	RTC->ISR &= ~(1 << RTC_ISR_WUTF);
 8000c04:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <RTC_WUTConfig+0xf0>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a23      	ldr	r2, [pc, #140]	@ (8000c98 <RTC_WUTConfig+0xf0>)
 8000c0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c0e:	60d3      	str	r3, [r2, #12]
	/* Enable RTC block internal interrupt to enable EXTI block event or NVIC interrupt */
	RTC->CR |= (1 << RTC_CR_WUTIE);
 8000c10:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <RTC_WUTConfig+0xf0>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a20      	ldr	r2, [pc, #128]	@ (8000c98 <RTC_WUTConfig+0xf0>)
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1a:	6093      	str	r3, [r2, #8]

	/* Enable Rising edge */
	EXTI->RTSR |= (1 << 22);
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a1e      	ldr	r2, [pc, #120]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c26:	6093      	str	r3, [r2, #8]
	/* Disable Falling Edge */
	EXTI ->FTSR &= ~(1 << 22);
 8000c28:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c2e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000c32:	60d3      	str	r3, [r2, #12]

	if(pWUTConfig->Interrupt_EnorDi){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7a1b      	ldrb	r3, [r3, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d014      	beq.n	8000c66 <RTC_WUTConfig+0xbe>

		/* Clear EXTI22 pending in PR */
		EXTI ->PR &= ~(1 << 22);
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	4a16      	ldr	r2, [pc, #88]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c42:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000c46:	6153      	str	r3, [r2, #20]
		/* Enable EXTI 22 Interrupt in IMR */
		EXTI ->IMR |= (1 <<22);
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a13      	ldr	r2, [pc, #76]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c52:	6013      	str	r3, [r2, #0]

		/* set priority and Enable NVIC IRQ */
		RTC_IRQPriorityConfig(IRQ_NO_EXTI22, NVIC_IRQ_PR10);
 8000c54:	210a      	movs	r1, #10
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 fbae 	bl	80013b8 <RTC_IRQPriorityConfig>
		RTC_IRQInterruptConfig(IRQ_NO_EXTI22, ENABLE);
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2003      	movs	r0, #3
 8000c60:	f000 fb00 	bl	8001264 <RTC_IRQInterruptConfig>
 8000c64:	e00b      	b.n	8000c7e <RTC_WUTConfig+0xd6>

	}
	else {
		/* Clear EXTI22 pending in PR */
		EXTI ->PR &= ~(1 << 22);
 8000c66:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c6c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000c70:	6153      	str	r3, [r2, #20]
		/* Enable EXTI 22 in Event mask reg  */
		EXTI ->EMR |= (1 << 22);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4a09      	ldr	r2, [pc, #36]	@ (8000c9c <RTC_WUTConfig+0xf4>)
 8000c78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c7c:	6053      	str	r3, [r2, #4]
	}

	/* Enable wake up timer */
	RTC_WUTControl(ENABLE);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff ff6e 	bl	8000b60 <RTC_WUTControl>

	/* RTC write key to lock */
	RTC_Lock();
 8000c84:	f000 fa5e 	bl	8001144 <RTC_Lock>

	/* Backup domain write enable */
	BackupDomain_Lock();
 8000c88:	f000 fa40 	bl	800110c <BackupDomain_Lock>


}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	cccccccd 	.word	0xcccccccd
 8000c98:	40002800 	.word	0x40002800
 8000c9c:	40013c00 	.word	0x40013c00

08000ca0 <RTC_GetTimeDate>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_GetTimeDate(RTC_Time_t* pRTCTime){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

	uint32_t temp1 =0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
	uint8_t temp2 = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	72fb      	strb	r3, [r7, #11]

	/* chk BYPass shadow reg */
	if(RTC->CR & (1 << RTC_CR_BYPSHAD)){
 8000cb0:	4b64      	ldr	r3, [pc, #400]	@ (8000e44 <RTC_GetTimeDate+0x1a4>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 0320 	and.w	r3, r3, #32
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f040 80be 	bne.w	8000e3a <RTC_GetTimeDate+0x19a>
		/* will implement */
	}
	else{
		/* clear RSF bit in RTC-ISR reg and wait until RSF is set before reading the RTC_SSR, RTC_TR and RTC_DR registers.*/
		RTC ->ISR &= ~ (1 << RTC_ISR_RSF);
 8000cbe:	4b61      	ldr	r3, [pc, #388]	@ (8000e44 <RTC_GetTimeDate+0x1a4>)
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	4a60      	ldr	r2, [pc, #384]	@ (8000e44 <RTC_GetTimeDate+0x1a4>)
 8000cc4:	f023 0320 	bic.w	r3, r3, #32
 8000cc8:	60d3      	str	r3, [r2, #12]
		while(!(RTC ->ISR & (1 << RTC_ISR_RSF)));
 8000cca:	bf00      	nop
 8000ccc:	4b5d      	ldr	r3, [pc, #372]	@ (8000e44 <RTC_GetTimeDate+0x1a4>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	f003 0320 	and.w	r3, r3, #32
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f9      	beq.n	8000ccc <RTC_GetTimeDate+0x2c>

		/*read time */
		temp1 = RTC->TR;
 8000cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8000e44 <RTC_GetTimeDate+0x1a4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]

		temp2 = (temp1 >> RTC_TR_SU3_0) & 0x7F;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ce6:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Seconds = BCDTODEC(temp2);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	0089      	lsls	r1, r1, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	709a      	strb	r2, [r3, #2]

		temp2 = (temp1 >> RTC_TR_MNU3_0) & 0x7F;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d12:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Minutes = BCDTODEC(temp2);
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	0089      	lsls	r1, r1, #2
 8000d26:	440b      	add	r3, r1
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	705a      	strb	r2, [r3, #1]

		temp2 = (temp1 >> RTC_TR_HU3_0) & 0x3F;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d3e:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Hours = BCDTODEC(temp2);
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	7afb      	ldrb	r3, [r7, #11]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4619      	mov	r1, r3
 8000d50:	0089      	lsls	r1, r1, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	701a      	strb	r2, [r3, #0]

		temp2 = (temp1 >> RTC_TR_AM_PM) & 0x01;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	0d9b      	lsrs	r3, r3, #22
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	72fb      	strb	r3, [r7, #11]
		pRTCTime->AMPM = BCDTODEC(temp2);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	0089      	lsls	r1, r1, #2
 8000d7e:	440b      	add	r3, r1
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	70da      	strb	r2, [r3, #3]

		/*read Date */
		temp1 = RTC->DR;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <RTC_GetTimeDate+0x1a4>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

		temp2 = (temp1 >> RTC_DR_DU3_0) & 0x3F;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d9a:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Day = BCDTODEC(temp2);
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4619      	mov	r1, r3
 8000dac:	0089      	lsls	r1, r1, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	715a      	strb	r2, [r3, #5]

		temp2 = (temp1 >> RTC_DR_MU3_0) & 0x1F;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Month = BCDTODEC(temp2);
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	0089      	lsls	r1, r1, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	719a      	strb	r2, [r3, #6]

		temp2 = (temp1 >> RTC_DR_YU3_0) & 0xFF;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	0c1b      	lsrs	r3, r3, #16
 8000dec:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Year = BCDTODEC(temp2);
 8000dee:	7afb      	ldrb	r3, [r7, #11]
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	0089      	lsls	r1, r1, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4413      	add	r3, r2
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	71da      	strb	r2, [r3, #7]

		temp2 = (temp1 >> RTC_DR_WDU2_0) & 0x07;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	0b5b      	lsrs	r3, r3, #13
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	72fb      	strb	r3, [r7, #11]
		pRTCTime->Weekday = BCDTODEC(temp2);
 8000e1a:	7afb      	ldrb	r3, [r7, #11]
 8000e1c:	f003 030f 	and.w	r3, r3, #15
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	7afb      	ldrb	r3, [r7, #11]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	0089      	lsls	r1, r1, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4413      	add	r3, r2
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	711a      	strb	r2, [r3, #4]


	}


}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40002800 	.word	0x40002800

08000e48 <RTC_Init>:
 *
 * @return		-none
 *
 * @note		-
 */
void RTC_Init(RTC_Handle_t *pRTCHandle){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

	/*  Enable write to RCC_BDCR, RTC registers */
	/* Need to set DBP(Disable Backup domain write Protection) bit in RCC_PWR reg */
	BackupDomain_Unlock();
 8000e50:	f000 f946 	bl	80010e0 <BackupDomain_Unlock>

	/*  Optionally Resets the Backup Domain. This clears the clk rtc clk source and RTC regs */
	if(pRTCHandle ->RTC_Config.Reset_BackupDomain_EnorDi){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7b5b      	ldrb	r3, [r3, #13]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <RTC_Init+0x2c>
		RCC->BDCR |= (1 << 16);
 8000e5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <RTC_Init+0x78>)
 8000e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e60:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <RTC_Init+0x78>)
 8000e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e66:	6713      	str	r3, [r2, #112]	@ 0x70
		RCC->BDCR &= ~(1 << 16);
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <RTC_Init+0x78>)
 8000e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <RTC_Init+0x78>)
 8000e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e72:	6713      	str	r3, [r2, #112]	@ 0x70
	}
	/* RTC_clk configuration */
	RTC_ClkConfig(& pRTCHandle->RTC_Config);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f970 	bl	800115c <RTC_ClkConfig>
		/* will implement later*/
	}
#endif

	/*Disable RTC write protection */
	RTC_Unlock();
 8000e7c:	f000 f954 	bl	8001128 <RTC_Unlock>

	/* Enter rtc initialization mode */
	RTC_EnterCalendrInitMode();
 8000e80:	f000 f822 	bl	8000ec8 <RTC_EnterCalendrInitMode>
	/* program prescalers */
	/* Prescalers (Async in PREDIV_A [22:16], Sync in PREDIV_S [14:0]) */
	/* Note: First pgm the sync prescaler then async prescaler */
	RTC ->PRER = (pRTCHandle->RTC_Config.Sync_Prescaler & 0x7FFF);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <RTC_Init+0x7c>)
 8000e8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e8e:	6113      	str	r3, [r2, #16]
	RTC ->PRER |= ((pRTCHandle->RTC_Config.Async_Prescaler & 0x7F) << 16);
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <RTC_Init+0x7c>)
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	041b      	lsls	r3, r3, #16
 8000e9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000e9e:	4909      	ldr	r1, [pc, #36]	@ (8000ec4 <RTC_Init+0x7c>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	610b      	str	r3, [r1, #16]


	/* RTC_SetTimeDate */
	RTC_SetTimeDate(pRTCHandle);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f833 	bl	8000f10 <RTC_SetTimeDate>

	/* exit initialization mode */
	RTC_ExitCalendrInitMode();
 8000eaa:	f000 f823 	bl	8000ef4 <RTC_ExitCalendrInitMode>

	/* enable rtc write protection */
	RTC_Lock();
 8000eae:	f000 f949 	bl	8001144 <RTC_Lock>

	/* enable backup domain write protection */
	BackupDomain_Lock();
 8000eb2:	f000 f92b 	bl	800110c <BackupDomain_Lock>


}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40002800 	.word	0x40002800

08000ec8 <RTC_EnterCalendrInitMode>:
 * 									Helper Fns
 ************************************************************************************************************/
/***************************************************************************************
 * RTC enter calendar initialization mode
 ******************************************************************************************/
static void RTC_EnterCalendrInitMode(void){
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

	/* Set INIT bit to 1 in the RTC_ISR register to enter initialization mode.*/
	RTC->ISR |= (1 << RTC_ISR_INIT);
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <RTC_EnterCalendrInitMode+0x28>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	@ (8000ef0 <RTC_EnterCalendrInitMode+0x28>)
 8000ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed6:	60d3      	str	r3, [r2, #12]
	/* wait util the INITF flag is set */
	while(!(RTC->ISR & (1 << RTC_ISR_INITF)));
 8000ed8:	bf00      	nop
 8000eda:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <RTC_EnterCalendrInitMode+0x28>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f9      	beq.n	8000eda <RTC_EnterCalendrInitMode+0x12>

}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	40002800 	.word	0x40002800

08000ef4 <RTC_ExitCalendrInitMode>:


/***************************************************************************************
 * RTC enter calendar initialization mode
 ******************************************************************************************/
static void RTC_ExitCalendrInitMode(void){
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

	/* clear INIT in the RTC_ISR register to exit initialization mode.*/
	RTC->ISR &= ~(1 << RTC_ISR_INIT);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <RTC_ExitCalendrInitMode+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <RTC_ExitCalendrInitMode+0x18>)
 8000efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f02:	60d3      	str	r3, [r2, #12]

}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40002800 	.word	0x40002800

08000f10 <RTC_SetTimeDate>:


/***************************************************************************************
 * RTC time date initialization
 ******************************************************************************************/
static void RTC_SetTimeDate(RTC_Handle_t *pRTCHandle){
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

	/* Load the initial time and date values in the shadow registers (RTC_TR and RTC_DR) */
	uint32_t temp;

	/*Load Seconds, minutes,Hours and format in BCD format*/
	temp =0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Seconds) << RTC_TR_SU3_0);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7c9b      	ldrb	r3, [r3, #18]
 8000f20:	4a6d      	ldr	r2, [pc, #436]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	08db      	lsrs	r3, r3, #3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	0118      	lsls	r0, r3, #4
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7c9a      	ldrb	r2, [r3, #18]
 8000f30:	4b69      	ldr	r3, [pc, #420]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000f32:	fba3 1302 	umull	r1, r3, r3, r2
 8000f36:	08d9      	lsrs	r1, r3, #3
 8000f38:	460b      	mov	r3, r1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4303      	orrs	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Minutes) << RTC_TR_MNU3_0);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7c5b      	ldrb	r3, [r3, #17]
 8000f52:	4a61      	ldr	r2, [pc, #388]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	0118      	lsls	r0, r3, #4
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7c5a      	ldrb	r2, [r3, #17]
 8000f62:	4b5d      	ldr	r3, [pc, #372]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000f64:	fba3 1302 	umull	r1, r3, r3, r2
 8000f68:	08d9      	lsrs	r1, r3, #3
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4303      	orrs	r3, r0
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Hours) << RTC_TR_HU3_0);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7c1b      	ldrb	r3, [r3, #16]
 8000f84:	4a54      	ldr	r2, [pc, #336]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	0118      	lsls	r0, r3, #4
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7c1a      	ldrb	r2, [r3, #16]
 8000f94:	4b50      	ldr	r3, [pc, #320]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000f96:	fba3 1302 	umull	r1, r3, r3, r2
 8000f9a:	08d9      	lsrs	r1, r3, #3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4303      	orrs	r3, r0
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.AMPM) << RTC_TR_AM_PM);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7cdb      	ldrb	r3, [r3, #19]
 8000fb6:	4a48      	ldr	r2, [pc, #288]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	0118      	lsls	r0, r3, #4
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7cda      	ldrb	r2, [r3, #19]
 8000fc6:	4b44      	ldr	r3, [pc, #272]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fcc:	08d9      	lsrs	r1, r3, #3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4303      	orrs	r3, r0
 8000fdc:	059b      	lsls	r3, r3, #22
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

	RTC->TR = temp;
 8000fe4:	4a3d      	ldr	r2, [pc, #244]	@ (80010dc <RTC_SetTimeDate+0x1cc>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6013      	str	r3, [r2, #0]

	/*Load Date, Month,weekday and year in BCD format*/
	temp =0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Day) << RTC_DR_DU3_0);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7d5b      	ldrb	r3, [r3, #21]
 8000ff2:	4a39      	ldr	r2, [pc, #228]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	0118      	lsls	r0, r3, #4
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7d5a      	ldrb	r2, [r3, #21]
 8001002:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8001004:	fba3 1302 	umull	r1, r3, r3, r2
 8001008:	08d9      	lsrs	r1, r3, #3
 800100a:	460b      	mov	r3, r1
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4303      	orrs	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Month) << RTC_DR_MU3_0);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7d9b      	ldrb	r3, [r3, #22]
 8001024:	4a2c      	ldr	r2, [pc, #176]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	0118      	lsls	r0, r3, #4
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7d9a      	ldrb	r2, [r3, #22]
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8001036:	fba3 1302 	umull	r1, r3, r3, r2
 800103a:	08d9      	lsrs	r1, r3, #3
 800103c:	460b      	mov	r3, r1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4303      	orrs	r3, r0
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Weekday) << RTC_DR_WDU2_0);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7d1b      	ldrb	r3, [r3, #20]
 8001056:	4a20      	ldr	r2, [pc, #128]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	0118      	lsls	r0, r3, #4
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7d1a      	ldrb	r2, [r3, #20]
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 8001068:	fba3 1302 	umull	r1, r3, r3, r2
 800106c:	08d9      	lsrs	r1, r3, #3
 800106e:	460b      	mov	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4303      	orrs	r3, r0
 800107c:	035b      	lsls	r3, r3, #13
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
	temp |= (DECTOBCD(pRTCHandle->RTC_Time.Year) << RTC_DR_YU3_0);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7ddb      	ldrb	r3, [r3, #23]
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	0118      	lsls	r0, r3, #4
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7dda      	ldrb	r2, [r3, #23]
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <RTC_SetTimeDate+0x1c8>)
 800109a:	fba3 1302 	umull	r1, r3, r3, r2
 800109e:	08d9      	lsrs	r1, r3, #3
 80010a0:	460b      	mov	r3, r1
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4303      	orrs	r3, r0
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]

	RTC->DR = temp;
 80010b6:	4a09      	ldr	r2, [pc, #36]	@ (80010dc <RTC_SetTimeDate+0x1cc>)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6053      	str	r3, [r2, #4]


	/* configure the time format (12 or 24 hours) through the FMT bit in the RTC_CR */
	RTC ->CR |= (pRTCHandle ->RTC_Config.hour_format << RTC_CR_FMT);
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <RTC_SetTimeDate+0x1cc>)
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7b1b      	ldrb	r3, [r3, #12]
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	4905      	ldr	r1, [pc, #20]	@ (80010dc <RTC_SetTimeDate+0x1cc>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	608b      	str	r3, [r1, #8]


}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	cccccccd 	.word	0xcccccccd
 80010dc:	40002800 	.word	0x40002800

080010e0 <BackupDomain_Unlock>:


/***********************************************************
 * Back up domain unlock
 ***************************************************************/
static void BackupDomain_Unlock(void){
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

	/*Enable PWR peripheral clock*/
	PWR_PCLK_EN();
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <BackupDomain_Unlock+0x24>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <BackupDomain_Unlock+0x24>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Disable Backup Domain write protection DBP*/
	PWR->CR |= (1 << 8);
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <BackupDomain_Unlock+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <BackupDomain_Unlock+0x28>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fa:	6013      	str	r3, [r2, #0]

}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <BackupDomain_Lock>:


/***************************************************************
 * Back up domain unlock
 ****************************************************************/
static void BackupDomain_Lock(void){
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

	/*Enable Backup Domain write protection DBP*/
	PWR->CR &= ~(1 << 8);
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <BackupDomain_Lock+0x18>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a03      	ldr	r2, [pc, #12]	@ (8001124 <BackupDomain_Lock+0x18>)
 8001116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800111a:	6013      	str	r3, [r2, #0]

}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	40007000 	.word	0x40007000

08001128 <RTC_Unlock>:
/***********************************************************************************************
 * RTC unlock disables rtc write protection
 * Note: unlock the write protection on all the RTC registers
 * except for RTC_ISR[31:8], RTC_TAFCR, and RTC_BKPxR.
 *****************************************************************************************/
static void RTC_Unlock(void){
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

	/* write 0xCA followed by 0x53 into the RTC WPR reg to disable write protection */
	RTC->WPR = 0xCA;
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <RTC_Unlock+0x18>)
 800112e:	22ca      	movs	r2, #202	@ 0xca
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8001132:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <RTC_Unlock+0x18>)
 8001134:	2253      	movs	r2, #83	@ 0x53
 8001136:	625a      	str	r2, [r3, #36]	@ 0x24


}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40002800 	.word	0x40002800

08001144 <RTC_Lock>:

/**********************************************************************************************
 * RTC lock enables rtc write protection
  ********************************************************************************************/
static void RTC_Lock(void){
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

	/* write 0xFF into the RTC WPR reg to enables write protection */
	RTC->WPR = 0xFF;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <RTC_Lock+0x14>)
 800114a:	22ff      	movs	r2, #255	@ 0xff
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40002800 	.word	0x40002800

0800115c <RTC_ClkConfig>:


/******************************************************************************************************
 * RTC-ClkConfig
 *****************************************************************************************************/
static void RTC_ClkConfig(RTC_Config_t *pRTCConfig){
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

	/* Enable the selected RTC clock sorce */
	/* Note: The selected clk source must be enabeld and ready before being selected as RTC_CLK source */
	switch (pRTCConfig->Clock_Source){
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d030      	beq.n	80011ce <RTC_ClkConfig+0x72>
 800116c:	2b03      	cmp	r3, #3
 800116e:	dc43      	bgt.n	80011f8 <RTC_ClkConfig+0x9c>
 8001170:	2b01      	cmp	r3, #1
 8001172:	d002      	beq.n	800117a <RTC_ClkConfig+0x1e>
 8001174:	2b02      	cmp	r3, #2
 8001176:	d015      	beq.n	80011a4 <RTC_ClkConfig+0x48>
 8001178:	e03e      	b.n	80011f8 <RTC_ClkConfig+0x9c>

		uint32_t temp;
		case RTC_CLKSRC_LSE:
			/* LSEON */
			RCC->BDCR |= (1 << 0);
 800117a:	4b38      	ldr	r3, [pc, #224]	@ (800125c <RTC_ClkConfig+0x100>)
 800117c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800117e:	4a37      	ldr	r2, [pc, #220]	@ (800125c <RTC_ClkConfig+0x100>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6713      	str	r3, [r2, #112]	@ 0x70

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 8001186:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <RTC_ClkConfig+0x104>)
 8001188:	60fb      	str	r3, [r7, #12]
			while((!(RCC->BDCR & (1 << 1))) && temp--);
 800118a:	bf00      	nop
 800118c:	4b33      	ldr	r3, [pc, #204]	@ (800125c <RTC_ClkConfig+0x100>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d132      	bne.n	80011fe <RTC_ClkConfig+0xa2>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	60fa      	str	r2, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f4      	bne.n	800118c <RTC_ClkConfig+0x30>

			break;
 80011a2:	e02c      	b.n	80011fe <RTC_ClkConfig+0xa2>

		case RTC_CLKSRC_LSI:
			/* LSION */
			RCC->CSR |= (1 << 0);
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <RTC_ClkConfig+0x100>)
 80011a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011a8:	4a2c      	ldr	r2, [pc, #176]	@ (800125c <RTC_ClkConfig+0x100>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6753      	str	r3, [r2, #116]	@ 0x74

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <RTC_ClkConfig+0x104>)
 80011b2:	60fb      	str	r3, [r7, #12]
			while((!(RCC->CSR & (1 << 1))) && temp--);
 80011b4:	bf00      	nop
 80011b6:	4b29      	ldr	r3, [pc, #164]	@ (800125c <RTC_ClkConfig+0x100>)
 80011b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11f      	bne.n	8001202 <RTC_ClkConfig+0xa6>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	60fa      	str	r2, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f4      	bne.n	80011b6 <RTC_ClkConfig+0x5a>

			break;
 80011cc:	e019      	b.n	8001202 <RTC_ClkConfig+0xa6>

		case RTC_CLKSRC_HSE_DIV128:
			/* LSION */
			RCC->CR |= (1 << 16);
 80011ce:	4b23      	ldr	r3, [pc, #140]	@ (800125c <RTC_ClkConfig+0x100>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a22      	ldr	r2, [pc, #136]	@ (800125c <RTC_ClkConfig+0x100>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d8:	6013      	str	r3, [r2, #0]

			/* wait until the clk is ready or timeout */
			temp = RTC_TIMEOUT_CYCLES;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <RTC_ClkConfig+0x104>)
 80011dc:	60fb      	str	r3, [r7, #12]
			while((!(RCC->CR & (1 << 17))) && temp--);
 80011de:	bf00      	nop
 80011e0:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <RTC_ClkConfig+0x100>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10c      	bne.n	8001206 <RTC_ClkConfig+0xaa>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	60fa      	str	r2, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f4      	bne.n	80011e0 <RTC_ClkConfig+0x84>

			break;
 80011f6:	e006      	b.n	8001206 <RTC_ClkConfig+0xaa>

		default: BackupDomain_Lock();
 80011f8:	f7ff ff88 	bl	800110c <BackupDomain_Lock>
 80011fc:	e004      	b.n	8001208 <RTC_ClkConfig+0xac>
			break;
 80011fe:	bf00      	nop
 8001200:	e002      	b.n	8001208 <RTC_ClkConfig+0xac>
			break;
 8001202:	bf00      	nop
 8001204:	e000      	b.n	8001208 <RTC_ClkConfig+0xac>
			break;
 8001206:	bf00      	nop
	}

	/* Program the selected clk as RTC clock using RTCSEL bits in BDCR*/
	if(pRTCConfig->Clock_Source == RTC_CLKSRC_LSE) RCC->BDCR |= (RTC_CLKSRC_LSE << 8);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d106      	bne.n	800121e <RTC_ClkConfig+0xc2>
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <RTC_ClkConfig+0x100>)
 8001212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001214:	4a11      	ldr	r2, [pc, #68]	@ (800125c <RTC_ClkConfig+0x100>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121a:	6713      	str	r3, [r2, #112]	@ 0x70
 800121c:	e014      	b.n	8001248 <RTC_ClkConfig+0xec>
	else if(pRTCConfig->Clock_Source == RTC_CLKSRC_LSI) RCC->BDCR |= (RTC_CLKSRC_LSI << 8);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d106      	bne.n	8001234 <RTC_ClkConfig+0xd8>
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <RTC_ClkConfig+0x100>)
 8001228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800122a:	4a0c      	ldr	r2, [pc, #48]	@ (800125c <RTC_ClkConfig+0x100>)
 800122c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001230:	6713      	str	r3, [r2, #112]	@ 0x70
 8001232:	e009      	b.n	8001248 <RTC_ClkConfig+0xec>
	else if(pRTCConfig->Clock_Source == RTC_CLKSRC_HSE_DIV128) RCC->BDCR |= (RTC_CLKSRC_HSE_DIV128 << 8);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b03      	cmp	r3, #3
 800123a:	d105      	bne.n	8001248 <RTC_ClkConfig+0xec>
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <RTC_ClkConfig+0x100>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <RTC_ClkConfig+0x100>)
 8001242:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001246:	6713      	str	r3, [r2, #112]	@ 0x70

	/* Enable the RTC Clock */
	RCC->BDCR |= (1 << 15);
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <RTC_ClkConfig+0x100>)
 800124a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800124c:	4a03      	ldr	r2, [pc, #12]	@ (800125c <RTC_ClkConfig+0x100>)
 800124e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001252:	6713      	str	r3, [r2, #112]	@ 0x70

}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	000f4240 	.word	0x000f4240

08001264 <RTC_IRQInterruptConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d144      	bne.n	8001304 <RTC_IRQInterruptConfig+0xa0>
		if(IRQNumber <= 31){
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b1f      	cmp	r3, #31
 800127e:	d809      	bhi.n	8001294 <RTC_IRQInterruptConfig+0x30>
			/* configure ISER0 */
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001280:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <RTC_IRQInterruptConfig+0x134>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4611      	mov	r1, r2
 800128e:	4a42      	ldr	r2, [pc, #264]	@ (8001398 <RTC_IRQInterruptConfig+0x134>)
 8001290:	430b      	orrs	r3, r1
 8001292:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 32 && IRQNumber < 64){
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b1f      	cmp	r3, #31
 8001298:	d90e      	bls.n	80012b8 <RTC_IRQInterruptConfig+0x54>
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b3f      	cmp	r3, #63	@ 0x3f
 800129e:	d80b      	bhi.n	80012b8 <RTC_IRQInterruptConfig+0x54>
			/* configure ISER1 */
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80012a0:	4b3e      	ldr	r3, [pc, #248]	@ (800139c <RTC_IRQInterruptConfig+0x138>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	79fa      	ldrb	r2, [r7, #7]
 80012a6:	f002 021f 	and.w	r2, r2, #31
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4611      	mov	r1, r2
 80012b2:	4a3a      	ldr	r2, [pc, #232]	@ (800139c <RTC_IRQInterruptConfig+0x138>)
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 64 && IRQNumber < 96){
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80012bc:	d90e      	bls.n	80012dc <RTC_IRQInterruptConfig+0x78>
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b5f      	cmp	r3, #95	@ 0x5f
 80012c2:	d80b      	bhi.n	80012dc <RTC_IRQInterruptConfig+0x78>
			/* configure ISER2 */
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 80012c4:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <RTC_IRQInterruptConfig+0x13c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	f002 021f 	and.w	r2, r2, #31
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	4611      	mov	r1, r2
 80012d6:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <RTC_IRQInterruptConfig+0x13c>)
 80012d8:	430b      	orrs	r3, r1
 80012da:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 96 && IRQNumber < 128){
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b5f      	cmp	r3, #95	@ 0x5f
 80012e0:	d954      	bls.n	800138c <RTC_IRQInterruptConfig+0x128>
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db50      	blt.n	800138c <RTC_IRQInterruptConfig+0x128>
			/* configure ISER3 */
			*NVIC_ISER3 |= (1 << (IRQNumber % 32));
 80012ea:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <RTC_IRQInterruptConfig+0x140>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	79fa      	ldrb	r2, [r7, #7]
 80012f0:	f002 021f 	and.w	r2, r2, #31
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	4611      	mov	r1, r2
 80012fc:	4a29      	ldr	r2, [pc, #164]	@ (80013a4 <RTC_IRQInterruptConfig+0x140>)
 80012fe:	430b      	orrs	r3, r1
 8001300:	6013      	str	r3, [r2, #0]
		}

	}


}
 8001302:	e043      	b.n	800138c <RTC_IRQInterruptConfig+0x128>
		if(IRQNumber <= 31){
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b1f      	cmp	r3, #31
 8001308:	d809      	bhi.n	800131e <RTC_IRQInterruptConfig+0xba>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800130a:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <RTC_IRQInterruptConfig+0x144>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4611      	mov	r1, r2
 8001318:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <RTC_IRQInterruptConfig+0x144>)
 800131a:	430b      	orrs	r3, r1
 800131c:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 32 && IRQNumber < 64){
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b1f      	cmp	r3, #31
 8001322:	d90e      	bls.n	8001342 <RTC_IRQInterruptConfig+0xde>
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b3f      	cmp	r3, #63	@ 0x3f
 8001328:	d80b      	bhi.n	8001342 <RTC_IRQInterruptConfig+0xde>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <RTC_IRQInterruptConfig+0x148>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	f002 021f 	and.w	r2, r2, #31
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	4611      	mov	r1, r2
 800133c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ac <RTC_IRQInterruptConfig+0x148>)
 800133e:	430b      	orrs	r3, r1
 8001340:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 64 && IRQNumber < 96){
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b3f      	cmp	r3, #63	@ 0x3f
 8001346:	d90e      	bls.n	8001366 <RTC_IRQInterruptConfig+0x102>
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b5f      	cmp	r3, #95	@ 0x5f
 800134c:	d80b      	bhi.n	8001366 <RTC_IRQInterruptConfig+0x102>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <RTC_IRQInterruptConfig+0x14c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	79fa      	ldrb	r2, [r7, #7]
 8001354:	f002 021f 	and.w	r2, r2, #31
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	4611      	mov	r1, r2
 8001360:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <RTC_IRQInterruptConfig+0x14c>)
 8001362:	430b      	orrs	r3, r1
 8001364:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 96 && IRQNumber < 128){
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b5f      	cmp	r3, #95	@ 0x5f
 800136a:	d90f      	bls.n	800138c <RTC_IRQInterruptConfig+0x128>
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0b      	blt.n	800138c <RTC_IRQInterruptConfig+0x128>
			*NVIC_ICER3 |= (1 << (IRQNumber % 32));
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <RTC_IRQInterruptConfig+0x150>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	f002 021f 	and.w	r2, r2, #31
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	4611      	mov	r1, r2
 8001386:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <RTC_IRQInterruptConfig+0x150>)
 8001388:	430b      	orrs	r3, r1
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000e104 	.word	0xe000e104
 80013a0:	e000e108 	.word	0xe000e108
 80013a4:	e000e10c 	.word	0xe000e10c
 80013a8:	e000e180 	.word	0xe000e180
 80013ac:	e000e184 	.word	0xe000e184
 80013b0:	e000e188 	.word	0xe000e188
 80013b4:	e000e18c 	.word	0xe000e18c

080013b8 <RTC_IRQPriorityConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]

	uint8_t iprx = IRQNumber / 4;  			/* ipr reg number offset address */
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;    /* position in iprx reg */
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_position = (8 * iprx_section) + (8 - NO_IPR_BITS_IMPLEMENTED);  //only upper 4 bits are implemented in IPR
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	3304      	adds	r3, #4
 80013de:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_position);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80013e8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	79b9      	ldrb	r1, [r7, #6]
 80013f0:	7b7b      	ldrb	r3, [r7, #13]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8001400:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]


}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <RTC_WUTIRQHandling>:
 *
 * @return		-
 *
 * @note		-
 */
void RTC_WUTIRQHandling(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

	if(RTC->ISR & (1 << RTC_ISR_WUTF)){
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <RTC_WUTIRQHandling+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d016      	beq.n	8001452 <RTC_WUTIRQHandling+0x3e>
		/* clear WATF flag */
		BackupDomain_Unlock();
 8001424:	f7ff fe5c 	bl	80010e0 <BackupDomain_Unlock>
		RTC ->ISR &= ~(1 << RTC_ISR_WUTF);
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <RTC_WUTIRQHandling+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <RTC_WUTIRQHandling+0x44>)
 800142e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001432:	60d3      	str	r3, [r2, #12]

		/* clear pending flag */
		if(EXTI->PR & (1 << 22)){
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <RTC_WUTIRQHandling+0x48>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <RTC_WUTIRQHandling+0x38>
			EXTI->PR |= (1 <<22);
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <RTC_WUTIRQHandling+0x48>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	4a05      	ldr	r2, [pc, #20]	@ (800145c <RTC_WUTIRQHandling+0x48>)
 8001446:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144a:	6153      	str	r3, [r2, #20]
		}

		/* application event call back */
		RTC_ApplicationEventCallback(RTC_EV_WUTI);
 800144c:	2001      	movs	r0, #1
 800144e:	f7fe ffe1 	bl	8000414 <RTC_ApplicationEventCallback>
	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40002800 	.word	0x40002800
 800145c:	40013c00 	.word	0x40013c00

08001460 <std>:
 8001460:	2300      	movs	r3, #0
 8001462:	b510      	push	{r4, lr}
 8001464:	4604      	mov	r4, r0
 8001466:	e9c0 3300 	strd	r3, r3, [r0]
 800146a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800146e:	6083      	str	r3, [r0, #8]
 8001470:	8181      	strh	r1, [r0, #12]
 8001472:	6643      	str	r3, [r0, #100]	@ 0x64
 8001474:	81c2      	strh	r2, [r0, #14]
 8001476:	6183      	str	r3, [r0, #24]
 8001478:	4619      	mov	r1, r3
 800147a:	2208      	movs	r2, #8
 800147c:	305c      	adds	r0, #92	@ 0x5c
 800147e:	f000 f906 	bl	800168e <memset>
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <std+0x58>)
 8001484:	6263      	str	r3, [r4, #36]	@ 0x24
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <std+0x5c>)
 8001488:	62a3      	str	r3, [r4, #40]	@ 0x28
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <std+0x60>)
 800148c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <std+0x64>)
 8001490:	6323      	str	r3, [r4, #48]	@ 0x30
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <std+0x68>)
 8001494:	6224      	str	r4, [r4, #32]
 8001496:	429c      	cmp	r4, r3
 8001498:	d006      	beq.n	80014a8 <std+0x48>
 800149a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800149e:	4294      	cmp	r4, r2
 80014a0:	d002      	beq.n	80014a8 <std+0x48>
 80014a2:	33d0      	adds	r3, #208	@ 0xd0
 80014a4:	429c      	cmp	r4, r3
 80014a6:	d105      	bne.n	80014b4 <std+0x54>
 80014a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80014ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014b0:	f000 b966 	b.w	8001780 <__retarget_lock_init_recursive>
 80014b4:	bd10      	pop	{r4, pc}
 80014b6:	bf00      	nop
 80014b8:	08001609 	.word	0x08001609
 80014bc:	0800162b 	.word	0x0800162b
 80014c0:	08001663 	.word	0x08001663
 80014c4:	08001687 	.word	0x08001687
 80014c8:	200000c8 	.word	0x200000c8

080014cc <stdio_exit_handler>:
 80014cc:	4a02      	ldr	r2, [pc, #8]	@ (80014d8 <stdio_exit_handler+0xc>)
 80014ce:	4903      	ldr	r1, [pc, #12]	@ (80014dc <stdio_exit_handler+0x10>)
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <stdio_exit_handler+0x14>)
 80014d2:	f000 b869 	b.w	80015a8 <_fwalk_sglue>
 80014d6:	bf00      	nop
 80014d8:	2000001c 	.word	0x2000001c
 80014dc:	08002011 	.word	0x08002011
 80014e0:	2000002c 	.word	0x2000002c

080014e4 <cleanup_stdio>:
 80014e4:	6841      	ldr	r1, [r0, #4]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <cleanup_stdio+0x34>)
 80014e8:	4299      	cmp	r1, r3
 80014ea:	b510      	push	{r4, lr}
 80014ec:	4604      	mov	r4, r0
 80014ee:	d001      	beq.n	80014f4 <cleanup_stdio+0x10>
 80014f0:	f000 fd8e 	bl	8002010 <_fflush_r>
 80014f4:	68a1      	ldr	r1, [r4, #8]
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <cleanup_stdio+0x38>)
 80014f8:	4299      	cmp	r1, r3
 80014fa:	d002      	beq.n	8001502 <cleanup_stdio+0x1e>
 80014fc:	4620      	mov	r0, r4
 80014fe:	f000 fd87 	bl	8002010 <_fflush_r>
 8001502:	68e1      	ldr	r1, [r4, #12]
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <cleanup_stdio+0x3c>)
 8001506:	4299      	cmp	r1, r3
 8001508:	d004      	beq.n	8001514 <cleanup_stdio+0x30>
 800150a:	4620      	mov	r0, r4
 800150c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001510:	f000 bd7e 	b.w	8002010 <_fflush_r>
 8001514:	bd10      	pop	{r4, pc}
 8001516:	bf00      	nop
 8001518:	200000c8 	.word	0x200000c8
 800151c:	20000130 	.word	0x20000130
 8001520:	20000198 	.word	0x20000198

08001524 <global_stdio_init.part.0>:
 8001524:	b510      	push	{r4, lr}
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <global_stdio_init.part.0+0x30>)
 8001528:	4c0b      	ldr	r4, [pc, #44]	@ (8001558 <global_stdio_init.part.0+0x34>)
 800152a:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <global_stdio_init.part.0+0x38>)
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	4620      	mov	r0, r4
 8001530:	2200      	movs	r2, #0
 8001532:	2104      	movs	r1, #4
 8001534:	f7ff ff94 	bl	8001460 <std>
 8001538:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800153c:	2201      	movs	r2, #1
 800153e:	2109      	movs	r1, #9
 8001540:	f7ff ff8e 	bl	8001460 <std>
 8001544:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001548:	2202      	movs	r2, #2
 800154a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800154e:	2112      	movs	r1, #18
 8001550:	f7ff bf86 	b.w	8001460 <std>
 8001554:	20000200 	.word	0x20000200
 8001558:	200000c8 	.word	0x200000c8
 800155c:	080014cd 	.word	0x080014cd

08001560 <__sfp_lock_acquire>:
 8001560:	4801      	ldr	r0, [pc, #4]	@ (8001568 <__sfp_lock_acquire+0x8>)
 8001562:	f000 b90e 	b.w	8001782 <__retarget_lock_acquire_recursive>
 8001566:	bf00      	nop
 8001568:	20000209 	.word	0x20000209

0800156c <__sfp_lock_release>:
 800156c:	4801      	ldr	r0, [pc, #4]	@ (8001574 <__sfp_lock_release+0x8>)
 800156e:	f000 b909 	b.w	8001784 <__retarget_lock_release_recursive>
 8001572:	bf00      	nop
 8001574:	20000209 	.word	0x20000209

08001578 <__sinit>:
 8001578:	b510      	push	{r4, lr}
 800157a:	4604      	mov	r4, r0
 800157c:	f7ff fff0 	bl	8001560 <__sfp_lock_acquire>
 8001580:	6a23      	ldr	r3, [r4, #32]
 8001582:	b11b      	cbz	r3, 800158c <__sinit+0x14>
 8001584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001588:	f7ff bff0 	b.w	800156c <__sfp_lock_release>
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <__sinit+0x28>)
 800158e:	6223      	str	r3, [r4, #32]
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <__sinit+0x2c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f5      	bne.n	8001584 <__sinit+0xc>
 8001598:	f7ff ffc4 	bl	8001524 <global_stdio_init.part.0>
 800159c:	e7f2      	b.n	8001584 <__sinit+0xc>
 800159e:	bf00      	nop
 80015a0:	080014e5 	.word	0x080014e5
 80015a4:	20000200 	.word	0x20000200

080015a8 <_fwalk_sglue>:
 80015a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015ac:	4607      	mov	r7, r0
 80015ae:	4688      	mov	r8, r1
 80015b0:	4614      	mov	r4, r2
 80015b2:	2600      	movs	r6, #0
 80015b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015b8:	f1b9 0901 	subs.w	r9, r9, #1
 80015bc:	d505      	bpl.n	80015ca <_fwalk_sglue+0x22>
 80015be:	6824      	ldr	r4, [r4, #0]
 80015c0:	2c00      	cmp	r4, #0
 80015c2:	d1f7      	bne.n	80015b4 <_fwalk_sglue+0xc>
 80015c4:	4630      	mov	r0, r6
 80015c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015ca:	89ab      	ldrh	r3, [r5, #12]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d907      	bls.n	80015e0 <_fwalk_sglue+0x38>
 80015d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015d4:	3301      	adds	r3, #1
 80015d6:	d003      	beq.n	80015e0 <_fwalk_sglue+0x38>
 80015d8:	4629      	mov	r1, r5
 80015da:	4638      	mov	r0, r7
 80015dc:	47c0      	blx	r8
 80015de:	4306      	orrs	r6, r0
 80015e0:	3568      	adds	r5, #104	@ 0x68
 80015e2:	e7e9      	b.n	80015b8 <_fwalk_sglue+0x10>

080015e4 <iprintf>:
 80015e4:	b40f      	push	{r0, r1, r2, r3}
 80015e6:	b507      	push	{r0, r1, r2, lr}
 80015e8:	4906      	ldr	r1, [pc, #24]	@ (8001604 <iprintf+0x20>)
 80015ea:	ab04      	add	r3, sp, #16
 80015ec:	6808      	ldr	r0, [r1, #0]
 80015ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80015f2:	6881      	ldr	r1, [r0, #8]
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	f000 f9e7 	bl	80019c8 <_vfiprintf_r>
 80015fa:	b003      	add	sp, #12
 80015fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001600:	b004      	add	sp, #16
 8001602:	4770      	bx	lr
 8001604:	20000028 	.word	0x20000028

08001608 <__sread>:
 8001608:	b510      	push	{r4, lr}
 800160a:	460c      	mov	r4, r1
 800160c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001610:	f000 f868 	bl	80016e4 <_read_r>
 8001614:	2800      	cmp	r0, #0
 8001616:	bfab      	itete	ge
 8001618:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800161a:	89a3      	ldrhlt	r3, [r4, #12]
 800161c:	181b      	addge	r3, r3, r0
 800161e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001622:	bfac      	ite	ge
 8001624:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001626:	81a3      	strhlt	r3, [r4, #12]
 8001628:	bd10      	pop	{r4, pc}

0800162a <__swrite>:
 800162a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800162e:	461f      	mov	r7, r3
 8001630:	898b      	ldrh	r3, [r1, #12]
 8001632:	05db      	lsls	r3, r3, #23
 8001634:	4605      	mov	r5, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4616      	mov	r6, r2
 800163a:	d505      	bpl.n	8001648 <__swrite+0x1e>
 800163c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001640:	2302      	movs	r3, #2
 8001642:	2200      	movs	r2, #0
 8001644:	f000 f83c 	bl	80016c0 <_lseek_r>
 8001648:	89a3      	ldrh	r3, [r4, #12]
 800164a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800164e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001652:	81a3      	strh	r3, [r4, #12]
 8001654:	4632      	mov	r2, r6
 8001656:	463b      	mov	r3, r7
 8001658:	4628      	mov	r0, r5
 800165a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800165e:	f000 b853 	b.w	8001708 <_write_r>

08001662 <__sseek>:
 8001662:	b510      	push	{r4, lr}
 8001664:	460c      	mov	r4, r1
 8001666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800166a:	f000 f829 	bl	80016c0 <_lseek_r>
 800166e:	1c43      	adds	r3, r0, #1
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	bf15      	itete	ne
 8001674:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001676:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800167a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800167e:	81a3      	strheq	r3, [r4, #12]
 8001680:	bf18      	it	ne
 8001682:	81a3      	strhne	r3, [r4, #12]
 8001684:	bd10      	pop	{r4, pc}

08001686 <__sclose>:
 8001686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800168a:	f000 b809 	b.w	80016a0 <_close_r>

0800168e <memset>:
 800168e:	4402      	add	r2, r0
 8001690:	4603      	mov	r3, r0
 8001692:	4293      	cmp	r3, r2
 8001694:	d100      	bne.n	8001698 <memset+0xa>
 8001696:	4770      	bx	lr
 8001698:	f803 1b01 	strb.w	r1, [r3], #1
 800169c:	e7f9      	b.n	8001692 <memset+0x4>
	...

080016a0 <_close_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4d06      	ldr	r5, [pc, #24]	@ (80016bc <_close_r+0x1c>)
 80016a4:	2300      	movs	r3, #0
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	602b      	str	r3, [r5, #0]
 80016ac:	f7fe ff27 	bl	80004fe <_close>
 80016b0:	1c43      	adds	r3, r0, #1
 80016b2:	d102      	bne.n	80016ba <_close_r+0x1a>
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	b103      	cbz	r3, 80016ba <_close_r+0x1a>
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
 80016bc:	20000204 	.word	0x20000204

080016c0 <_lseek_r>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	4d07      	ldr	r5, [pc, #28]	@ (80016e0 <_lseek_r+0x20>)
 80016c4:	4604      	mov	r4, r0
 80016c6:	4608      	mov	r0, r1
 80016c8:	4611      	mov	r1, r2
 80016ca:	2200      	movs	r2, #0
 80016cc:	602a      	str	r2, [r5, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f7fe ff39 	bl	8000546 <_lseek>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d102      	bne.n	80016de <_lseek_r+0x1e>
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	b103      	cbz	r3, 80016de <_lseek_r+0x1e>
 80016dc:	6023      	str	r3, [r4, #0]
 80016de:	bd38      	pop	{r3, r4, r5, pc}
 80016e0:	20000204 	.word	0x20000204

080016e4 <_read_r>:
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	4d07      	ldr	r5, [pc, #28]	@ (8001704 <_read_r+0x20>)
 80016e8:	4604      	mov	r4, r0
 80016ea:	4608      	mov	r0, r1
 80016ec:	4611      	mov	r1, r2
 80016ee:	2200      	movs	r2, #0
 80016f0:	602a      	str	r2, [r5, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f7fe feca 	bl	800048c <_read>
 80016f8:	1c43      	adds	r3, r0, #1
 80016fa:	d102      	bne.n	8001702 <_read_r+0x1e>
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	b103      	cbz	r3, 8001702 <_read_r+0x1e>
 8001700:	6023      	str	r3, [r4, #0]
 8001702:	bd38      	pop	{r3, r4, r5, pc}
 8001704:	20000204 	.word	0x20000204

08001708 <_write_r>:
 8001708:	b538      	push	{r3, r4, r5, lr}
 800170a:	4d07      	ldr	r5, [pc, #28]	@ (8001728 <_write_r+0x20>)
 800170c:	4604      	mov	r4, r0
 800170e:	4608      	mov	r0, r1
 8001710:	4611      	mov	r1, r2
 8001712:	2200      	movs	r2, #0
 8001714:	602a      	str	r2, [r5, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	f7fe fed5 	bl	80004c6 <_write>
 800171c:	1c43      	adds	r3, r0, #1
 800171e:	d102      	bne.n	8001726 <_write_r+0x1e>
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	b103      	cbz	r3, 8001726 <_write_r+0x1e>
 8001724:	6023      	str	r3, [r4, #0]
 8001726:	bd38      	pop	{r3, r4, r5, pc}
 8001728:	20000204 	.word	0x20000204

0800172c <__errno>:
 800172c:	4b01      	ldr	r3, [pc, #4]	@ (8001734 <__errno+0x8>)
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000028 	.word	0x20000028

08001738 <__libc_init_array>:
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	4d0d      	ldr	r5, [pc, #52]	@ (8001770 <__libc_init_array+0x38>)
 800173c:	4c0d      	ldr	r4, [pc, #52]	@ (8001774 <__libc_init_array+0x3c>)
 800173e:	1b64      	subs	r4, r4, r5
 8001740:	10a4      	asrs	r4, r4, #2
 8001742:	2600      	movs	r6, #0
 8001744:	42a6      	cmp	r6, r4
 8001746:	d109      	bne.n	800175c <__libc_init_array+0x24>
 8001748:	4d0b      	ldr	r5, [pc, #44]	@ (8001778 <__libc_init_array+0x40>)
 800174a:	4c0c      	ldr	r4, [pc, #48]	@ (800177c <__libc_init_array+0x44>)
 800174c:	f000 fdb0 	bl	80022b0 <_init>
 8001750:	1b64      	subs	r4, r4, r5
 8001752:	10a4      	asrs	r4, r4, #2
 8001754:	2600      	movs	r6, #0
 8001756:	42a6      	cmp	r6, r4
 8001758:	d105      	bne.n	8001766 <__libc_init_array+0x2e>
 800175a:	bd70      	pop	{r4, r5, r6, pc}
 800175c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001760:	4798      	blx	r3
 8001762:	3601      	adds	r6, #1
 8001764:	e7ee      	b.n	8001744 <__libc_init_array+0xc>
 8001766:	f855 3b04 	ldr.w	r3, [r5], #4
 800176a:	4798      	blx	r3
 800176c:	3601      	adds	r6, #1
 800176e:	e7f2      	b.n	8001756 <__libc_init_array+0x1e>
 8001770:	0800239c 	.word	0x0800239c
 8001774:	0800239c 	.word	0x0800239c
 8001778:	0800239c 	.word	0x0800239c
 800177c:	080023a0 	.word	0x080023a0

08001780 <__retarget_lock_init_recursive>:
 8001780:	4770      	bx	lr

08001782 <__retarget_lock_acquire_recursive>:
 8001782:	4770      	bx	lr

08001784 <__retarget_lock_release_recursive>:
 8001784:	4770      	bx	lr
	...

08001788 <_free_r>:
 8001788:	b538      	push	{r3, r4, r5, lr}
 800178a:	4605      	mov	r5, r0
 800178c:	2900      	cmp	r1, #0
 800178e:	d041      	beq.n	8001814 <_free_r+0x8c>
 8001790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001794:	1f0c      	subs	r4, r1, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	bfb8      	it	lt
 800179a:	18e4      	addlt	r4, r4, r3
 800179c:	f000 f8e0 	bl	8001960 <__malloc_lock>
 80017a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <_free_r+0x90>)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	b933      	cbnz	r3, 80017b4 <_free_r+0x2c>
 80017a6:	6063      	str	r3, [r4, #4]
 80017a8:	6014      	str	r4, [r2, #0]
 80017aa:	4628      	mov	r0, r5
 80017ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017b0:	f000 b8dc 	b.w	800196c <__malloc_unlock>
 80017b4:	42a3      	cmp	r3, r4
 80017b6:	d908      	bls.n	80017ca <_free_r+0x42>
 80017b8:	6820      	ldr	r0, [r4, #0]
 80017ba:	1821      	adds	r1, r4, r0
 80017bc:	428b      	cmp	r3, r1
 80017be:	bf01      	itttt	eq
 80017c0:	6819      	ldreq	r1, [r3, #0]
 80017c2:	685b      	ldreq	r3, [r3, #4]
 80017c4:	1809      	addeq	r1, r1, r0
 80017c6:	6021      	streq	r1, [r4, #0]
 80017c8:	e7ed      	b.n	80017a6 <_free_r+0x1e>
 80017ca:	461a      	mov	r2, r3
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	b10b      	cbz	r3, 80017d4 <_free_r+0x4c>
 80017d0:	42a3      	cmp	r3, r4
 80017d2:	d9fa      	bls.n	80017ca <_free_r+0x42>
 80017d4:	6811      	ldr	r1, [r2, #0]
 80017d6:	1850      	adds	r0, r2, r1
 80017d8:	42a0      	cmp	r0, r4
 80017da:	d10b      	bne.n	80017f4 <_free_r+0x6c>
 80017dc:	6820      	ldr	r0, [r4, #0]
 80017de:	4401      	add	r1, r0
 80017e0:	1850      	adds	r0, r2, r1
 80017e2:	4283      	cmp	r3, r0
 80017e4:	6011      	str	r1, [r2, #0]
 80017e6:	d1e0      	bne.n	80017aa <_free_r+0x22>
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	6053      	str	r3, [r2, #4]
 80017ee:	4408      	add	r0, r1
 80017f0:	6010      	str	r0, [r2, #0]
 80017f2:	e7da      	b.n	80017aa <_free_r+0x22>
 80017f4:	d902      	bls.n	80017fc <_free_r+0x74>
 80017f6:	230c      	movs	r3, #12
 80017f8:	602b      	str	r3, [r5, #0]
 80017fa:	e7d6      	b.n	80017aa <_free_r+0x22>
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	1821      	adds	r1, r4, r0
 8001800:	428b      	cmp	r3, r1
 8001802:	bf04      	itt	eq
 8001804:	6819      	ldreq	r1, [r3, #0]
 8001806:	685b      	ldreq	r3, [r3, #4]
 8001808:	6063      	str	r3, [r4, #4]
 800180a:	bf04      	itt	eq
 800180c:	1809      	addeq	r1, r1, r0
 800180e:	6021      	streq	r1, [r4, #0]
 8001810:	6054      	str	r4, [r2, #4]
 8001812:	e7ca      	b.n	80017aa <_free_r+0x22>
 8001814:	bd38      	pop	{r3, r4, r5, pc}
 8001816:	bf00      	nop
 8001818:	20000210 	.word	0x20000210

0800181c <sbrk_aligned>:
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	4e0f      	ldr	r6, [pc, #60]	@ (800185c <sbrk_aligned+0x40>)
 8001820:	460c      	mov	r4, r1
 8001822:	6831      	ldr	r1, [r6, #0]
 8001824:	4605      	mov	r5, r0
 8001826:	b911      	cbnz	r1, 800182e <sbrk_aligned+0x12>
 8001828:	f000 fcae 	bl	8002188 <_sbrk_r>
 800182c:	6030      	str	r0, [r6, #0]
 800182e:	4621      	mov	r1, r4
 8001830:	4628      	mov	r0, r5
 8001832:	f000 fca9 	bl	8002188 <_sbrk_r>
 8001836:	1c43      	adds	r3, r0, #1
 8001838:	d103      	bne.n	8001842 <sbrk_aligned+0x26>
 800183a:	f04f 34ff 	mov.w	r4, #4294967295
 800183e:	4620      	mov	r0, r4
 8001840:	bd70      	pop	{r4, r5, r6, pc}
 8001842:	1cc4      	adds	r4, r0, #3
 8001844:	f024 0403 	bic.w	r4, r4, #3
 8001848:	42a0      	cmp	r0, r4
 800184a:	d0f8      	beq.n	800183e <sbrk_aligned+0x22>
 800184c:	1a21      	subs	r1, r4, r0
 800184e:	4628      	mov	r0, r5
 8001850:	f000 fc9a 	bl	8002188 <_sbrk_r>
 8001854:	3001      	adds	r0, #1
 8001856:	d1f2      	bne.n	800183e <sbrk_aligned+0x22>
 8001858:	e7ef      	b.n	800183a <sbrk_aligned+0x1e>
 800185a:	bf00      	nop
 800185c:	2000020c 	.word	0x2000020c

08001860 <_malloc_r>:
 8001860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001864:	1ccd      	adds	r5, r1, #3
 8001866:	f025 0503 	bic.w	r5, r5, #3
 800186a:	3508      	adds	r5, #8
 800186c:	2d0c      	cmp	r5, #12
 800186e:	bf38      	it	cc
 8001870:	250c      	movcc	r5, #12
 8001872:	2d00      	cmp	r5, #0
 8001874:	4606      	mov	r6, r0
 8001876:	db01      	blt.n	800187c <_malloc_r+0x1c>
 8001878:	42a9      	cmp	r1, r5
 800187a:	d904      	bls.n	8001886 <_malloc_r+0x26>
 800187c:	230c      	movs	r3, #12
 800187e:	6033      	str	r3, [r6, #0]
 8001880:	2000      	movs	r0, #0
 8001882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800195c <_malloc_r+0xfc>
 800188a:	f000 f869 	bl	8001960 <__malloc_lock>
 800188e:	f8d8 3000 	ldr.w	r3, [r8]
 8001892:	461c      	mov	r4, r3
 8001894:	bb44      	cbnz	r4, 80018e8 <_malloc_r+0x88>
 8001896:	4629      	mov	r1, r5
 8001898:	4630      	mov	r0, r6
 800189a:	f7ff ffbf 	bl	800181c <sbrk_aligned>
 800189e:	1c43      	adds	r3, r0, #1
 80018a0:	4604      	mov	r4, r0
 80018a2:	d158      	bne.n	8001956 <_malloc_r+0xf6>
 80018a4:	f8d8 4000 	ldr.w	r4, [r8]
 80018a8:	4627      	mov	r7, r4
 80018aa:	2f00      	cmp	r7, #0
 80018ac:	d143      	bne.n	8001936 <_malloc_r+0xd6>
 80018ae:	2c00      	cmp	r4, #0
 80018b0:	d04b      	beq.n	800194a <_malloc_r+0xea>
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	4639      	mov	r1, r7
 80018b6:	4630      	mov	r0, r6
 80018b8:	eb04 0903 	add.w	r9, r4, r3
 80018bc:	f000 fc64 	bl	8002188 <_sbrk_r>
 80018c0:	4581      	cmp	r9, r0
 80018c2:	d142      	bne.n	800194a <_malloc_r+0xea>
 80018c4:	6821      	ldr	r1, [r4, #0]
 80018c6:	1a6d      	subs	r5, r5, r1
 80018c8:	4629      	mov	r1, r5
 80018ca:	4630      	mov	r0, r6
 80018cc:	f7ff ffa6 	bl	800181c <sbrk_aligned>
 80018d0:	3001      	adds	r0, #1
 80018d2:	d03a      	beq.n	800194a <_malloc_r+0xea>
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	442b      	add	r3, r5
 80018d8:	6023      	str	r3, [r4, #0]
 80018da:	f8d8 3000 	ldr.w	r3, [r8]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	bb62      	cbnz	r2, 800193c <_malloc_r+0xdc>
 80018e2:	f8c8 7000 	str.w	r7, [r8]
 80018e6:	e00f      	b.n	8001908 <_malloc_r+0xa8>
 80018e8:	6822      	ldr	r2, [r4, #0]
 80018ea:	1b52      	subs	r2, r2, r5
 80018ec:	d420      	bmi.n	8001930 <_malloc_r+0xd0>
 80018ee:	2a0b      	cmp	r2, #11
 80018f0:	d917      	bls.n	8001922 <_malloc_r+0xc2>
 80018f2:	1961      	adds	r1, r4, r5
 80018f4:	42a3      	cmp	r3, r4
 80018f6:	6025      	str	r5, [r4, #0]
 80018f8:	bf18      	it	ne
 80018fa:	6059      	strne	r1, [r3, #4]
 80018fc:	6863      	ldr	r3, [r4, #4]
 80018fe:	bf08      	it	eq
 8001900:	f8c8 1000 	streq.w	r1, [r8]
 8001904:	5162      	str	r2, [r4, r5]
 8001906:	604b      	str	r3, [r1, #4]
 8001908:	4630      	mov	r0, r6
 800190a:	f000 f82f 	bl	800196c <__malloc_unlock>
 800190e:	f104 000b 	add.w	r0, r4, #11
 8001912:	1d23      	adds	r3, r4, #4
 8001914:	f020 0007 	bic.w	r0, r0, #7
 8001918:	1ac2      	subs	r2, r0, r3
 800191a:	bf1c      	itt	ne
 800191c:	1a1b      	subne	r3, r3, r0
 800191e:	50a3      	strne	r3, [r4, r2]
 8001920:	e7af      	b.n	8001882 <_malloc_r+0x22>
 8001922:	6862      	ldr	r2, [r4, #4]
 8001924:	42a3      	cmp	r3, r4
 8001926:	bf0c      	ite	eq
 8001928:	f8c8 2000 	streq.w	r2, [r8]
 800192c:	605a      	strne	r2, [r3, #4]
 800192e:	e7eb      	b.n	8001908 <_malloc_r+0xa8>
 8001930:	4623      	mov	r3, r4
 8001932:	6864      	ldr	r4, [r4, #4]
 8001934:	e7ae      	b.n	8001894 <_malloc_r+0x34>
 8001936:	463c      	mov	r4, r7
 8001938:	687f      	ldr	r7, [r7, #4]
 800193a:	e7b6      	b.n	80018aa <_malloc_r+0x4a>
 800193c:	461a      	mov	r2, r3
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	42a3      	cmp	r3, r4
 8001942:	d1fb      	bne.n	800193c <_malloc_r+0xdc>
 8001944:	2300      	movs	r3, #0
 8001946:	6053      	str	r3, [r2, #4]
 8001948:	e7de      	b.n	8001908 <_malloc_r+0xa8>
 800194a:	230c      	movs	r3, #12
 800194c:	6033      	str	r3, [r6, #0]
 800194e:	4630      	mov	r0, r6
 8001950:	f000 f80c 	bl	800196c <__malloc_unlock>
 8001954:	e794      	b.n	8001880 <_malloc_r+0x20>
 8001956:	6005      	str	r5, [r0, #0]
 8001958:	e7d6      	b.n	8001908 <_malloc_r+0xa8>
 800195a:	bf00      	nop
 800195c:	20000210 	.word	0x20000210

08001960 <__malloc_lock>:
 8001960:	4801      	ldr	r0, [pc, #4]	@ (8001968 <__malloc_lock+0x8>)
 8001962:	f7ff bf0e 	b.w	8001782 <__retarget_lock_acquire_recursive>
 8001966:	bf00      	nop
 8001968:	20000208 	.word	0x20000208

0800196c <__malloc_unlock>:
 800196c:	4801      	ldr	r0, [pc, #4]	@ (8001974 <__malloc_unlock+0x8>)
 800196e:	f7ff bf09 	b.w	8001784 <__retarget_lock_release_recursive>
 8001972:	bf00      	nop
 8001974:	20000208 	.word	0x20000208

08001978 <__sfputc_r>:
 8001978:	6893      	ldr	r3, [r2, #8]
 800197a:	3b01      	subs	r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	b410      	push	{r4}
 8001980:	6093      	str	r3, [r2, #8]
 8001982:	da07      	bge.n	8001994 <__sfputc_r+0x1c>
 8001984:	6994      	ldr	r4, [r2, #24]
 8001986:	42a3      	cmp	r3, r4
 8001988:	db01      	blt.n	800198e <__sfputc_r+0x16>
 800198a:	290a      	cmp	r1, #10
 800198c:	d102      	bne.n	8001994 <__sfputc_r+0x1c>
 800198e:	bc10      	pop	{r4}
 8001990:	f000 bb66 	b.w	8002060 <__swbuf_r>
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	1c58      	adds	r0, r3, #1
 8001998:	6010      	str	r0, [r2, #0]
 800199a:	7019      	strb	r1, [r3, #0]
 800199c:	4608      	mov	r0, r1
 800199e:	bc10      	pop	{r4}
 80019a0:	4770      	bx	lr

080019a2 <__sfputs_r>:
 80019a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a4:	4606      	mov	r6, r0
 80019a6:	460f      	mov	r7, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	18d5      	adds	r5, r2, r3
 80019ac:	42ac      	cmp	r4, r5
 80019ae:	d101      	bne.n	80019b4 <__sfputs_r+0x12>
 80019b0:	2000      	movs	r0, #0
 80019b2:	e007      	b.n	80019c4 <__sfputs_r+0x22>
 80019b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019b8:	463a      	mov	r2, r7
 80019ba:	4630      	mov	r0, r6
 80019bc:	f7ff ffdc 	bl	8001978 <__sfputc_r>
 80019c0:	1c43      	adds	r3, r0, #1
 80019c2:	d1f3      	bne.n	80019ac <__sfputs_r+0xa>
 80019c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080019c8 <_vfiprintf_r>:
 80019c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019cc:	460d      	mov	r5, r1
 80019ce:	b09d      	sub	sp, #116	@ 0x74
 80019d0:	4614      	mov	r4, r2
 80019d2:	4698      	mov	r8, r3
 80019d4:	4606      	mov	r6, r0
 80019d6:	b118      	cbz	r0, 80019e0 <_vfiprintf_r+0x18>
 80019d8:	6a03      	ldr	r3, [r0, #32]
 80019da:	b90b      	cbnz	r3, 80019e0 <_vfiprintf_r+0x18>
 80019dc:	f7ff fdcc 	bl	8001578 <__sinit>
 80019e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80019e2:	07d9      	lsls	r1, r3, #31
 80019e4:	d405      	bmi.n	80019f2 <_vfiprintf_r+0x2a>
 80019e6:	89ab      	ldrh	r3, [r5, #12]
 80019e8:	059a      	lsls	r2, r3, #22
 80019ea:	d402      	bmi.n	80019f2 <_vfiprintf_r+0x2a>
 80019ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80019ee:	f7ff fec8 	bl	8001782 <__retarget_lock_acquire_recursive>
 80019f2:	89ab      	ldrh	r3, [r5, #12]
 80019f4:	071b      	lsls	r3, r3, #28
 80019f6:	d501      	bpl.n	80019fc <_vfiprintf_r+0x34>
 80019f8:	692b      	ldr	r3, [r5, #16]
 80019fa:	b99b      	cbnz	r3, 8001a24 <_vfiprintf_r+0x5c>
 80019fc:	4629      	mov	r1, r5
 80019fe:	4630      	mov	r0, r6
 8001a00:	f000 fb6c 	bl	80020dc <__swsetup_r>
 8001a04:	b170      	cbz	r0, 8001a24 <_vfiprintf_r+0x5c>
 8001a06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a08:	07dc      	lsls	r4, r3, #31
 8001a0a:	d504      	bpl.n	8001a16 <_vfiprintf_r+0x4e>
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	b01d      	add	sp, #116	@ 0x74
 8001a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a16:	89ab      	ldrh	r3, [r5, #12]
 8001a18:	0598      	lsls	r0, r3, #22
 8001a1a:	d4f7      	bmi.n	8001a0c <_vfiprintf_r+0x44>
 8001a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a1e:	f7ff feb1 	bl	8001784 <__retarget_lock_release_recursive>
 8001a22:	e7f3      	b.n	8001a0c <_vfiprintf_r+0x44>
 8001a24:	2300      	movs	r3, #0
 8001a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a28:	2320      	movs	r3, #32
 8001a2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a32:	2330      	movs	r3, #48	@ 0x30
 8001a34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001be4 <_vfiprintf_r+0x21c>
 8001a38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001a3c:	f04f 0901 	mov.w	r9, #1
 8001a40:	4623      	mov	r3, r4
 8001a42:	469a      	mov	sl, r3
 8001a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a48:	b10a      	cbz	r2, 8001a4e <_vfiprintf_r+0x86>
 8001a4a:	2a25      	cmp	r2, #37	@ 0x25
 8001a4c:	d1f9      	bne.n	8001a42 <_vfiprintf_r+0x7a>
 8001a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8001a52:	d00b      	beq.n	8001a6c <_vfiprintf_r+0xa4>
 8001a54:	465b      	mov	r3, fp
 8001a56:	4622      	mov	r2, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f7ff ffa1 	bl	80019a2 <__sfputs_r>
 8001a60:	3001      	adds	r0, #1
 8001a62:	f000 80a7 	beq.w	8001bb4 <_vfiprintf_r+0x1ec>
 8001a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a68:	445a      	add	r2, fp
 8001a6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 809f 	beq.w	8001bb4 <_vfiprintf_r+0x1ec>
 8001a76:	2300      	movs	r3, #0
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a80:	f10a 0a01 	add.w	sl, sl, #1
 8001a84:	9304      	str	r3, [sp, #16]
 8001a86:	9307      	str	r3, [sp, #28]
 8001a88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a8e:	4654      	mov	r4, sl
 8001a90:	2205      	movs	r2, #5
 8001a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a96:	4853      	ldr	r0, [pc, #332]	@ (8001be4 <_vfiprintf_r+0x21c>)
 8001a98:	f7fe fbba 	bl	8000210 <memchr>
 8001a9c:	9a04      	ldr	r2, [sp, #16]
 8001a9e:	b9d8      	cbnz	r0, 8001ad8 <_vfiprintf_r+0x110>
 8001aa0:	06d1      	lsls	r1, r2, #27
 8001aa2:	bf44      	itt	mi
 8001aa4:	2320      	movmi	r3, #32
 8001aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001aaa:	0713      	lsls	r3, r2, #28
 8001aac:	bf44      	itt	mi
 8001aae:	232b      	movmi	r3, #43	@ 0x2b
 8001ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8001ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001aba:	d015      	beq.n	8001ae8 <_vfiprintf_r+0x120>
 8001abc:	9a07      	ldr	r2, [sp, #28]
 8001abe:	4654      	mov	r4, sl
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f04f 0c0a 	mov.w	ip, #10
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001acc:	3b30      	subs	r3, #48	@ 0x30
 8001ace:	2b09      	cmp	r3, #9
 8001ad0:	d94b      	bls.n	8001b6a <_vfiprintf_r+0x1a2>
 8001ad2:	b1b0      	cbz	r0, 8001b02 <_vfiprintf_r+0x13a>
 8001ad4:	9207      	str	r2, [sp, #28]
 8001ad6:	e014      	b.n	8001b02 <_vfiprintf_r+0x13a>
 8001ad8:	eba0 0308 	sub.w	r3, r0, r8
 8001adc:	fa09 f303 	lsl.w	r3, r9, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	9304      	str	r3, [sp, #16]
 8001ae4:	46a2      	mov	sl, r4
 8001ae6:	e7d2      	b.n	8001a8e <_vfiprintf_r+0xc6>
 8001ae8:	9b03      	ldr	r3, [sp, #12]
 8001aea:	1d19      	adds	r1, r3, #4
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	9103      	str	r1, [sp, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bfbb      	ittet	lt
 8001af4:	425b      	neglt	r3, r3
 8001af6:	f042 0202 	orrlt.w	r2, r2, #2
 8001afa:	9307      	strge	r3, [sp, #28]
 8001afc:	9307      	strlt	r3, [sp, #28]
 8001afe:	bfb8      	it	lt
 8001b00:	9204      	strlt	r2, [sp, #16]
 8001b02:	7823      	ldrb	r3, [r4, #0]
 8001b04:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b06:	d10a      	bne.n	8001b1e <_vfiprintf_r+0x156>
 8001b08:	7863      	ldrb	r3, [r4, #1]
 8001b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b0c:	d132      	bne.n	8001b74 <_vfiprintf_r+0x1ac>
 8001b0e:	9b03      	ldr	r3, [sp, #12]
 8001b10:	1d1a      	adds	r2, r3, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	9203      	str	r2, [sp, #12]
 8001b16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001b1a:	3402      	adds	r4, #2
 8001b1c:	9305      	str	r3, [sp, #20]
 8001b1e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001be8 <_vfiprintf_r+0x220>
 8001b22:	7821      	ldrb	r1, [r4, #0]
 8001b24:	2203      	movs	r2, #3
 8001b26:	4650      	mov	r0, sl
 8001b28:	f7fe fb72 	bl	8000210 <memchr>
 8001b2c:	b138      	cbz	r0, 8001b3e <_vfiprintf_r+0x176>
 8001b2e:	9b04      	ldr	r3, [sp, #16]
 8001b30:	eba0 000a 	sub.w	r0, r0, sl
 8001b34:	2240      	movs	r2, #64	@ 0x40
 8001b36:	4082      	lsls	r2, r0
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	3401      	adds	r4, #1
 8001b3c:	9304      	str	r3, [sp, #16]
 8001b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b42:	482a      	ldr	r0, [pc, #168]	@ (8001bec <_vfiprintf_r+0x224>)
 8001b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001b48:	2206      	movs	r2, #6
 8001b4a:	f7fe fb61 	bl	8000210 <memchr>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d03f      	beq.n	8001bd2 <_vfiprintf_r+0x20a>
 8001b52:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <_vfiprintf_r+0x228>)
 8001b54:	bb1b      	cbnz	r3, 8001b9e <_vfiprintf_r+0x1d6>
 8001b56:	9b03      	ldr	r3, [sp, #12]
 8001b58:	3307      	adds	r3, #7
 8001b5a:	f023 0307 	bic.w	r3, r3, #7
 8001b5e:	3308      	adds	r3, #8
 8001b60:	9303      	str	r3, [sp, #12]
 8001b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b64:	443b      	add	r3, r7
 8001b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b68:	e76a      	b.n	8001a40 <_vfiprintf_r+0x78>
 8001b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b6e:	460c      	mov	r4, r1
 8001b70:	2001      	movs	r0, #1
 8001b72:	e7a8      	b.n	8001ac6 <_vfiprintf_r+0xfe>
 8001b74:	2300      	movs	r3, #0
 8001b76:	3401      	adds	r4, #1
 8001b78:	9305      	str	r3, [sp, #20]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 0c0a 	mov.w	ip, #10
 8001b80:	4620      	mov	r0, r4
 8001b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b86:	3a30      	subs	r2, #48	@ 0x30
 8001b88:	2a09      	cmp	r2, #9
 8001b8a:	d903      	bls.n	8001b94 <_vfiprintf_r+0x1cc>
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0c6      	beq.n	8001b1e <_vfiprintf_r+0x156>
 8001b90:	9105      	str	r1, [sp, #20]
 8001b92:	e7c4      	b.n	8001b1e <_vfiprintf_r+0x156>
 8001b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b98:	4604      	mov	r4, r0
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e7f0      	b.n	8001b80 <_vfiprintf_r+0x1b8>
 8001b9e:	ab03      	add	r3, sp, #12
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	462a      	mov	r2, r5
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <_vfiprintf_r+0x22c>)
 8001ba6:	a904      	add	r1, sp, #16
 8001ba8:	4630      	mov	r0, r6
 8001baa:	f3af 8000 	nop.w
 8001bae:	4607      	mov	r7, r0
 8001bb0:	1c78      	adds	r0, r7, #1
 8001bb2:	d1d6      	bne.n	8001b62 <_vfiprintf_r+0x19a>
 8001bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001bb6:	07d9      	lsls	r1, r3, #31
 8001bb8:	d405      	bmi.n	8001bc6 <_vfiprintf_r+0x1fe>
 8001bba:	89ab      	ldrh	r3, [r5, #12]
 8001bbc:	059a      	lsls	r2, r3, #22
 8001bbe:	d402      	bmi.n	8001bc6 <_vfiprintf_r+0x1fe>
 8001bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001bc2:	f7ff fddf 	bl	8001784 <__retarget_lock_release_recursive>
 8001bc6:	89ab      	ldrh	r3, [r5, #12]
 8001bc8:	065b      	lsls	r3, r3, #25
 8001bca:	f53f af1f 	bmi.w	8001a0c <_vfiprintf_r+0x44>
 8001bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001bd0:	e71e      	b.n	8001a10 <_vfiprintf_r+0x48>
 8001bd2:	ab03      	add	r3, sp, #12
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	462a      	mov	r2, r5
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <_vfiprintf_r+0x22c>)
 8001bda:	a904      	add	r1, sp, #16
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f000 f879 	bl	8001cd4 <_printf_i>
 8001be2:	e7e4      	b.n	8001bae <_vfiprintf_r+0x1e6>
 8001be4:	08002361 	.word	0x08002361
 8001be8:	08002367 	.word	0x08002367
 8001bec:	0800236b 	.word	0x0800236b
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	080019a3 	.word	0x080019a3

08001bf8 <_printf_common>:
 8001bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bfc:	4616      	mov	r6, r2
 8001bfe:	4698      	mov	r8, r3
 8001c00:	688a      	ldr	r2, [r1, #8]
 8001c02:	690b      	ldr	r3, [r1, #16]
 8001c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	bfb8      	it	lt
 8001c0c:	4613      	movlt	r3, r2
 8001c0e:	6033      	str	r3, [r6, #0]
 8001c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001c14:	4607      	mov	r7, r0
 8001c16:	460c      	mov	r4, r1
 8001c18:	b10a      	cbz	r2, 8001c1e <_printf_common+0x26>
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	6033      	str	r3, [r6, #0]
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	0699      	lsls	r1, r3, #26
 8001c22:	bf42      	ittt	mi
 8001c24:	6833      	ldrmi	r3, [r6, #0]
 8001c26:	3302      	addmi	r3, #2
 8001c28:	6033      	strmi	r3, [r6, #0]
 8001c2a:	6825      	ldr	r5, [r4, #0]
 8001c2c:	f015 0506 	ands.w	r5, r5, #6
 8001c30:	d106      	bne.n	8001c40 <_printf_common+0x48>
 8001c32:	f104 0a19 	add.w	sl, r4, #25
 8001c36:	68e3      	ldr	r3, [r4, #12]
 8001c38:	6832      	ldr	r2, [r6, #0]
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	42ab      	cmp	r3, r5
 8001c3e:	dc26      	bgt.n	8001c8e <_printf_common+0x96>
 8001c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c44:	6822      	ldr	r2, [r4, #0]
 8001c46:	3b00      	subs	r3, #0
 8001c48:	bf18      	it	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	0692      	lsls	r2, r2, #26
 8001c4e:	d42b      	bmi.n	8001ca8 <_printf_common+0xb0>
 8001c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001c54:	4641      	mov	r1, r8
 8001c56:	4638      	mov	r0, r7
 8001c58:	47c8      	blx	r9
 8001c5a:	3001      	adds	r0, #1
 8001c5c:	d01e      	beq.n	8001c9c <_printf_common+0xa4>
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	6922      	ldr	r2, [r4, #16]
 8001c62:	f003 0306 	and.w	r3, r3, #6
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf02      	ittt	eq
 8001c6a:	68e5      	ldreq	r5, [r4, #12]
 8001c6c:	6833      	ldreq	r3, [r6, #0]
 8001c6e:	1aed      	subeq	r5, r5, r3
 8001c70:	68a3      	ldr	r3, [r4, #8]
 8001c72:	bf0c      	ite	eq
 8001c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c78:	2500      	movne	r5, #0
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	bfc4      	itt	gt
 8001c7e:	1a9b      	subgt	r3, r3, r2
 8001c80:	18ed      	addgt	r5, r5, r3
 8001c82:	2600      	movs	r6, #0
 8001c84:	341a      	adds	r4, #26
 8001c86:	42b5      	cmp	r5, r6
 8001c88:	d11a      	bne.n	8001cc0 <_printf_common+0xc8>
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	e008      	b.n	8001ca0 <_printf_common+0xa8>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	4652      	mov	r2, sl
 8001c92:	4641      	mov	r1, r8
 8001c94:	4638      	mov	r0, r7
 8001c96:	47c8      	blx	r9
 8001c98:	3001      	adds	r0, #1
 8001c9a:	d103      	bne.n	8001ca4 <_printf_common+0xac>
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ca4:	3501      	adds	r5, #1
 8001ca6:	e7c6      	b.n	8001c36 <_printf_common+0x3e>
 8001ca8:	18e1      	adds	r1, r4, r3
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	2030      	movs	r0, #48	@ 0x30
 8001cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001cb2:	4422      	add	r2, r4
 8001cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	e7c7      	b.n	8001c50 <_printf_common+0x58>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	4641      	mov	r1, r8
 8001cc6:	4638      	mov	r0, r7
 8001cc8:	47c8      	blx	r9
 8001cca:	3001      	adds	r0, #1
 8001ccc:	d0e6      	beq.n	8001c9c <_printf_common+0xa4>
 8001cce:	3601      	adds	r6, #1
 8001cd0:	e7d9      	b.n	8001c86 <_printf_common+0x8e>
	...

08001cd4 <_printf_i>:
 8001cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd8:	7e0f      	ldrb	r7, [r1, #24]
 8001cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001cdc:	2f78      	cmp	r7, #120	@ 0x78
 8001cde:	4691      	mov	r9, r2
 8001ce0:	4680      	mov	r8, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	469a      	mov	sl, r3
 8001ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001cea:	d807      	bhi.n	8001cfc <_printf_i+0x28>
 8001cec:	2f62      	cmp	r7, #98	@ 0x62
 8001cee:	d80a      	bhi.n	8001d06 <_printf_i+0x32>
 8001cf0:	2f00      	cmp	r7, #0
 8001cf2:	f000 80d1 	beq.w	8001e98 <_printf_i+0x1c4>
 8001cf6:	2f58      	cmp	r7, #88	@ 0x58
 8001cf8:	f000 80b8 	beq.w	8001e6c <_printf_i+0x198>
 8001cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001d04:	e03a      	b.n	8001d7c <_printf_i+0xa8>
 8001d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001d0a:	2b15      	cmp	r3, #21
 8001d0c:	d8f6      	bhi.n	8001cfc <_printf_i+0x28>
 8001d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8001d14 <_printf_i+0x40>)
 8001d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d14:	08001d6d 	.word	0x08001d6d
 8001d18:	08001d81 	.word	0x08001d81
 8001d1c:	08001cfd 	.word	0x08001cfd
 8001d20:	08001cfd 	.word	0x08001cfd
 8001d24:	08001cfd 	.word	0x08001cfd
 8001d28:	08001cfd 	.word	0x08001cfd
 8001d2c:	08001d81 	.word	0x08001d81
 8001d30:	08001cfd 	.word	0x08001cfd
 8001d34:	08001cfd 	.word	0x08001cfd
 8001d38:	08001cfd 	.word	0x08001cfd
 8001d3c:	08001cfd 	.word	0x08001cfd
 8001d40:	08001e7f 	.word	0x08001e7f
 8001d44:	08001dab 	.word	0x08001dab
 8001d48:	08001e39 	.word	0x08001e39
 8001d4c:	08001cfd 	.word	0x08001cfd
 8001d50:	08001cfd 	.word	0x08001cfd
 8001d54:	08001ea1 	.word	0x08001ea1
 8001d58:	08001cfd 	.word	0x08001cfd
 8001d5c:	08001dab 	.word	0x08001dab
 8001d60:	08001cfd 	.word	0x08001cfd
 8001d64:	08001cfd 	.word	0x08001cfd
 8001d68:	08001e41 	.word	0x08001e41
 8001d6c:	6833      	ldr	r3, [r6, #0]
 8001d6e:	1d1a      	adds	r2, r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6032      	str	r2, [r6, #0]
 8001d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e09c      	b.n	8001eba <_printf_i+0x1e6>
 8001d80:	6833      	ldr	r3, [r6, #0]
 8001d82:	6820      	ldr	r0, [r4, #0]
 8001d84:	1d19      	adds	r1, r3, #4
 8001d86:	6031      	str	r1, [r6, #0]
 8001d88:	0606      	lsls	r6, r0, #24
 8001d8a:	d501      	bpl.n	8001d90 <_printf_i+0xbc>
 8001d8c:	681d      	ldr	r5, [r3, #0]
 8001d8e:	e003      	b.n	8001d98 <_printf_i+0xc4>
 8001d90:	0645      	lsls	r5, r0, #25
 8001d92:	d5fb      	bpl.n	8001d8c <_printf_i+0xb8>
 8001d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d98:	2d00      	cmp	r5, #0
 8001d9a:	da03      	bge.n	8001da4 <_printf_i+0xd0>
 8001d9c:	232d      	movs	r3, #45	@ 0x2d
 8001d9e:	426d      	negs	r5, r5
 8001da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001da4:	4858      	ldr	r0, [pc, #352]	@ (8001f08 <_printf_i+0x234>)
 8001da6:	230a      	movs	r3, #10
 8001da8:	e011      	b.n	8001dce <_printf_i+0xfa>
 8001daa:	6821      	ldr	r1, [r4, #0]
 8001dac:	6833      	ldr	r3, [r6, #0]
 8001dae:	0608      	lsls	r0, r1, #24
 8001db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8001db4:	d402      	bmi.n	8001dbc <_printf_i+0xe8>
 8001db6:	0649      	lsls	r1, r1, #25
 8001db8:	bf48      	it	mi
 8001dba:	b2ad      	uxthmi	r5, r5
 8001dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8001dbe:	4852      	ldr	r0, [pc, #328]	@ (8001f08 <_printf_i+0x234>)
 8001dc0:	6033      	str	r3, [r6, #0]
 8001dc2:	bf14      	ite	ne
 8001dc4:	230a      	movne	r3, #10
 8001dc6:	2308      	moveq	r3, #8
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001dce:	6866      	ldr	r6, [r4, #4]
 8001dd0:	60a6      	str	r6, [r4, #8]
 8001dd2:	2e00      	cmp	r6, #0
 8001dd4:	db05      	blt.n	8001de2 <_printf_i+0x10e>
 8001dd6:	6821      	ldr	r1, [r4, #0]
 8001dd8:	432e      	orrs	r6, r5
 8001dda:	f021 0104 	bic.w	r1, r1, #4
 8001dde:	6021      	str	r1, [r4, #0]
 8001de0:	d04b      	beq.n	8001e7a <_printf_i+0x1a6>
 8001de2:	4616      	mov	r6, r2
 8001de4:	fbb5 f1f3 	udiv	r1, r5, r3
 8001de8:	fb03 5711 	mls	r7, r3, r1, r5
 8001dec:	5dc7      	ldrb	r7, [r0, r7]
 8001dee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001df2:	462f      	mov	r7, r5
 8001df4:	42bb      	cmp	r3, r7
 8001df6:	460d      	mov	r5, r1
 8001df8:	d9f4      	bls.n	8001de4 <_printf_i+0x110>
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d10b      	bne.n	8001e16 <_printf_i+0x142>
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	07df      	lsls	r7, r3, #31
 8001e02:	d508      	bpl.n	8001e16 <_printf_i+0x142>
 8001e04:	6923      	ldr	r3, [r4, #16]
 8001e06:	6861      	ldr	r1, [r4, #4]
 8001e08:	4299      	cmp	r1, r3
 8001e0a:	bfde      	ittt	le
 8001e0c:	2330      	movle	r3, #48	@ 0x30
 8001e0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e16:	1b92      	subs	r2, r2, r6
 8001e18:	6122      	str	r2, [r4, #16]
 8001e1a:	f8cd a000 	str.w	sl, [sp]
 8001e1e:	464b      	mov	r3, r9
 8001e20:	aa03      	add	r2, sp, #12
 8001e22:	4621      	mov	r1, r4
 8001e24:	4640      	mov	r0, r8
 8001e26:	f7ff fee7 	bl	8001bf8 <_printf_common>
 8001e2a:	3001      	adds	r0, #1
 8001e2c:	d14a      	bne.n	8001ec4 <_printf_i+0x1f0>
 8001e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e32:	b004      	add	sp, #16
 8001e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	f043 0320 	orr.w	r3, r3, #32
 8001e3e:	6023      	str	r3, [r4, #0]
 8001e40:	4832      	ldr	r0, [pc, #200]	@ (8001f0c <_printf_i+0x238>)
 8001e42:	2778      	movs	r7, #120	@ 0x78
 8001e44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	6831      	ldr	r1, [r6, #0]
 8001e4c:	061f      	lsls	r7, r3, #24
 8001e4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8001e52:	d402      	bmi.n	8001e5a <_printf_i+0x186>
 8001e54:	065f      	lsls	r7, r3, #25
 8001e56:	bf48      	it	mi
 8001e58:	b2ad      	uxthmi	r5, r5
 8001e5a:	6031      	str	r1, [r6, #0]
 8001e5c:	07d9      	lsls	r1, r3, #31
 8001e5e:	bf44      	itt	mi
 8001e60:	f043 0320 	orrmi.w	r3, r3, #32
 8001e64:	6023      	strmi	r3, [r4, #0]
 8001e66:	b11d      	cbz	r5, 8001e70 <_printf_i+0x19c>
 8001e68:	2310      	movs	r3, #16
 8001e6a:	e7ad      	b.n	8001dc8 <_printf_i+0xf4>
 8001e6c:	4826      	ldr	r0, [pc, #152]	@ (8001f08 <_printf_i+0x234>)
 8001e6e:	e7e9      	b.n	8001e44 <_printf_i+0x170>
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	f023 0320 	bic.w	r3, r3, #32
 8001e76:	6023      	str	r3, [r4, #0]
 8001e78:	e7f6      	b.n	8001e68 <_printf_i+0x194>
 8001e7a:	4616      	mov	r6, r2
 8001e7c:	e7bd      	b.n	8001dfa <_printf_i+0x126>
 8001e7e:	6833      	ldr	r3, [r6, #0]
 8001e80:	6825      	ldr	r5, [r4, #0]
 8001e82:	6961      	ldr	r1, [r4, #20]
 8001e84:	1d18      	adds	r0, r3, #4
 8001e86:	6030      	str	r0, [r6, #0]
 8001e88:	062e      	lsls	r6, r5, #24
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	d501      	bpl.n	8001e92 <_printf_i+0x1be>
 8001e8e:	6019      	str	r1, [r3, #0]
 8001e90:	e002      	b.n	8001e98 <_printf_i+0x1c4>
 8001e92:	0668      	lsls	r0, r5, #25
 8001e94:	d5fb      	bpl.n	8001e8e <_printf_i+0x1ba>
 8001e96:	8019      	strh	r1, [r3, #0]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6123      	str	r3, [r4, #16]
 8001e9c:	4616      	mov	r6, r2
 8001e9e:	e7bc      	b.n	8001e1a <_printf_i+0x146>
 8001ea0:	6833      	ldr	r3, [r6, #0]
 8001ea2:	1d1a      	adds	r2, r3, #4
 8001ea4:	6032      	str	r2, [r6, #0]
 8001ea6:	681e      	ldr	r6, [r3, #0]
 8001ea8:	6862      	ldr	r2, [r4, #4]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4630      	mov	r0, r6
 8001eae:	f7fe f9af 	bl	8000210 <memchr>
 8001eb2:	b108      	cbz	r0, 8001eb8 <_printf_i+0x1e4>
 8001eb4:	1b80      	subs	r0, r0, r6
 8001eb6:	6060      	str	r0, [r4, #4]
 8001eb8:	6863      	ldr	r3, [r4, #4]
 8001eba:	6123      	str	r3, [r4, #16]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ec2:	e7aa      	b.n	8001e1a <_printf_i+0x146>
 8001ec4:	6923      	ldr	r3, [r4, #16]
 8001ec6:	4632      	mov	r2, r6
 8001ec8:	4649      	mov	r1, r9
 8001eca:	4640      	mov	r0, r8
 8001ecc:	47d0      	blx	sl
 8001ece:	3001      	adds	r0, #1
 8001ed0:	d0ad      	beq.n	8001e2e <_printf_i+0x15a>
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	079b      	lsls	r3, r3, #30
 8001ed6:	d413      	bmi.n	8001f00 <_printf_i+0x22c>
 8001ed8:	68e0      	ldr	r0, [r4, #12]
 8001eda:	9b03      	ldr	r3, [sp, #12]
 8001edc:	4298      	cmp	r0, r3
 8001ede:	bfb8      	it	lt
 8001ee0:	4618      	movlt	r0, r3
 8001ee2:	e7a6      	b.n	8001e32 <_printf_i+0x15e>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	4632      	mov	r2, r6
 8001ee8:	4649      	mov	r1, r9
 8001eea:	4640      	mov	r0, r8
 8001eec:	47d0      	blx	sl
 8001eee:	3001      	adds	r0, #1
 8001ef0:	d09d      	beq.n	8001e2e <_printf_i+0x15a>
 8001ef2:	3501      	adds	r5, #1
 8001ef4:	68e3      	ldr	r3, [r4, #12]
 8001ef6:	9903      	ldr	r1, [sp, #12]
 8001ef8:	1a5b      	subs	r3, r3, r1
 8001efa:	42ab      	cmp	r3, r5
 8001efc:	dcf2      	bgt.n	8001ee4 <_printf_i+0x210>
 8001efe:	e7eb      	b.n	8001ed8 <_printf_i+0x204>
 8001f00:	2500      	movs	r5, #0
 8001f02:	f104 0619 	add.w	r6, r4, #25
 8001f06:	e7f5      	b.n	8001ef4 <_printf_i+0x220>
 8001f08:	08002372 	.word	0x08002372
 8001f0c:	08002383 	.word	0x08002383

08001f10 <__sflush_r>:
 8001f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f16:	0716      	lsls	r6, r2, #28
 8001f18:	4605      	mov	r5, r0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	d454      	bmi.n	8001fc8 <__sflush_r+0xb8>
 8001f1e:	684b      	ldr	r3, [r1, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	dc02      	bgt.n	8001f2a <__sflush_r+0x1a>
 8001f24:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	dd48      	ble.n	8001fbc <__sflush_r+0xac>
 8001f2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001f2c:	2e00      	cmp	r6, #0
 8001f2e:	d045      	beq.n	8001fbc <__sflush_r+0xac>
 8001f30:	2300      	movs	r3, #0
 8001f32:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001f36:	682f      	ldr	r7, [r5, #0]
 8001f38:	6a21      	ldr	r1, [r4, #32]
 8001f3a:	602b      	str	r3, [r5, #0]
 8001f3c:	d030      	beq.n	8001fa0 <__sflush_r+0x90>
 8001f3e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f40:	89a3      	ldrh	r3, [r4, #12]
 8001f42:	0759      	lsls	r1, r3, #29
 8001f44:	d505      	bpl.n	8001f52 <__sflush_r+0x42>
 8001f46:	6863      	ldr	r3, [r4, #4]
 8001f48:	1ad2      	subs	r2, r2, r3
 8001f4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001f4c:	b10b      	cbz	r3, 8001f52 <__sflush_r+0x42>
 8001f4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f50:	1ad2      	subs	r2, r2, r3
 8001f52:	2300      	movs	r3, #0
 8001f54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001f56:	6a21      	ldr	r1, [r4, #32]
 8001f58:	4628      	mov	r0, r5
 8001f5a:	47b0      	blx	r6
 8001f5c:	1c43      	adds	r3, r0, #1
 8001f5e:	89a3      	ldrh	r3, [r4, #12]
 8001f60:	d106      	bne.n	8001f70 <__sflush_r+0x60>
 8001f62:	6829      	ldr	r1, [r5, #0]
 8001f64:	291d      	cmp	r1, #29
 8001f66:	d82b      	bhi.n	8001fc0 <__sflush_r+0xb0>
 8001f68:	4a28      	ldr	r2, [pc, #160]	@ (800200c <__sflush_r+0xfc>)
 8001f6a:	40ca      	lsrs	r2, r1
 8001f6c:	07d6      	lsls	r6, r2, #31
 8001f6e:	d527      	bpl.n	8001fc0 <__sflush_r+0xb0>
 8001f70:	2200      	movs	r2, #0
 8001f72:	6062      	str	r2, [r4, #4]
 8001f74:	04d9      	lsls	r1, r3, #19
 8001f76:	6922      	ldr	r2, [r4, #16]
 8001f78:	6022      	str	r2, [r4, #0]
 8001f7a:	d504      	bpl.n	8001f86 <__sflush_r+0x76>
 8001f7c:	1c42      	adds	r2, r0, #1
 8001f7e:	d101      	bne.n	8001f84 <__sflush_r+0x74>
 8001f80:	682b      	ldr	r3, [r5, #0]
 8001f82:	b903      	cbnz	r3, 8001f86 <__sflush_r+0x76>
 8001f84:	6560      	str	r0, [r4, #84]	@ 0x54
 8001f86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f88:	602f      	str	r7, [r5, #0]
 8001f8a:	b1b9      	cbz	r1, 8001fbc <__sflush_r+0xac>
 8001f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f90:	4299      	cmp	r1, r3
 8001f92:	d002      	beq.n	8001f9a <__sflush_r+0x8a>
 8001f94:	4628      	mov	r0, r5
 8001f96:	f7ff fbf7 	bl	8001788 <_free_r>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f9e:	e00d      	b.n	8001fbc <__sflush_r+0xac>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	47b0      	blx	r6
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	1c50      	adds	r0, r2, #1
 8001faa:	d1c9      	bne.n	8001f40 <__sflush_r+0x30>
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0c6      	beq.n	8001f40 <__sflush_r+0x30>
 8001fb2:	2b1d      	cmp	r3, #29
 8001fb4:	d001      	beq.n	8001fba <__sflush_r+0xaa>
 8001fb6:	2b16      	cmp	r3, #22
 8001fb8:	d11d      	bne.n	8001ff6 <__sflush_r+0xe6>
 8001fba:	602f      	str	r7, [r5, #0]
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	e021      	b.n	8002004 <__sflush_r+0xf4>
 8001fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	e01a      	b.n	8001ffe <__sflush_r+0xee>
 8001fc8:	690f      	ldr	r7, [r1, #16]
 8001fca:	2f00      	cmp	r7, #0
 8001fcc:	d0f6      	beq.n	8001fbc <__sflush_r+0xac>
 8001fce:	0793      	lsls	r3, r2, #30
 8001fd0:	680e      	ldr	r6, [r1, #0]
 8001fd2:	bf08      	it	eq
 8001fd4:	694b      	ldreq	r3, [r1, #20]
 8001fd6:	600f      	str	r7, [r1, #0]
 8001fd8:	bf18      	it	ne
 8001fda:	2300      	movne	r3, #0
 8001fdc:	1bf6      	subs	r6, r6, r7
 8001fde:	608b      	str	r3, [r1, #8]
 8001fe0:	2e00      	cmp	r6, #0
 8001fe2:	ddeb      	ble.n	8001fbc <__sflush_r+0xac>
 8001fe4:	6a21      	ldr	r1, [r4, #32]
 8001fe6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001fea:	4633      	mov	r3, r6
 8001fec:	463a      	mov	r2, r7
 8001fee:	4628      	mov	r0, r5
 8001ff0:	47e0      	blx	ip
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	dc07      	bgt.n	8002006 <__sflush_r+0xf6>
 8001ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ffe:	81a3      	strh	r3, [r4, #12]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002006:	4407      	add	r7, r0
 8002008:	1a36      	subs	r6, r6, r0
 800200a:	e7e9      	b.n	8001fe0 <__sflush_r+0xd0>
 800200c:	20400001 	.word	0x20400001

08002010 <_fflush_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	690b      	ldr	r3, [r1, #16]
 8002014:	4605      	mov	r5, r0
 8002016:	460c      	mov	r4, r1
 8002018:	b913      	cbnz	r3, 8002020 <_fflush_r+0x10>
 800201a:	2500      	movs	r5, #0
 800201c:	4628      	mov	r0, r5
 800201e:	bd38      	pop	{r3, r4, r5, pc}
 8002020:	b118      	cbz	r0, 800202a <_fflush_r+0x1a>
 8002022:	6a03      	ldr	r3, [r0, #32]
 8002024:	b90b      	cbnz	r3, 800202a <_fflush_r+0x1a>
 8002026:	f7ff faa7 	bl	8001578 <__sinit>
 800202a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f3      	beq.n	800201a <_fflush_r+0xa>
 8002032:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002034:	07d0      	lsls	r0, r2, #31
 8002036:	d404      	bmi.n	8002042 <_fflush_r+0x32>
 8002038:	0599      	lsls	r1, r3, #22
 800203a:	d402      	bmi.n	8002042 <_fflush_r+0x32>
 800203c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800203e:	f7ff fba0 	bl	8001782 <__retarget_lock_acquire_recursive>
 8002042:	4628      	mov	r0, r5
 8002044:	4621      	mov	r1, r4
 8002046:	f7ff ff63 	bl	8001f10 <__sflush_r>
 800204a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800204c:	07da      	lsls	r2, r3, #31
 800204e:	4605      	mov	r5, r0
 8002050:	d4e4      	bmi.n	800201c <_fflush_r+0xc>
 8002052:	89a3      	ldrh	r3, [r4, #12]
 8002054:	059b      	lsls	r3, r3, #22
 8002056:	d4e1      	bmi.n	800201c <_fflush_r+0xc>
 8002058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800205a:	f7ff fb93 	bl	8001784 <__retarget_lock_release_recursive>
 800205e:	e7dd      	b.n	800201c <_fflush_r+0xc>

08002060 <__swbuf_r>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	460e      	mov	r6, r1
 8002064:	4614      	mov	r4, r2
 8002066:	4605      	mov	r5, r0
 8002068:	b118      	cbz	r0, 8002072 <__swbuf_r+0x12>
 800206a:	6a03      	ldr	r3, [r0, #32]
 800206c:	b90b      	cbnz	r3, 8002072 <__swbuf_r+0x12>
 800206e:	f7ff fa83 	bl	8001578 <__sinit>
 8002072:	69a3      	ldr	r3, [r4, #24]
 8002074:	60a3      	str	r3, [r4, #8]
 8002076:	89a3      	ldrh	r3, [r4, #12]
 8002078:	071a      	lsls	r2, r3, #28
 800207a:	d501      	bpl.n	8002080 <__swbuf_r+0x20>
 800207c:	6923      	ldr	r3, [r4, #16]
 800207e:	b943      	cbnz	r3, 8002092 <__swbuf_r+0x32>
 8002080:	4621      	mov	r1, r4
 8002082:	4628      	mov	r0, r5
 8002084:	f000 f82a 	bl	80020dc <__swsetup_r>
 8002088:	b118      	cbz	r0, 8002092 <__swbuf_r+0x32>
 800208a:	f04f 37ff 	mov.w	r7, #4294967295
 800208e:	4638      	mov	r0, r7
 8002090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	6922      	ldr	r2, [r4, #16]
 8002096:	1a98      	subs	r0, r3, r2
 8002098:	6963      	ldr	r3, [r4, #20]
 800209a:	b2f6      	uxtb	r6, r6
 800209c:	4283      	cmp	r3, r0
 800209e:	4637      	mov	r7, r6
 80020a0:	dc05      	bgt.n	80020ae <__swbuf_r+0x4e>
 80020a2:	4621      	mov	r1, r4
 80020a4:	4628      	mov	r0, r5
 80020a6:	f7ff ffb3 	bl	8002010 <_fflush_r>
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d1ed      	bne.n	800208a <__swbuf_r+0x2a>
 80020ae:	68a3      	ldr	r3, [r4, #8]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60a3      	str	r3, [r4, #8]
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	6022      	str	r2, [r4, #0]
 80020ba:	701e      	strb	r6, [r3, #0]
 80020bc:	6962      	ldr	r2, [r4, #20]
 80020be:	1c43      	adds	r3, r0, #1
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d004      	beq.n	80020ce <__swbuf_r+0x6e>
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	07db      	lsls	r3, r3, #31
 80020c8:	d5e1      	bpl.n	800208e <__swbuf_r+0x2e>
 80020ca:	2e0a      	cmp	r6, #10
 80020cc:	d1df      	bne.n	800208e <__swbuf_r+0x2e>
 80020ce:	4621      	mov	r1, r4
 80020d0:	4628      	mov	r0, r5
 80020d2:	f7ff ff9d 	bl	8002010 <_fflush_r>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d0d9      	beq.n	800208e <__swbuf_r+0x2e>
 80020da:	e7d6      	b.n	800208a <__swbuf_r+0x2a>

080020dc <__swsetup_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4b29      	ldr	r3, [pc, #164]	@ (8002184 <__swsetup_r+0xa8>)
 80020e0:	4605      	mov	r5, r0
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	460c      	mov	r4, r1
 80020e6:	b118      	cbz	r0, 80020f0 <__swsetup_r+0x14>
 80020e8:	6a03      	ldr	r3, [r0, #32]
 80020ea:	b90b      	cbnz	r3, 80020f0 <__swsetup_r+0x14>
 80020ec:	f7ff fa44 	bl	8001578 <__sinit>
 80020f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020f4:	0719      	lsls	r1, r3, #28
 80020f6:	d422      	bmi.n	800213e <__swsetup_r+0x62>
 80020f8:	06da      	lsls	r2, r3, #27
 80020fa:	d407      	bmi.n	800210c <__swsetup_r+0x30>
 80020fc:	2209      	movs	r2, #9
 80020fe:	602a      	str	r2, [r5, #0]
 8002100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002104:	81a3      	strh	r3, [r4, #12]
 8002106:	f04f 30ff 	mov.w	r0, #4294967295
 800210a:	e033      	b.n	8002174 <__swsetup_r+0x98>
 800210c:	0758      	lsls	r0, r3, #29
 800210e:	d512      	bpl.n	8002136 <__swsetup_r+0x5a>
 8002110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002112:	b141      	cbz	r1, 8002126 <__swsetup_r+0x4a>
 8002114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002118:	4299      	cmp	r1, r3
 800211a:	d002      	beq.n	8002122 <__swsetup_r+0x46>
 800211c:	4628      	mov	r0, r5
 800211e:	f7ff fb33 	bl	8001788 <_free_r>
 8002122:	2300      	movs	r3, #0
 8002124:	6363      	str	r3, [r4, #52]	@ 0x34
 8002126:	89a3      	ldrh	r3, [r4, #12]
 8002128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800212c:	81a3      	strh	r3, [r4, #12]
 800212e:	2300      	movs	r3, #0
 8002130:	6063      	str	r3, [r4, #4]
 8002132:	6923      	ldr	r3, [r4, #16]
 8002134:	6023      	str	r3, [r4, #0]
 8002136:	89a3      	ldrh	r3, [r4, #12]
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	81a3      	strh	r3, [r4, #12]
 800213e:	6923      	ldr	r3, [r4, #16]
 8002140:	b94b      	cbnz	r3, 8002156 <__swsetup_r+0x7a>
 8002142:	89a3      	ldrh	r3, [r4, #12]
 8002144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800214c:	d003      	beq.n	8002156 <__swsetup_r+0x7a>
 800214e:	4621      	mov	r1, r4
 8002150:	4628      	mov	r0, r5
 8002152:	f000 f84f 	bl	80021f4 <__smakebuf_r>
 8002156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800215a:	f013 0201 	ands.w	r2, r3, #1
 800215e:	d00a      	beq.n	8002176 <__swsetup_r+0x9a>
 8002160:	2200      	movs	r2, #0
 8002162:	60a2      	str	r2, [r4, #8]
 8002164:	6962      	ldr	r2, [r4, #20]
 8002166:	4252      	negs	r2, r2
 8002168:	61a2      	str	r2, [r4, #24]
 800216a:	6922      	ldr	r2, [r4, #16]
 800216c:	b942      	cbnz	r2, 8002180 <__swsetup_r+0xa4>
 800216e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002172:	d1c5      	bne.n	8002100 <__swsetup_r+0x24>
 8002174:	bd38      	pop	{r3, r4, r5, pc}
 8002176:	0799      	lsls	r1, r3, #30
 8002178:	bf58      	it	pl
 800217a:	6962      	ldrpl	r2, [r4, #20]
 800217c:	60a2      	str	r2, [r4, #8]
 800217e:	e7f4      	b.n	800216a <__swsetup_r+0x8e>
 8002180:	2000      	movs	r0, #0
 8002182:	e7f7      	b.n	8002174 <__swsetup_r+0x98>
 8002184:	20000028 	.word	0x20000028

08002188 <_sbrk_r>:
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	4d06      	ldr	r5, [pc, #24]	@ (80021a4 <_sbrk_r+0x1c>)
 800218c:	2300      	movs	r3, #0
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	602b      	str	r3, [r5, #0]
 8002194:	f7fe f9e4 	bl	8000560 <_sbrk>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_sbrk_r+0x1a>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_sbrk_r+0x1a>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	20000204 	.word	0x20000204

080021a8 <__swhatbuf_r>:
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	460c      	mov	r4, r1
 80021ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021b0:	2900      	cmp	r1, #0
 80021b2:	b096      	sub	sp, #88	@ 0x58
 80021b4:	4615      	mov	r5, r2
 80021b6:	461e      	mov	r6, r3
 80021b8:	da0d      	bge.n	80021d6 <__swhatbuf_r+0x2e>
 80021ba:	89a3      	ldrh	r3, [r4, #12]
 80021bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2340      	movne	r3, #64	@ 0x40
 80021c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80021cc:	2000      	movs	r0, #0
 80021ce:	6031      	str	r1, [r6, #0]
 80021d0:	602b      	str	r3, [r5, #0]
 80021d2:	b016      	add	sp, #88	@ 0x58
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
 80021d6:	466a      	mov	r2, sp
 80021d8:	f000 f848 	bl	800226c <_fstat_r>
 80021dc:	2800      	cmp	r0, #0
 80021de:	dbec      	blt.n	80021ba <__swhatbuf_r+0x12>
 80021e0:	9901      	ldr	r1, [sp, #4]
 80021e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80021e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80021ea:	4259      	negs	r1, r3
 80021ec:	4159      	adcs	r1, r3
 80021ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021f2:	e7eb      	b.n	80021cc <__swhatbuf_r+0x24>

080021f4 <__smakebuf_r>:
 80021f4:	898b      	ldrh	r3, [r1, #12]
 80021f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021f8:	079d      	lsls	r5, r3, #30
 80021fa:	4606      	mov	r6, r0
 80021fc:	460c      	mov	r4, r1
 80021fe:	d507      	bpl.n	8002210 <__smakebuf_r+0x1c>
 8002200:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002204:	6023      	str	r3, [r4, #0]
 8002206:	6123      	str	r3, [r4, #16]
 8002208:	2301      	movs	r3, #1
 800220a:	6163      	str	r3, [r4, #20]
 800220c:	b003      	add	sp, #12
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002210:	ab01      	add	r3, sp, #4
 8002212:	466a      	mov	r2, sp
 8002214:	f7ff ffc8 	bl	80021a8 <__swhatbuf_r>
 8002218:	9f00      	ldr	r7, [sp, #0]
 800221a:	4605      	mov	r5, r0
 800221c:	4639      	mov	r1, r7
 800221e:	4630      	mov	r0, r6
 8002220:	f7ff fb1e 	bl	8001860 <_malloc_r>
 8002224:	b948      	cbnz	r0, 800223a <__smakebuf_r+0x46>
 8002226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800222a:	059a      	lsls	r2, r3, #22
 800222c:	d4ee      	bmi.n	800220c <__smakebuf_r+0x18>
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	81a3      	strh	r3, [r4, #12]
 8002238:	e7e2      	b.n	8002200 <__smakebuf_r+0xc>
 800223a:	89a3      	ldrh	r3, [r4, #12]
 800223c:	6020      	str	r0, [r4, #0]
 800223e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002242:	81a3      	strh	r3, [r4, #12]
 8002244:	9b01      	ldr	r3, [sp, #4]
 8002246:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800224a:	b15b      	cbz	r3, 8002264 <__smakebuf_r+0x70>
 800224c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002250:	4630      	mov	r0, r6
 8002252:	f000 f81d 	bl	8002290 <_isatty_r>
 8002256:	b128      	cbz	r0, 8002264 <__smakebuf_r+0x70>
 8002258:	89a3      	ldrh	r3, [r4, #12]
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	81a3      	strh	r3, [r4, #12]
 8002264:	89a3      	ldrh	r3, [r4, #12]
 8002266:	431d      	orrs	r5, r3
 8002268:	81a5      	strh	r5, [r4, #12]
 800226a:	e7cf      	b.n	800220c <__smakebuf_r+0x18>

0800226c <_fstat_r>:
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4d07      	ldr	r5, [pc, #28]	@ (800228c <_fstat_r+0x20>)
 8002270:	2300      	movs	r3, #0
 8002272:	4604      	mov	r4, r0
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	602b      	str	r3, [r5, #0]
 800227a:	f7fe f94b 	bl	8000514 <_fstat>
 800227e:	1c43      	adds	r3, r0, #1
 8002280:	d102      	bne.n	8002288 <_fstat_r+0x1c>
 8002282:	682b      	ldr	r3, [r5, #0]
 8002284:	b103      	cbz	r3, 8002288 <_fstat_r+0x1c>
 8002286:	6023      	str	r3, [r4, #0]
 8002288:	bd38      	pop	{r3, r4, r5, pc}
 800228a:	bf00      	nop
 800228c:	20000204 	.word	0x20000204

08002290 <_isatty_r>:
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	4d06      	ldr	r5, [pc, #24]	@ (80022ac <_isatty_r+0x1c>)
 8002294:	2300      	movs	r3, #0
 8002296:	4604      	mov	r4, r0
 8002298:	4608      	mov	r0, r1
 800229a:	602b      	str	r3, [r5, #0]
 800229c:	f7fe f949 	bl	8000532 <_isatty>
 80022a0:	1c43      	adds	r3, r0, #1
 80022a2:	d102      	bne.n	80022aa <_isatty_r+0x1a>
 80022a4:	682b      	ldr	r3, [r5, #0]
 80022a6:	b103      	cbz	r3, 80022aa <_isatty_r+0x1a>
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	bd38      	pop	{r3, r4, r5, pc}
 80022ac:	20000204 	.word	0x20000204

080022b0 <_init>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	bf00      	nop
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr

080022bc <_fini>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr
