
stm32f4_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080026ac  080026ac  000036ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800273c  0800273c  00004074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800273c  0800273c  0000373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002744  08002744  00004074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002744  08002744  00003744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800274c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000074  080027c0  00004074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080027c0  00004234  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000217e  00000000  00000000  0000409e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c1  00000000  00000000  0000621c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  000069e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000210  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00002349  00000000  00000000  00006eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000cb4  00000000  00000000  000091f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00009ead  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001254  00000000  00000000  00009ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  0000b144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002694 	.word	0x08002694

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08002694 	.word	0x08002694

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <delay>:
/* flag variable */
uint8_t rxComplt;



void delay (void){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
	/* ~200 msec when sys clock is 16 MHZ */
	for(uint32_t i = 0; i < 500000/2; i ++);
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e002      	b.n	80002c2 <delay+0x12>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <delay+0x28>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d9f8      	bls.n	80002bc <delay+0xc>
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	0003d08f 	.word	0x0003d08f

080002dc <I2C1_GPIOInits>:



 /* This Fn is used to Initialize the GPIO_PIns to behave as SPI2 */

void I2C1_GPIOInits(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1_Pins;

	I2C1_Pins.pGPIOx = GPIOB;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <I2C1_GPIOInits+0x40>)
 80002e4:	607b      	str	r3, [r7, #4]
	I2C1_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002e6:	2302      	movs	r3, #2
 80002e8:	727b      	strb	r3, [r7, #9]
	I2C1_Pins.GPIO_PinConfig.GPIO_AltrFnMode = 4;
 80002ea:	2304      	movs	r3, #4
 80002ec:	737b      	strb	r3, [r7, #13]
	I2C1_Pins.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_HIGH;
 80002ee:	2303      	movs	r3, #3
 80002f0:	72fb      	strb	r3, [r7, #11]
	I2C1_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002f2:	2301      	movs	r3, #1
 80002f4:	72bb      	strb	r3, [r7, #10]
	I2C1_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002f6:	2301      	movs	r3, #1
 80002f8:	733b      	strb	r3, [r7, #12]


	/* SCL */
	I2C1_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 80002fa:	2308      	movs	r3, #8
 80002fc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(& I2C1_Pins);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fadb 	bl	80008bc <GPIO_Init>

	/* SDA */
	I2C1_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000306:	2309      	movs	r3, #9
 8000308:	723b      	strb	r3, [r7, #8]
	GPIO_Init(& I2C1_Pins);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fad5 	bl	80008bc <GPIO_Init>



}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40020400 	.word	0x40020400

08000320 <I2C1_Inits>:


/*
 * SPI2 Initialization
 */
void I2C1_Inits(void){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <I2C1_Inits+0x2c>)
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <I2C1_Inits+0x30>)
 8000328:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <I2C1_Inits+0x2c>)
 800032c:	2201      	movs	r2, #1
 800032e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000330:	4b06      	ldr	r3, [pc, #24]	@ (800034c <I2C1_Inits+0x2c>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCLK_SPEED_SM;
 8000336:	4b05      	ldr	r3, [pc, #20]	@ (800034c <I2C1_Inits+0x2c>)
 8000338:	4a06      	ldr	r2, [pc, #24]	@ (8000354 <I2C1_Inits+0x34>)
 800033a:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800033c:	4b03      	ldr	r3, [pc, #12]	@ (800034c <I2C1_Inits+0x2c>)
 800033e:	2240      	movs	r2, #64	@ 0x40
 8000340:	721a      	strb	r2, [r3, #8]

	I2C_Init(&I2C1Handle);
 8000342:	4802      	ldr	r0, [pc, #8]	@ (800034c <I2C1_Inits+0x2c>)
 8000344:	f000 fd34 	bl	8000db0 <I2C_Init>

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000090 	.word	0x20000090
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <GPIO_Button_Inits>:


/*
 * GPIO-Button INit
 */
void GPIO_Button_Inits(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 800035e:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <GPIO_Button_Inits+0x2c>)
 8000360:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000362:	230d      	movs	r3, #13
 8000364:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000366:	2300      	movs	r3, #0
 8000368:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 800036a:	2302      	movs	r3, #2
 800036c:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 800036e:	2300      	movs	r3, #0
 8000370:	733b      	strb	r3, [r7, #12]

	GPIO_Init(&GpioButton);
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4618      	mov	r0, r3
 8000376:	f000 faa1 	bl	80008bc <GPIO_Init>

}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40020800 	.word	0x40020800

08000388 <WAIT_ForButtonPress>:

/*
 * WAIT_ForButtonPress
 * Polling button
 */
void WAIT_ForButtonPress (void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_NOT_PRESSED);
 800038c:	bf00      	nop
 800038e:	210d      	movs	r1, #13
 8000390:	4804      	ldr	r0, [pc, #16]	@ (80003a4 <WAIT_ForButtonPress+0x1c>)
 8000392:	f000 fc4d 	bl	8000c30 <GPIO_ReadFromInputPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b01      	cmp	r3, #1
 800039a:	d0f8      	beq.n	800038e <WAIT_ForButtonPress+0x6>

	/* debounce */
	delay();
 800039c:	f7ff ff88 	bl	80002b0 <delay>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40020800 	.word	0x40020800

080003a8 <main>:


int main (void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af02      	add	r7, sp, #8

	/* Initialize the button */
	GPIO_Button_Inits();
 80003ae:	f7ff ffd3 	bl	8000358 <GPIO_Button_Inits>

	/* Initialize I2C pins : Configure the GPIO pins to behave as I2C1 */
	I2C1_GPIOInits();
 80003b2:	f7ff ff93 	bl	80002dc <I2C1_GPIOInits>

	/* Configure I2C peripheral */
	I2C1_Inits();
 80003b6:	f7ff ffb3 	bl	8000320 <I2C1_Inits>

	/* Enable peripheral control */
	I2C_PeripheralControl(I2C1, ENABLE);
 80003ba:	2101      	movs	r1, #1
 80003bc:	4833      	ldr	r0, [pc, #204]	@ (800048c <main+0xe4>)
 80003be:	f000 fdb7 	bl	8000f30 <I2C_PeripheralControl>

	/* configure ack control in CR1 after enabling the peripheral i2c*/
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80003c2:	2101      	movs	r1, #1
 80003c4:	4831      	ldr	r0, [pc, #196]	@ (800048c <main+0xe4>)
 80003c6:	f000 fdce 	bl	8000f66 <I2C_ManageAcking>

	/* configure IRQ Priority for I2C1 event and error interrupts*/
	 I2C_IRQPriorityConfig(IRQ_NO_I2C1_EV, NVIC_IRQ_PR10);
 80003ca:	210a      	movs	r1, #10
 80003cc:	201f      	movs	r0, #31
 80003ce:	f001 f86d 	bl	80014ac <I2C_IRQPriorityConfig>
	 I2C_IRQPriorityConfig(IRQ_NO_I2C1_ER, NVIC_IRQ_PR9);
 80003d2:	2109      	movs	r1, #9
 80003d4:	2020      	movs	r0, #32
 80003d6:	f001 f869 	bl	80014ac <I2C_IRQPriorityConfig>

	/* Enable I2C1_EV IRQ and I2C_ER IRQ */
	 I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80003da:	2101      	movs	r1, #1
 80003dc:	201f      	movs	r0, #31
 80003de:	f000 ffbb 	bl	8001358 <I2C_IRQInterruptConfig>
	 I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80003e2:	2101      	movs	r1, #1
 80003e4:	2020      	movs	r0, #32
 80003e6:	f000 ffb7 	bl	8001358 <I2C_IRQInterruptConfig>


	while(1){

		/* send command after the button is pressed */
		WAIT_ForButtonPress();
 80003ea:	f7ff ffcd 	bl	8000388 <WAIT_ForButtonPress>
		printf("button is pressed\n");
 80003ee:	4828      	ldr	r0, [pc, #160]	@ (8000490 <main+0xe8>)
 80003f0:	f001 faf4 	bl	80019dc <puts>

		/* send CMD_LEN */
		command = CMD_LEN;
 80003f4:	4b27      	ldr	r3, [pc, #156]	@ (8000494 <main+0xec>)
 80003f6:	2251      	movs	r2, #81	@ 0x51
 80003f8:	701a      	strb	r2, [r3, #0]
		while (I2C_MasterSendDataIT(&I2C1Handle, &command, 1, SLAVE_ADDR, I2C_DISABLE_SR) != I2C_STATUS_READY);
 80003fa:	bf00      	nop
 80003fc:	2300      	movs	r3, #0
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2365      	movs	r3, #101	@ 0x65
 8000402:	2201      	movs	r2, #1
 8000404:	4923      	ldr	r1, [pc, #140]	@ (8000494 <main+0xec>)
 8000406:	4824      	ldr	r0, [pc, #144]	@ (8000498 <main+0xf0>)
 8000408:	f000 fe30 	bl	800106c <I2C_MasterSendDataIT>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f4      	bne.n	80003fc <main+0x54>

		/*receive len of the data from slave */
		while(I2C_MasterReceiveDataIT(&I2C1Handle, (uint8_t *) &receive_len, 1, SLAVE_ADDR, I2C_DISABLE_SR) != I2C_STATUS_READY);
 8000412:	bf00      	nop
 8000414:	2300      	movs	r3, #0
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	2365      	movs	r3, #101	@ 0x65
 800041a:	2201      	movs	r2, #1
 800041c:	491f      	ldr	r1, [pc, #124]	@ (800049c <main+0xf4>)
 800041e:	481e      	ldr	r0, [pc, #120]	@ (8000498 <main+0xf0>)
 8000420:	f000 fe68 	bl	80010f4 <I2C_MasterReceiveDataIT>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d1f4      	bne.n	8000414 <main+0x6c>
		rxComplt = RESET;
 800042a:	4b1d      	ldr	r3, [pc, #116]	@ (80004a0 <main+0xf8>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]

		/* send CMD_LEN */
		command = CMD_DATA;
 8000430:	4b18      	ldr	r3, [pc, #96]	@ (8000494 <main+0xec>)
 8000432:	2252      	movs	r2, #82	@ 0x52
 8000434:	701a      	strb	r2, [r3, #0]
		while(I2C_MasterSendDataIT(&I2C1Handle, &command, 1, SLAVE_ADDR, I2C_DISABLE_SR) != I2C_STATUS_READY);
 8000436:	bf00      	nop
 8000438:	2300      	movs	r3, #0
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2365      	movs	r3, #101	@ 0x65
 800043e:	2201      	movs	r2, #1
 8000440:	4914      	ldr	r1, [pc, #80]	@ (8000494 <main+0xec>)
 8000442:	4815      	ldr	r0, [pc, #84]	@ (8000498 <main+0xf0>)
 8000444:	f000 fe12 	bl	800106c <I2C_MasterSendDataIT>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d1f4      	bne.n	8000438 <main+0x90>

		/*receive data from slave */
		while(I2C_MasterReceiveDataIT(&I2C1Handle, receive_data, receive_len , SLAVE_ADDR, I2C_DISABLE_SR) != I2C_STATUS_READY);
 800044e:	bf00      	nop
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <main+0xf4>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	2300      	movs	r3, #0
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2365      	movs	r3, #101	@ 0x65
 800045c:	4911      	ldr	r1, [pc, #68]	@ (80004a4 <main+0xfc>)
 800045e:	480e      	ldr	r0, [pc, #56]	@ (8000498 <main+0xf0>)
 8000460:	f000 fe48 	bl	80010f4 <I2C_MasterReceiveDataIT>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1f2      	bne.n	8000450 <main+0xa8>

		while(rxComplt == RESET);
 800046a:	bf00      	nop
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <main+0xf8>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0fb      	beq.n	800046c <main+0xc4>
		receive_data[receive_len] ='\0';
 8000474:	4b09      	ldr	r3, [pc, #36]	@ (800049c <main+0xf4>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <main+0xfc>)
 800047c:	2100      	movs	r1, #0
 800047e:	5499      	strb	r1, [r3, r2]
		printf("Received Data : %s\n", receive_data);
 8000480:	4908      	ldr	r1, [pc, #32]	@ (80004a4 <main+0xfc>)
 8000482:	4809      	ldr	r0, [pc, #36]	@ (80004a8 <main+0x100>)
 8000484:	f001 fa42 	bl	800190c <iprintf>
		WAIT_ForButtonPress();
 8000488:	e7af      	b.n	80003ea <main+0x42>
 800048a:	bf00      	nop
 800048c:	40005400 	.word	0x40005400
 8000490:	080026ac 	.word	0x080026ac
 8000494:	200000dc 	.word	0x200000dc
 8000498:	20000090 	.word	0x20000090
 800049c:	200000de 	.word	0x200000de
 80004a0:	200000e0 	.word	0x200000e0
 80004a4:	200000bc 	.word	0x200000bc
 80004a8:	080026c0 	.word	0x080026c0

080004ac <I2C1_EV_IRQHandler>:

	return 0;
}

/* i2c1 event ISR */
void I2C1_EV_IRQHandler (void){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

	I2C_EV_IRQHandling(&I2C1Handle);
 80004b0:	4802      	ldr	r0, [pc, #8]	@ (80004bc <I2C1_EV_IRQHandler+0x10>)
 80004b2:	f001 f828 	bl	8001506 <I2C_EV_IRQHandling>

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000090 	.word	0x20000090

080004c0 <I2C1_ER_IRQHandler>:


/* i2c1 error ISR */
void I2C1_ER_IRQHandler (void){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

	I2C_ER_IRQHandling(&I2C1Handle);
 80004c4:	4802      	ldr	r0, [pc, #8]	@ (80004d0 <I2C1_ER_IRQHandler+0x10>)
 80004c6:	f001 f8d9 	bl	800167c <I2C_ER_IRQHandling>

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000090 	.word	0x20000090

080004d4 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
    if(AppEv == I2C_EV_TX_CMPLT)
 80004e0:	78fb      	ldrb	r3, [r7, #3]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d103      	bne.n	80004ee <I2C_ApplicationEventCallback+0x1a>
    {
        printf("Tx is completed\n");
 80004e6:	4810      	ldr	r0, [pc, #64]	@ (8000528 <I2C_ApplicationEventCallback+0x54>)
 80004e8:	f001 fa78 	bl	80019dc <puts>
        I2C_GenerateStopCondition(I2C1);

        /* Hanging in infinite loop */
        while(1);
    }
}
 80004ec:	e017      	b.n	800051e <I2C_ApplicationEventCallback+0x4a>
    else if (AppEv == I2C_EV_RX_CMPLT)
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d106      	bne.n	8000502 <I2C_ApplicationEventCallback+0x2e>
        printf("Rx is completed\n");
 80004f4:	480d      	ldr	r0, [pc, #52]	@ (800052c <I2C_ApplicationEventCallback+0x58>)
 80004f6:	f001 fa71 	bl	80019dc <puts>
        rxComplt = SET;
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <I2C_ApplicationEventCallback+0x5c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
}
 8000500:	e00d      	b.n	800051e <I2C_ApplicationEventCallback+0x4a>
    else if (AppEv == I2C_ERROR_AF)
 8000502:	78fb      	ldrb	r3, [r7, #3]
 8000504:	2b05      	cmp	r3, #5
 8000506:	d10a      	bne.n	800051e <I2C_ApplicationEventCallback+0x4a>
        printf("Error : Ack failure\n");
 8000508:	480a      	ldr	r0, [pc, #40]	@ (8000534 <I2C_ApplicationEventCallback+0x60>)
 800050a:	f001 fa67 	bl	80019dc <puts>
        I2C_CloseSendData(pI2CHandle);
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f000 fd53 	bl	8000fba <I2C_CloseSendData>
        I2C_GenerateStopCondition(I2C1);
 8000514:	4808      	ldr	r0, [pc, #32]	@ (8000538 <I2C_ApplicationEventCallback+0x64>)
 8000516:	f000 fd41 	bl	8000f9c <I2C_GenerateStopCondition>
        while(1);
 800051a:	bf00      	nop
 800051c:	e7fd      	b.n	800051a <I2C_ApplicationEventCallback+0x46>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	080026d4 	.word	0x080026d4
 800052c:	080026e4 	.word	0x080026e4
 8000530:	200000e0 	.word	0x200000e0
 8000534:	080026f4 	.word	0x080026f4
 8000538:	40005400 	.word	0x40005400

0800053c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <ITM_SendChar+0x44>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0d      	ldr	r2, [pc, #52]	@ (8000580 <ITM_SendChar+0x44>)
 800054c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000550:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000552:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <ITM_SendChar+0x48>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a0b      	ldr	r2, [pc, #44]	@ (8000584 <ITM_SendChar+0x48>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800055e:	bf00      	nop
 8000560:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f8      	beq.n	8000560 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800056e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	6013      	str	r3, [r2, #0]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	e000edfc 	.word	0xe000edfc
 8000584:	e0000e00 	.word	0xe0000e00

08000588 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e00a      	b.n	80005b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800059a:	f3af 8000 	nop.w
 800059e:	4601      	mov	r1, r0
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	60ba      	str	r2, [r7, #8]
 80005a6:	b2ca      	uxtb	r2, r1
 80005a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf0      	blt.n	800059a <_read+0x12>
  }

  return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	/* calling ITM trace mode to write into Serial wire viewer */
	ITM_SendChar(*ptr++);
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffad 	bl	800053c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
  }
  return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <_close>:

int _close(int file)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000620:	605a      	str	r2, [r3, #4]
  return 0;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <_isatty>:

int _isatty(int file)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000642:	b480      	push	{r7}
 8000644:	b085      	sub	sp, #20
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
	...

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f001 fad4 	bl	8001c38 <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20020000 	.word	0x20020000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	200000e4 	.word	0x200000e4
 80006c4:	20000238 	.word	0x20000238

080006c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	@ (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	@ (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	@ (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f6:	f001 faa5 	bl	8001c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fe55 	bl	80003a8 <main>

080006fe <LoopForever>:

LoopForever:
  b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800070c:	0800274c 	.word	0x0800274c
  ldr r2, =_sbss
 8000710:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000714:	20000234 	.word	0x20000234

08000718 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC_IRQHandler>
	...

0800071c <GPIO_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d157      	bne.n	80007de <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a59      	ldr	r2, [pc, #356]	@ (8000898 <GPIO_PeriClockControl+0x17c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d106      	bne.n	8000744 <GPIO_PeriClockControl+0x28>
 8000736:	4b59      	ldr	r3, [pc, #356]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a58      	ldr	r2, [pc, #352]	@ (800089c <GPIO_PeriClockControl+0x180>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 8000742:	e0a3      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a56      	ldr	r2, [pc, #344]	@ (80008a0 <GPIO_PeriClockControl+0x184>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d106      	bne.n	800075a <GPIO_PeriClockControl+0x3e>
 800074c:	4b53      	ldr	r3, [pc, #332]	@ (800089c <GPIO_PeriClockControl+0x180>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	4a52      	ldr	r2, [pc, #328]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000752:	f043 0302 	orr.w	r3, r3, #2
 8000756:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000758:	e098      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a51      	ldr	r2, [pc, #324]	@ (80008a4 <GPIO_PeriClockControl+0x188>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d106      	bne.n	8000770 <GPIO_PeriClockControl+0x54>
 8000762:	4b4e      	ldr	r3, [pc, #312]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a4d      	ldr	r2, [pc, #308]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800076e:	e08d      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a4d      	ldr	r2, [pc, #308]	@ (80008a8 <GPIO_PeriClockControl+0x18c>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d106      	bne.n	8000786 <GPIO_PeriClockControl+0x6a>
 8000778:	4b48      	ldr	r3, [pc, #288]	@ (800089c <GPIO_PeriClockControl+0x180>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077c:	4a47      	ldr	r2, [pc, #284]	@ (800089c <GPIO_PeriClockControl+0x180>)
 800077e:	f043 0308 	orr.w	r3, r3, #8
 8000782:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000784:	e082      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a48      	ldr	r2, [pc, #288]	@ (80008ac <GPIO_PeriClockControl+0x190>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d106      	bne.n	800079c <GPIO_PeriClockControl+0x80>
 800078e:	4b43      	ldr	r3, [pc, #268]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a42      	ldr	r2, [pc, #264]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800079a:	e077      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <GPIO_PeriClockControl+0x194>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d106      	bne.n	80007b2 <GPIO_PeriClockControl+0x96>
 80007a4:	4b3d      	ldr	r3, [pc, #244]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a8:	4a3c      	ldr	r2, [pc, #240]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007b0:	e06c      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_EN();
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a3f      	ldr	r2, [pc, #252]	@ (80008b4 <GPIO_PeriClockControl+0x198>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d106      	bne.n	80007c8 <GPIO_PeriClockControl+0xac>
 80007ba:	4b38      	ldr	r3, [pc, #224]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a37      	ldr	r2, [pc, #220]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007c6:	e061      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a3b      	ldr	r2, [pc, #236]	@ (80008b8 <GPIO_PeriClockControl+0x19c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d15d      	bne.n	800088c <GPIO_PeriClockControl+0x170>
 80007d0:	4b32      	ldr	r3, [pc, #200]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d4:	4a31      	ldr	r2, [pc, #196]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007dc:	e056      	b.n	800088c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000898 <GPIO_PeriClockControl+0x17c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d106      	bne.n	80007f4 <GPIO_PeriClockControl+0xd8>
 80007e6:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a2c      	ldr	r2, [pc, #176]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007ec:	f023 0301 	bic.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007f2:	e04b      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a2a      	ldr	r2, [pc, #168]	@ (80008a0 <GPIO_PeriClockControl+0x184>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d106      	bne.n	800080a <GPIO_PeriClockControl+0xee>
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <GPIO_PeriClockControl+0x180>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000800:	4a26      	ldr	r2, [pc, #152]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000802:	f023 0302 	bic.w	r3, r3, #2
 8000806:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000808:	e040      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a25      	ldr	r2, [pc, #148]	@ (80008a4 <GPIO_PeriClockControl+0x188>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <GPIO_PeriClockControl+0x104>
 8000812:	4b22      	ldr	r3, [pc, #136]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a21      	ldr	r2, [pc, #132]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000818:	f023 0304 	bic.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800081e:	e035      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <GPIO_PeriClockControl+0x18c>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d106      	bne.n	8000836 <GPIO_PeriClockControl+0x11a>
 8000828:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <GPIO_PeriClockControl+0x180>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <GPIO_PeriClockControl+0x180>)
 800082e:	f023 0308 	bic.w	r3, r3, #8
 8000832:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000834:	e02a      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <GPIO_PeriClockControl+0x190>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d106      	bne.n	800084c <GPIO_PeriClockControl+0x130>
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a16      	ldr	r2, [pc, #88]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000844:	f023 0310 	bic.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800084a:	e01f      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <GPIO_PeriClockControl+0x194>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d106      	bne.n	8000862 <GPIO_PeriClockControl+0x146>
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000858:	4a10      	ldr	r2, [pc, #64]	@ (800089c <GPIO_PeriClockControl+0x180>)
 800085a:	f023 0320 	bic.w	r3, r3, #32
 800085e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000860:	e014      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a13      	ldr	r2, [pc, #76]	@ (80008b4 <GPIO_PeriClockControl+0x198>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <GPIO_PeriClockControl+0x15c>
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <GPIO_PeriClockControl+0x180>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000876:	e009      	b.n	800088c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <GPIO_PeriClockControl+0x19c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d105      	bne.n	800088c <GPIO_PeriClockControl+0x170>
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000884:	4a05      	ldr	r2, [pc, #20]	@ (800089c <GPIO_PeriClockControl+0x180>)
 8000886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800088a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40020000 	.word	0x40020000
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020c00 	.word	0x40020c00
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40021400 	.word	0x40021400
 80008b4:	40021800 	.word	0x40021800
 80008b8:	40021c00 	.word	0x40021c00

080008bc <GPIO_Init>:
 *
 * @return		-
 *
 * @note		-
 ************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	/* Enable GPIO peripheral Clock */
	GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff26 	bl	800071c <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
	/* 1. Configure the mode for the given gpio pin */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d820      	bhi.n	800091e <GPIO_Init+0x62>
		/*Normal GPIO configurations */
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //need to clear bit field before sets
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e0c8      	b.n	8000ab0 <GPIO_Init+0x1f4>
	}
	else{
		/* Interrupt configuration */

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b05      	cmp	r3, #5
 8000924:	d117      	bne.n	8000956 <GPIO_Init+0x9a>
			/* 1. configure falling edge FTSR */
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000926:	4b47      	ldr	r3, [pc, #284]	@ (8000a44 <GPIO_Init+0x188>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	7912      	ldrb	r2, [r2, #4]
 800092e:	4611      	mov	r1, r2
 8000930:	2201      	movs	r2, #1
 8000932:	408a      	lsls	r2, r1
 8000934:	4611      	mov	r1, r2
 8000936:	4a43      	ldr	r2, [pc, #268]	@ (8000a44 <GPIO_Init+0x188>)
 8000938:	430b      	orrs	r3, r1
 800093a:	60d3      	str	r3, [r2, #12]

			/* clear same bit in RTSR */
			EXTI -> RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800093c:	4b41      	ldr	r3, [pc, #260]	@ (8000a44 <GPIO_Init+0x188>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7912      	ldrb	r2, [r2, #4]
 8000944:	4611      	mov	r1, r2
 8000946:	2201      	movs	r2, #1
 8000948:	408a      	lsls	r2, r1
 800094a:	43d2      	mvns	r2, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a44 <GPIO_Init+0x188>)
 8000950:	400b      	ands	r3, r1
 8000952:	6093      	str	r3, [r2, #8]
 8000954:	e035      	b.n	80009c2 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	2b04      	cmp	r3, #4
 800095c:	d117      	bne.n	800098e <GPIO_Init+0xd2>
			/* 1. configure raising edge RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800095e:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <GPIO_Init+0x188>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	7912      	ldrb	r2, [r2, #4]
 8000966:	4611      	mov	r1, r2
 8000968:	2201      	movs	r2, #1
 800096a:	408a      	lsls	r2, r1
 800096c:	4611      	mov	r1, r2
 800096e:	4a35      	ldr	r2, [pc, #212]	@ (8000a44 <GPIO_Init+0x188>)
 8000970:	430b      	orrs	r3, r1
 8000972:	6093      	str	r3, [r2, #8]

			/* clear same bit in FTSR */
			EXTI -> FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000974:	4b33      	ldr	r3, [pc, #204]	@ (8000a44 <GPIO_Init+0x188>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	7912      	ldrb	r2, [r2, #4]
 800097c:	4611      	mov	r1, r2
 800097e:	2201      	movs	r2, #1
 8000980:	408a      	lsls	r2, r1
 8000982:	43d2      	mvns	r2, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a2f      	ldr	r2, [pc, #188]	@ (8000a44 <GPIO_Init+0x188>)
 8000988:	400b      	ands	r3, r1
 800098a:	60d3      	str	r3, [r2, #12]
 800098c:	e019      	b.n	80009c2 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	2b06      	cmp	r3, #6
 8000994:	d115      	bne.n	80009c2 <GPIO_Init+0x106>
			/* 1. configure both falling and raising edge FTSR, RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000996:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <GPIO_Init+0x188>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	7912      	ldrb	r2, [r2, #4]
 800099e:	4611      	mov	r1, r2
 80009a0:	2201      	movs	r2, #1
 80009a2:	408a      	lsls	r2, r1
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a27      	ldr	r2, [pc, #156]	@ (8000a44 <GPIO_Init+0x188>)
 80009a8:	430b      	orrs	r3, r1
 80009aa:	6093      	str	r3, [r2, #8]
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80009ac:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <GPIO_Init+0x188>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	7912      	ldrb	r2, [r2, #4]
 80009b4:	4611      	mov	r1, r2
 80009b6:	2201      	movs	r2, #1
 80009b8:	408a      	lsls	r2, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a21      	ldr	r2, [pc, #132]	@ (8000a44 <GPIO_Init+0x188>)
 80009be:	430b      	orrs	r3, r1
 80009c0:	60d3      	str	r3, [r2, #12]
		}
		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 4; //selects SYSCFG_EXTIR 0 to 3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4; //selects position in SYSCFG_EXTIR 0 to 3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <GPIO_Init+0x18c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d044      	beq.n	8000a68 <GPIO_Init+0x1ac>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a4c <GPIO_Init+0x190>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d02b      	beq.n	8000a40 <GPIO_Init+0x184>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a18      	ldr	r2, [pc, #96]	@ (8000a50 <GPIO_Init+0x194>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d024      	beq.n	8000a3c <GPIO_Init+0x180>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <GPIO_Init+0x198>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d01d      	beq.n	8000a38 <GPIO_Init+0x17c>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <GPIO_Init+0x19c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d016      	beq.n	8000a34 <GPIO_Init+0x178>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <GPIO_Init+0x1a0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d00f      	beq.n	8000a30 <GPIO_Init+0x174>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <GPIO_Init+0x1a4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d008      	beq.n	8000a2c <GPIO_Init+0x170>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a11      	ldr	r2, [pc, #68]	@ (8000a64 <GPIO_Init+0x1a8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d101      	bne.n	8000a28 <GPIO_Init+0x16c>
 8000a24:	2307      	movs	r3, #7
 8000a26:	e020      	b.n	8000a6a <GPIO_Init+0x1ae>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e01e      	b.n	8000a6a <GPIO_Init+0x1ae>
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	e01c      	b.n	8000a6a <GPIO_Init+0x1ae>
 8000a30:	2305      	movs	r3, #5
 8000a32:	e01a      	b.n	8000a6a <GPIO_Init+0x1ae>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e018      	b.n	8000a6a <GPIO_Init+0x1ae>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e016      	b.n	8000a6a <GPIO_Init+0x1ae>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e014      	b.n	8000a6a <GPIO_Init+0x1ae>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e012      	b.n	8000a6a <GPIO_Init+0x1ae>
 8000a44:	40013c00 	.word	0x40013c00
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40021400 	.word	0x40021400
 8000a60:	40021800 	.word	0x40021800
 8000a64:	40021c00 	.word	0x40021c00
 8000a68:	2300      	movs	r3, #0
 8000a6a:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000a6c:	4b6d      	ldr	r3, [pc, #436]	@ (8000c24 <GPIO_Init+0x368>)
 8000a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a70:	4a6c      	ldr	r2, [pc, #432]	@ (8000c24 <GPIO_Init+0x368>)
 8000a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a76:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG -> EXTICR[temp1] |= (portcode << (4 *temp2));
 8000a78:	4a6b      	ldr	r2, [pc, #428]	@ (8000c28 <GPIO_Init+0x36c>)
 8000a7a:	7afb      	ldrb	r3, [r7, #11]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a82:	7a79      	ldrb	r1, [r7, #9]
 8000a84:	7abb      	ldrb	r3, [r7, #10]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	4966      	ldr	r1, [pc, #408]	@ (8000c28 <GPIO_Init+0x36c>)
 8000a90:	7afb      	ldrb	r3, [r7, #11]
 8000a92:	4302      	orrs	r2, r0
 8000a94:	3302      	adds	r3, #2
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. Enable EXTI interrupt delivery using IMR */
		EXTI -> IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000a9a:	4b64      	ldr	r3, [pc, #400]	@ (8000c2c <GPIO_Init+0x370>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	7912      	ldrb	r2, [r2, #4]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	408a      	lsls	r2, r1
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a60      	ldr	r2, [pc, #384]	@ (8000c2c <GPIO_Init+0x370>)
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
	}

	/* 3. Configure the speed */
	temp = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	79db      	ldrb	r3, [r3, #7]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	791b      	ldrb	r3, [r3, #4]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	791b      	ldrb	r3, [r3, #4]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2103      	movs	r1, #3
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6899      	ldr	r1, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	609a      	str	r2, [r3, #8]

	/* 4. Configure the Pull-up / Pull-down */
	temp = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7a1b      	ldrb	r3, [r3, #8]
 8000afc:	461a      	mov	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	791b      	ldrb	r3, [r3, #4]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2103      	movs	r1, #3
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	400a      	ands	r2, r1
 8000b26:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	68d9      	ldr	r1, [r3, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	60da      	str	r2, [r3, #12]

	/* 5. Configure the output type */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d81f      	bhi.n	8000b80 <GPIO_Init+0x2c4>
		temp = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	799b      	ldrb	r3, [r3, #6]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	791b      	ldrb	r3, [r3, #4]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2301      	movs	r3, #1
 8000b62:	408b      	lsls	r3, r1
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	6859      	ldr	r1, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	605a      	str	r2, [r3, #4]
	}

	/* Configure Alternate Function mode */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	795b      	ldrb	r3, [r3, #5]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d149      	bne.n	8000c1c <GPIO_Init+0x360>

		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	791b      	ldrb	r3, [r3, #4]
 8000b8c:	f003 0307 	and.w	r3, r3, #7
 8000b90:	723b      	strb	r3, [r7, #8]

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber <= 7){
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	d820      	bhi.n	8000bdc <GPIO_Init+0x320>
			temp = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7a5b      	ldrb	r3, [r3, #9]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	7a3b      	ldrb	r3, [r7, #8]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRL &= ~(0xf << (4 * temp1));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6a1a      	ldr	r2, [r3, #32]
 8000bb4:	7a3b      	ldrb	r3, [r7, #8]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	210f      	movs	r1, #15
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	621a      	str	r2, [r3, #32]
			pGPIOHandle -> pGPIOx ->AFRL |= temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6a19      	ldr	r1, [r3, #32]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
		}
	}
}
 8000bda:	e01f      	b.n	8000c1c <GPIO_Init+0x360>
			temp = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7a5b      	ldrb	r3, [r3, #9]
 8000be4:	461a      	mov	r2, r3
 8000be6:	7a3b      	ldrb	r3, [r7, #8]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bf6:	7a3b      	ldrb	r3, [r7, #8]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	400a      	ands	r2, r1
 8000c0a:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40013c00 	.word	0x40013c00

08000c30 <GPIO_ReadFromInputPin>:
 *
 * @return		- 0 or 1
 *
 * @note		-
 ************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t) ((pGPIOx -> IDR >> PinNumber) & 0x00000001);  //read pin value
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691a      	ldr	r2, [r3, #16]
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	fa22 f303 	lsr.w	r3, r2, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
	...

08000c5c <I2C_GetPCLK1Value>:
 *
 * @return		-uint32_t
 *
 * @note		-
 */
uint32_t  I2C_GetPCLK1Value (void){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0

	uint32_t  pclk1, systemClk;
	uint16_t ahbp;
	uint8_t clkSrc, temp, apb1p;

	clkSrc = (RCC -> CFGR >> 2) & 0x3;
 8000c62:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <I2C_GetPCLK1Value+0x90>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	723b      	strb	r3, [r7, #8]

	if(clkSrc == 0) systemClk = HSI_CLK_FREQ;
 8000c70:	7a3b      	ldrb	r3, [r7, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <I2C_GetPCLK1Value+0x20>
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <I2C_GetPCLK1Value+0x94>)
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e004      	b.n	8000c86 <I2C_GetPCLK1Value+0x2a>
	else if(clkSrc == 1) systemClk = HSE_CLK_FREQ;
 8000c7c:	7a3b      	ldrb	r3, [r7, #8]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d101      	bne.n	8000c86 <I2C_GetPCLK1Value+0x2a>
 8000c82:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <I2C_GetPCLK1Value+0x98>)
 8000c84:	60fb      	str	r3, [r7, #12]

	temp = (RCC -> CFGR >> 4) & 0xF;
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <I2C_GetPCLK1Value+0x90>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	71fb      	strb	r3, [r7, #7]

	if(temp < 8) ahbp = 1;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	d802      	bhi.n	8000ca0 <I2C_GetPCLK1Value+0x44>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	817b      	strh	r3, [r7, #10]
 8000c9e:	e005      	b.n	8000cac <I2C_GetPCLK1Value+0x50>
	else ahbp = ahb_PreScaler[temp - 8];
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	3b08      	subs	r3, #8
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <I2C_GetPCLK1Value+0x9c>)
 8000ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000caa:	817b      	strh	r3, [r7, #10]


	temp = (RCC -> CFGR >> 10) & 0x7;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <I2C_GetPCLK1Value+0x90>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	0a9b      	lsrs	r3, r3, #10
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	71fb      	strb	r3, [r7, #7]

	if(temp < 4) apb1p = 1;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d802      	bhi.n	8000cc6 <I2C_GetPCLK1Value+0x6a>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	727b      	strb	r3, [r7, #9]
 8000cc4:	e004      	b.n	8000cd0 <I2C_GetPCLK1Value+0x74>
	else apb1p = abp1_PreScaler[temp - 4];
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	3b04      	subs	r3, #4
 8000cca:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <I2C_GetPCLK1Value+0xa0>)
 8000ccc:	5cd3      	ldrb	r3, [r2, r3]
 8000cce:	727b      	strb	r3, [r7, #9]

	pclk1 = (systemClk / ahbp /apb1p);
 8000cd0:	897b      	ldrh	r3, [r7, #10]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cd8:	7a7b      	ldrb	r3, [r7, #9]
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000ce0:	683b      	ldr	r3, [r7, #0]


}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	00f42400 	.word	0x00f42400
 8000cf4:	007a1200 	.word	0x007a1200
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000014 	.word	0x20000014

08000d00 <I2C_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE){
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d120      	bne.n	8000d54 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1) I2C1_PCLK_EN();
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a22      	ldr	r2, [pc, #136]	@ (8000da0 <I2C_PeriClockControl+0xa0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d106      	bne.n	8000d28 <I2C_PeriClockControl+0x28>
 8000d1a:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C2) I2C2_PCLK_DI();
		else if (pI2Cx == I2C3) I2C3_PCLK_DI();

	}

}
 8000d26:	e035      	b.n	8000d94 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2) I2C2_PCLK_EN();
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000da8 <I2C_PeriClockControl+0xa8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d106      	bne.n	8000d3e <I2C_PeriClockControl+0x3e>
 8000d30:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d3a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d3c:	e02a      	b.n	8000d94 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3) I2C3_PCLK_EN();
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a1a      	ldr	r2, [pc, #104]	@ (8000dac <I2C_PeriClockControl+0xac>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d126      	bne.n	8000d94 <I2C_PeriClockControl+0x94>
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a16      	ldr	r2, [pc, #88]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d52:	e01f      	b.n	8000d94 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1) I2C1_PCLK_DI();
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <I2C_PeriClockControl+0xa0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d106      	bne.n	8000d6a <I2C_PeriClockControl+0x6a>
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000d66:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d68:	e014      	b.n	8000d94 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2) I2C2_PCLK_DI();
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000da8 <I2C_PeriClockControl+0xa8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d106      	bne.n	8000d80 <I2C_PeriClockControl+0x80>
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d78:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d7e:	e009      	b.n	8000d94 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3) I2C3_PCLK_DI();
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <I2C_PeriClockControl+0xac>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d105      	bne.n	8000d94 <I2C_PeriClockControl+0x94>
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <I2C_PeriClockControl+0xa4>)
 8000d8e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000d92:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40005400 	.word	0x40005400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40005800 	.word	0x40005800
 8000dac:	40005c00 	.word	0x40005c00

08000db0 <I2C_Init>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]

	/*Enable Peripheral clock */
	I2C_PeriClockControl(pI2CHandle -> pI2Cx, ENABLE);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff9c 	bl	8000d00 <I2C_PeriClockControl>

	/* configure ack control in CR1*/
	tempreg |= ((pI2CHandle -> I2C_Config.I2C_AckControl) << 10);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7a5b      	ldrb	r3, [r3, #9]
 8000dcc:	029b      	lsls	r3, r3, #10
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> CR1 |= (tempreg & 0xFFFF);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6819      	ldr	r1, [r3, #0]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]

	/* configure FREQ field in CR2 */
	tempreg = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
	tempreg |= (I2C_GetPCLK1Value() / 1000000U);
 8000dea:	f7ff ff37 	bl	8000c5c <I2C_GetPCLK1Value>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a4c      	ldr	r2, [pc, #304]	@ (8000f24 <I2C_Init+0x174>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	0c9b      	lsrs	r3, r3, #18
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> CR2 |= (tempreg & 0x3F);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6859      	ldr	r1, [r3, #4]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]

	/* program the device own address */
	tempreg = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle -> I2C_Config.I2C_DeviceAddress << 1);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7a1b      	ldrb	r3, [r3, #8]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
	/* I2C_OAR1 14 bit always should be kept at 1 as per reference manual */
	tempreg |= (1 << 14);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> OAR1 |= tempreg;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6899      	ldr	r1, [r3, #8]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	609a      	str	r2, [r3, #8]

	/*CCR calculation */
	uint16_t ccrValue = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle -> I2C_Config.I2C_SCLSpeed <= I2C_SCLK_SPEED_SM){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4a38      	ldr	r2, [pc, #224]	@ (8000f28 <I2C_Init+0x178>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d80f      	bhi.n	8000e6c <I2C_Init+0xbc>
		/* standard freq mode*/
		ccrValue = (I2C_GetPCLK1Value() / (2 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 8000e4c:	f7ff ff06 	bl	8000c5c <I2C_GetPCLK1Value>
 8000e50:	4602      	mov	r2, r0
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccrValue & 0xFFF);
 8000e5e:	897b      	ldrh	r3, [r7, #10]
 8000e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e02c      	b.n	8000ec6 <I2C_Init+0x116>
	}
	else{
		/* Fast freq mode */

		/* set F/S bit in CCR to enable fast mode*/
		tempreg |= (1 << 15);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e72:	60fb      	str	r3, [r7, #12]
		/* configure duty cycle */
		tempreg |= (pI2CHandle ->I2C_Config.I2C_FMDutyCycle << 14);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	039b      	lsls	r3, r3, #14
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

		/* ccr calc */
		if(pI2CHandle ->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10b      	bne.n	8000ea0 <I2C_Init+0xf0>
			ccrValue = (I2C_GetPCLK1Value() / (3 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 8000e88:	f7ff fee8 	bl	8000c5c <I2C_GetPCLK1Value>
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e9c:	817b      	strh	r3, [r7, #10]
 8000e9e:	e00c      	b.n	8000eba <I2C_Init+0x10a>
		}
		else{
			ccrValue = (I2C_GetPCLK1Value() / (25 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 8000ea0:	f7ff fedc 	bl	8000c5c <I2C_GetPCLK1Value>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	009a      	lsls	r2, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb8:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccrValue & 0xFFF);
 8000eba:	897b      	ldrh	r3, [r7, #10]
 8000ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle -> pI2Cx -> CCR |= tempreg;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	69d9      	ldr	r1, [r3, #28]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	61da      	str	r2, [r3, #28]

	/* configure TRISE reg */
	if(pI2CHandle -> I2C_Config.I2C_SCLSpeed <= I2C_SCLK_SPEED_SM){
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <I2C_Init+0x178>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d809      	bhi.n	8000ef4 <I2C_Init+0x144>
		/* standard mode */
		tempreg = (I2C_GetPCLK1Value() / 1000000U) + 1;
 8000ee0:	f7ff febc 	bl	8000c5c <I2C_GetPCLK1Value>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f24 <I2C_Init+0x174>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	0c9b      	lsrs	r3, r3, #18
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	e00d      	b.n	8000f10 <I2C_Init+0x160>
	}
	else{
		/* Fast mode */
		tempreg = (I2C_GetPCLK1Value() * 300/ 1000000000U) + 1;
 8000ef4:	f7ff feb2 	bl	8000c5c <I2C_GetPCLK1Value>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000efe:	fb02 f303 	mul.w	r3, r2, r3
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	4a09      	ldr	r2, [pc, #36]	@ (8000f2c <I2C_Init+0x17c>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	09db      	lsrs	r3, r3, #7
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle -> pI2Cx ->TRISE = (tempreg & 0x3F);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000f1a:	621a      	str	r2, [r3, #32]
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	000186a0 	.word	0x000186a0
 8000f2c:	00044b83 	.word	0x00044b83

08000f30 <I2C_PeripheralControl>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d106      	bne.n	8000f50 <I2C_PeripheralControl+0x20>
		pI2Cx -> CR1 |= (1 << I2C_CR1_PE);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f043 0201 	orr.w	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
	}
	else{
		pI2Cx -> CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000f4e:	e005      	b.n	8000f5c <I2C_PeripheralControl+0x2c>
		pI2Cx -> CR1 &= ~(1 << I2C_CR1_PE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 0201 	bic.w	r2, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <I2C_ManageAcking>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == I2C_ACK_ENABLE) pI2Cx -> CR1 |= (1 << 10);
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d106      	bne.n	8000f86 <I2C_ManageAcking+0x20>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	601a      	str	r2, [r3, #0]
	else pI2Cx -> CR1 &= ~(1 << 10);
}
 8000f84:	e005      	b.n	8000f92 <I2C_ManageAcking+0x2c>
	else pI2Cx -> CR1 &= ~(1 << 10);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <I2C_GenerateStopCondition>:
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    pI2Cx-> CR1 |= (1 << I2C_CR1_STOP);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <I2C_CloseSendData>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]

	/* disable ITBUFEN Control Bit */
	pI2CHandle -> pI2Cx -> CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fd0:	605a      	str	r2, [r3, #4]

	/* disable ITEVFEN Control Bit */
	pI2CHandle -> pI2Cx -> CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000fe0:	605a      	str	r2, [r3, #4]

	/*resets all members in handle structure */
	pI2CHandle ->TxLen = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
	pI2CHandle ->TxBuffer = NULL;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
	pI2CHandle ->TxRxState = I2C_STATUS_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	761a      	strb	r2, [r3, #24]

	if(pI2CHandle ->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7a5b      	ldrb	r3, [r3, #9]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <I2C_CloseSendData+0x4e>
		I2C_ManageAcking(pI2CHandle ->pI2Cx, ENABLE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffaf 	bl	8000f66 <I2C_ManageAcking>
	}

}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <I2C_CloseReceiveData>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

	/* disable ITBUFEN Control Bit */
	pI2CHandle -> pI2Cx -> CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001026:	605a      	str	r2, [r3, #4]

	/* disable ITEVFEN Control Bit */
	pI2CHandle -> pI2Cx -> CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001036:	605a      	str	r2, [r3, #4]

	/*resets all members in handle structure */
	pI2CHandle ->RxLen = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
	pI2CHandle ->RxSize = 0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	@ 0x24
	pI2CHandle ->RxBuffer = NULL;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
	pI2CHandle ->TxRxState = I2C_STATUS_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	761a      	strb	r2, [r3, #24]

	if(pI2CHandle ->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7a5b      	ldrb	r3, [r3, #9]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle ->pI2Cx, ENABLE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff81 	bl	8000f66 <I2C_ManageAcking>
	}

}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <I2C_MasterSendDataIT>:
 *
 * @return		- returns the api state : I2C_STATUS_BUSY_TX /I2C_STATUS_BUSY_RX /I2C_STATUS_READY
 *
 * @note		-
 */
uint8_t  I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle -> TxRxState;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	7e1b      	ldrb	r3, [r3, #24]
 800107e:	75fb      	strb	r3, [r7, #23]

		if( (busystate != I2C_STATUS_BUSY_TX) && (busystate != I2C_STATUS_BUSY_RX))
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d031      	beq.n	80010ea <I2C_MasterSendDataIT+0x7e>
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d02e      	beq.n	80010ea <I2C_MasterSendDataIT+0x7e>
		{
			pI2CHandle -> TxBuffer = pTxBuffer;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	611a      	str	r2, [r3, #16]
			pI2CHandle -> TxLen = Len;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	621a      	str	r2, [r3, #32]
			pI2CHandle -> TxRxState = I2C_STATUS_BUSY_TX;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2201      	movs	r2, #1
 800109c:	761a      	strb	r2, [r3, #24]
			pI2CHandle -> DevAddr = SlaveAddr;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			pI2CHandle -> Sr = Sr;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			/* Generate START Condition */
			I2C_GenerateStartCondition(pI2CHandle ->pI2Cx);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f864 	bl	8001182 <I2C_GenerateStartCondition>

			/* enable ITBUFEN Control Bit */
			pI2CHandle -> pI2Cx -> CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80010c8:	605a      	str	r2, [r3, #4]

			/* enable ITEVFEN Control Bit */
			pI2CHandle -> pI2Cx -> CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010d8:	605a      	str	r2, [r3, #4]

			/* ITERREN Control Bit */
			pI2CHandle -> pI2Cx -> CR2 |= ( 1 << I2C_CR2_ITERREN);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010e8:	605a      	str	r2, [r3, #4]

		}

		return busystate;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <I2C_MasterReceiveDataIT>:
 *
 * @return		-returns the api state : I2C_STATUS_BUSY_TX /I2C_STATUS_BUSY_RX /I2C_STATUS_READY
 *
 * @note		-
 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr ){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle -> TxRxState;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	7e1b      	ldrb	r3, [r3, #24]
 8001106:	75fb      	strb	r3, [r7, #23]

		if( (busystate != I2C_STATUS_BUSY_TX) && (busystate != I2C_STATUS_BUSY_RX))
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d034      	beq.n	8001178 <I2C_MasterReceiveDataIT+0x84>
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d031      	beq.n	8001178 <I2C_MasterReceiveDataIT+0x84>
		{
			pI2CHandle->RxBuffer = pRxBuffer;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	615a      	str	r2, [r3, #20]
			pI2CHandle->RxLen = Len;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	61da      	str	r2, [r3, #28]
			pI2CHandle->TxRxState = I2C_STATUS_BUSY_RX;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2202      	movs	r2, #2
 8001124:	761a      	strb	r2, [r3, #24]
			pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	625a      	str	r2, [r3, #36]	@ 0x24
			pI2CHandle->DevAddr = SlaveAddr;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	78fa      	ldrb	r2, [r7, #3]
 8001130:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			pI2CHandle->Sr = Sr;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f897 2020 	ldrb.w	r2, [r7, #32]
 800113a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			/*  Generate START Condition */
			I2C_GenerateStartCondition(pI2CHandle ->pI2Cx);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f81d 	bl	8001182 <I2C_GenerateStartCondition>

			/*  enable ITBUFEN Control Bit */
			pI2CHandle -> pI2Cx -> CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001156:	605a      	str	r2, [r3, #4]

			/* enable ITEVFEN Control Bit */
			pI2CHandle -> pI2Cx -> CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001166:	605a      	str	r2, [r3, #4]

			/* enable ITERREN Control Bit */
			pI2CHandle -> pI2Cx -> CR2 |= ( 1 << I2C_CR2_ITERREN);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001176:	605a      	str	r2, [r3, #4]

		}

		return busystate;
 8001178:	7dfb      	ldrb	r3, [r7, #23]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <I2C_GenerateStartCondition>:
*
* @return		-
*
* @note		-
*/
static void I2C_GenerateStartCondition (I2C_RegDef_t *pI2Cx){
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]

	/* set START bit in CR1 */
	pI2Cx -> CR1 |= (1 << I2C_CR1_START);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]

}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <I2C_ExecuteAddressPhase>:
*
* @return		- none
*
* @note		-
*/
static void I2C_ExecuteAddressPhase (I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t mode){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
 80011ac:	4613      	mov	r3, r2
 80011ae:	70bb      	strb	r3, [r7, #2]

	SlaveAddr <<= 1;
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	70fb      	strb	r3, [r7, #3]

	if( mode == I2C_MASTER_WR){
 80011b6:	78bb      	ldrb	r3, [r7, #2]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <I2C_ExecuteAddressPhase+0x26>
		/*  write mode */
		SlaveAddr &= ~( 1 );
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	70fb      	strb	r3, [r7, #3]
 80011c4:	e006      	b.n	80011d4 <I2C_ExecuteAddressPhase+0x34>
	}
	else if ( mode == I2C_MASTER_RD){
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d103      	bne.n	80011d4 <I2C_ExecuteAddressPhase+0x34>
		/*  read mode */
		SlaveAddr |= ( 1 );
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	70fb      	strb	r3, [r7, #3]
	}
	pI2Cx -> DR = SlaveAddr;
 80011d4:	78fa      	ldrb	r2, [r7, #3]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	611a      	str	r2, [r3, #16]

}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <I2C_ClearADDRFlag>:
*
* @return		- none
*
* @note		-
*/
static void I2C_ClearADDRFlag (I2C_Handle_t *pI2CHandle){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

	/* check for device mode */
	if(pI2CHandle -> pI2Cx ->SR2 & (1 << I2C_SR2_MSL)){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00d      	beq.n	8001216 <I2C_ClearADDRFlag+0x32>
		/* device in master mode */
		if(pI2CHandle ->TxRxState == I2C_STATUS_BUSY_RX){
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7e1b      	ldrb	r3, [r3, #24]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d109      	bne.n	8001216 <I2C_ClearADDRFlag+0x32>
			/* receives 1 byte data */
			if(pI2CHandle ->RxSize == 1){
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	2b01      	cmp	r3, #1
 8001208:	d105      	bne.n	8001216 <I2C_ClearADDRFlag+0x32>
				/* disable acking  before clears ADDR*/
				I2C_ManageAcking(pI2CHandle ->pI2Cx, DISABLE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fea8 	bl	8000f66 <I2C_ManageAcking>
		;
	}

	/* ADDR bit is cleared by reading SR1 followed by SR2 */
	uint32_t dummyread;
	dummyread = pI2CHandle -> pI2Cx -> SR1;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	60fb      	str	r3, [r7, #12]
	dummyread = pI2CHandle -> pI2Cx -> SR2;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	60fb      	str	r3, [r7, #12]
	(void)dummyread;

}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <I2C_MasterHandleRXNEInterrupt>:
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_MasterHandleRXNEInterrupt (I2C_Handle_t *pI2CHandle){
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]

	if(pI2CHandle -> RxSize == 1){
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10b      	bne.n	8001256 <I2C_MasterHandleRXNEInterrupt+0x28>
		*(pI2CHandle ->RxBuffer) = pI2CHandle -> pI2Cx -> DR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]
		pI2CHandle ->RxLen --;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	61da      	str	r2, [r3, #28]
	}
	if(pI2CHandle -> RxSize > 1){
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	2b01      	cmp	r3, #1
 800125c:	d91a      	bls.n	8001294 <I2C_MasterHandleRXNEInterrupt+0x66>
		if(pI2CHandle ->RxLen == 2){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d105      	bne.n	8001272 <I2C_MasterHandleRXNEInterrupt+0x44>
			/* disable acking */
			I2C_ManageAcking(pI2CHandle ->pI2Cx, DISABLE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe7a 	bl	8000f66 <I2C_ManageAcking>
		}
		*(pI2CHandle ->RxBuffer) = pI2CHandle -> pI2Cx -> DR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]
		pI2CHandle ->RxLen --;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	61da      	str	r2, [r3, #28]
		pI2CHandle ->RxBuffer ++;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	615a      	str	r2, [r3, #20]

	}
	if(pI2CHandle -> RxLen == 0){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d110      	bne.n	80012be <I2C_MasterHandleRXNEInterrupt+0x90>
		/* generate stop condition if sr disabled */
		if (pI2CHandle -> Sr == I2C_DISABLE_SR ){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d104      	bne.n	80012b0 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStartCondition(pI2CHandle ->pI2Cx);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff69 	bl	8001182 <I2C_GenerateStartCondition>
		}
		/*resets all members of handle */
		I2C_CloseReceiveData(pI2CHandle);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fead 	bl	8001010 <I2C_CloseReceiveData>

		/* notify the application about rx complete */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 80012b6:	2101      	movs	r1, #1
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff f90b 	bl	80004d4 <I2C_ApplicationEventCallback>

	}


}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <I2C_MasterHandleTXEInterrupt>:
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_MasterHandleTXEInterrupt (I2C_Handle_t *pI2CHandle){
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]

	if(pI2CHandle ->TxRxState == I2C_STATUS_BUSY_TX){
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7e1b      	ldrb	r3, [r3, #24]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d113      	bne.n	80012fe <I2C_MasterHandleTXEInterrupt+0x38>
		if(pI2CHandle ->TxLen > 0){
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00f      	beq.n	80012fe <I2C_MasterHandleTXEInterrupt+0x38>
			/* load data */
			pI2CHandle -> pI2Cx ->DR = *(pI2CHandle ->TxBuffer);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	611a      	str	r2, [r3, #16]
			pI2CHandle ->TxLen --;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	1e5a      	subs	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	621a      	str	r2, [r3, #32]
			pI2CHandle ->TxBuffer ++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	611a      	str	r2, [r3, #16]
		}
	}

}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <I2C_MasterHandleBTFInterrupt>:
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
static void I2C_MasterHandleBTFInterrupt (I2C_Handle_t *pI2CHandle){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	if(pI2CHandle ->TxRxState == I2C_STATUS_BUSY_TX){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e1b      	ldrb	r3, [r3, #24]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d11b      	bne.n	8001350 <I2C_MasterHandleBTFInterrupt+0x48>
		/* chk for TXE flag */
		if (pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_TXE)){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001322:	2b00      	cmp	r3, #0
 8001324:	d014      	beq.n	8001350 <I2C_MasterHandleBTFInterrupt+0x48>
			/* both BTF AND TXE are set */
			if (pI2CHandle ->TxLen == 0){
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d110      	bne.n	8001350 <I2C_MasterHandleBTFInterrupt+0x48>
				/* 1. Generate stop condition */
				if(pI2CHandle ->Sr == I2C_DISABLE_SR){
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d104      	bne.n	8001342 <I2C_MasterHandleBTFInterrupt+0x3a>
					I2C_GenerateStopCondition(pI2CHandle ->pI2Cx);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe2d 	bl	8000f9c <I2C_GenerateStopCondition>
				}

				/* 2. Resets all member elements of handle structure */
				I2C_CloseSendData(pI2CHandle);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fe39 	bl	8000fba <I2C_CloseSendData>

				/* 3. notify the application about tx complete */
				I2C_ApplicationEventCallback (pI2CHandle, I2C_EV_TX_CMPLT);
 8001348:	2100      	movs	r1, #0
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff f8c2 	bl	80004d4 <I2C_ApplicationEventCallback>
		;
	}



}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <I2C_IRQInterruptConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d144      	bne.n	80013f8 <I2C_IRQInterruptConfig+0xa0>
		if(IRQNumber <= 31){
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b1f      	cmp	r3, #31
 8001372:	d809      	bhi.n	8001388 <I2C_IRQInterruptConfig+0x30>
			/* configure ISER0 */
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001374:	4b45      	ldr	r3, [pc, #276]	@ (800148c <I2C_IRQInterruptConfig+0x134>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	4611      	mov	r1, r2
 8001382:	4a42      	ldr	r2, [pc, #264]	@ (800148c <I2C_IRQInterruptConfig+0x134>)
 8001384:	430b      	orrs	r3, r1
 8001386:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 32 && IRQNumber < 64){
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b1f      	cmp	r3, #31
 800138c:	d90e      	bls.n	80013ac <I2C_IRQInterruptConfig+0x54>
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b3f      	cmp	r3, #63	@ 0x3f
 8001392:	d80b      	bhi.n	80013ac <I2C_IRQInterruptConfig+0x54>
			/* configure ISER1 */
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001394:	4b3e      	ldr	r3, [pc, #248]	@ (8001490 <I2C_IRQInterruptConfig+0x138>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	f002 021f 	and.w	r2, r2, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4611      	mov	r1, r2
 80013a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001490 <I2C_IRQInterruptConfig+0x138>)
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 64 && IRQNumber < 96){
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80013b0:	d90e      	bls.n	80013d0 <I2C_IRQInterruptConfig+0x78>
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b5f      	cmp	r3, #95	@ 0x5f
 80013b6:	d80b      	bhi.n	80013d0 <I2C_IRQInterruptConfig+0x78>
			/* configure ISER2 */
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 80013b8:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <I2C_IRQInterruptConfig+0x13c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	f002 021f 	and.w	r2, r2, #31
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f202 	lsl.w	r2, r1, r2
 80013c8:	4611      	mov	r1, r2
 80013ca:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <I2C_IRQInterruptConfig+0x13c>)
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6013      	str	r3, [r2, #0]
		}
		if(IRQNumber >= 96 && IRQNumber < 128){
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b5f      	cmp	r3, #95	@ 0x5f
 80013d4:	d954      	bls.n	8001480 <I2C_IRQInterruptConfig+0x128>
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db50      	blt.n	8001480 <I2C_IRQInterruptConfig+0x128>
			/* configure ISER3 */
			*NVIC_ISER3 |= (1 << (IRQNumber % 32));
 80013de:	4b2e      	ldr	r3, [pc, #184]	@ (8001498 <I2C_IRQInterruptConfig+0x140>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	f002 021f 	and.w	r2, r2, #31
 80013e8:	2101      	movs	r1, #1
 80013ea:	fa01 f202 	lsl.w	r2, r1, r2
 80013ee:	4611      	mov	r1, r2
 80013f0:	4a29      	ldr	r2, [pc, #164]	@ (8001498 <I2C_IRQInterruptConfig+0x140>)
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6013      	str	r3, [r2, #0]
		}

	}


}
 80013f6:	e043      	b.n	8001480 <I2C_IRQInterruptConfig+0x128>
		if(IRQNumber <= 31){
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b1f      	cmp	r3, #31
 80013fc:	d809      	bhi.n	8001412 <I2C_IRQInterruptConfig+0xba>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <I2C_IRQInterruptConfig+0x144>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	79fa      	ldrb	r2, [r7, #7]
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	4611      	mov	r1, r2
 800140c:	4a23      	ldr	r2, [pc, #140]	@ (800149c <I2C_IRQInterruptConfig+0x144>)
 800140e:	430b      	orrs	r3, r1
 8001410:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 32 && IRQNumber < 64){
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b1f      	cmp	r3, #31
 8001416:	d90e      	bls.n	8001436 <I2C_IRQInterruptConfig+0xde>
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b3f      	cmp	r3, #63	@ 0x3f
 800141c:	d80b      	bhi.n	8001436 <I2C_IRQInterruptConfig+0xde>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <I2C_IRQInterruptConfig+0x148>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	f002 021f 	and.w	r2, r2, #31
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	4611      	mov	r1, r2
 8001430:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <I2C_IRQInterruptConfig+0x148>)
 8001432:	430b      	orrs	r3, r1
 8001434:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 64 && IRQNumber < 96){
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b3f      	cmp	r3, #63	@ 0x3f
 800143a:	d90e      	bls.n	800145a <I2C_IRQInterruptConfig+0x102>
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b5f      	cmp	r3, #95	@ 0x5f
 8001440:	d80b      	bhi.n	800145a <I2C_IRQInterruptConfig+0x102>
			*NVIC_ICER2 |= (1 << (IRQNumber % 32));
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <I2C_IRQInterruptConfig+0x14c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	f002 021f 	and.w	r2, r2, #31
 800144c:	2101      	movs	r1, #1
 800144e:	fa01 f202 	lsl.w	r2, r1, r2
 8001452:	4611      	mov	r1, r2
 8001454:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <I2C_IRQInterruptConfig+0x14c>)
 8001456:	430b      	orrs	r3, r1
 8001458:	6013      	str	r3, [r2, #0]
		if(IRQNumber >= 96 && IRQNumber < 128){
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b5f      	cmp	r3, #95	@ 0x5f
 800145e:	d90f      	bls.n	8001480 <I2C_IRQInterruptConfig+0x128>
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0b      	blt.n	8001480 <I2C_IRQInterruptConfig+0x128>
			*NVIC_ICER3 |= (1 << (IRQNumber % 32));
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <I2C_IRQInterruptConfig+0x150>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	f002 021f 	and.w	r2, r2, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f202 	lsl.w	r2, r1, r2
 8001478:	4611      	mov	r1, r2
 800147a:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <I2C_IRQInterruptConfig+0x150>)
 800147c:	430b      	orrs	r3, r1
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000e104 	.word	0xe000e104
 8001494:	e000e108 	.word	0xe000e108
 8001498:	e000e10c 	.word	0xe000e10c
 800149c:	e000e180 	.word	0xe000e180
 80014a0:	e000e184 	.word	0xe000e184
 80014a4:	e000e188 	.word	0xe000e188
 80014a8:	e000e18c 	.word	0xe000e18c

080014ac <I2C_IRQPriorityConfig>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]

	uint8_t iprx = IRQNumber / 4;  			/* ipr reg number offset address */
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;    /* position in iprx reg */
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_position = (8 * iprx_section) + (8 - NO_IPR_BITS_IMPLEMENTED);  //only upper 4 bits are implemented in IPR
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3304      	adds	r3, #4
 80014d2:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_position);
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80014dc:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	79b9      	ldrb	r1, [r7, #6]
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80014f4:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]


}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <I2C_EV_IRQHandling>:
 *
 * @return		-
 *
 * @note		- Interrupt handling for different I2C events (refer SR1)
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]

	/*Interrupt handling for both master and slave mode of a device */

	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle -> pI2Cx -> CR2 & (1 << I2C_CR2_ITEVTEN);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001518:	613b      	str	r3, [r7, #16]
	temp2 = pI2CHandle -> pI2Cx -> CR2 & (1 << I2C_CR2_ITBUFEN);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	60fb      	str	r3, [r7, #12]
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_SB);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]

	/*1. Handle For interrupt generated by SB event */
	/*	Note : SB flag is only applicable in Master mode */
	if(temp1 && temp3){
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d018      	beq.n	800156a <I2C_EV_IRQHandling+0x64>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <I2C_EV_IRQHandling+0x64>
		/* Start condition is generated succefully. Send address with read or wr */
		uint8_t mode;
		if(pI2CHandle -> TxRxState == I2C_STATUS_BUSY_TX) mode = I2C_MASTER_WR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7e1b      	ldrb	r3, [r3, #24]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <I2C_EV_IRQHandling+0x46>
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]
 800154a:	e005      	b.n	8001558 <I2C_EV_IRQHandling+0x52>
		else if (pI2CHandle -> TxRxState == I2C_STATUS_BUSY_RX) mode = I2C_MASTER_RD;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7e1b      	ldrb	r3, [r3, #24]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d101      	bne.n	8001558 <I2C_EV_IRQHandling+0x52>
 8001554:	2301      	movs	r3, #1
 8001556:	75fb      	strb	r3, [r7, #23]
		I2C_ExecuteAddressPhase(pI2CHandle ->pI2Cx, pI2CHandle ->DevAddr, mode);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001562:	7dfa      	ldrb	r2, [r7, #23]
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fe1b 	bl	80011a0 <I2C_ExecuteAddressPhase>


	/* 2. Handle For interrupt generated by ADDR event */
	/* Note : When master mode : Address is sent */
	/*	When Slave mode   : Address matched with own address */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_ADDR);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp3){
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <I2C_EV_IRQHandling+0x82>
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <I2C_EV_IRQHandling+0x82>
		/* clear ADDR flag  */
		I2C_ClearADDRFlag(pI2CHandle);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fe2e 	bl	80011e4 <I2C_ClearADDRFlag>

	}


	/* 3. Handle For interrupt generated by BTF(Byte Transfer Finished) event */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_BTF);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp3){
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00c      	beq.n	80015b4 <I2C_EV_IRQHandling+0xae>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d009      	beq.n	80015b4 <I2C_EV_IRQHandling+0xae>
		/* BTF flag is set */
		if(pI2CHandle -> pI2Cx ->SR2 & (1 << I2C_SR2_MSL)){
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <I2C_EV_IRQHandling+0xae>
			/* device in master mode data transmission */
			I2C_MasterHandleBTFInterrupt(pI2CHandle);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff feaa 	bl	8001308 <I2C_MasterHandleBTFInterrupt>
	}


	/* 4. Handle For interrupt generated by STOPF event */
	/* Note : Stop detection flag is applicable only slave mode . For master this flag will never be set */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_STOPF);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp3){
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <I2C_EV_IRQHandling+0xda>
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d009      	beq.n	80015e0 <I2C_EV_IRQHandling+0xda>
		/* STOPF flag is set */
		/* Clear STOPF flag  ie read SR1 folloerd by write CR1 regs*/
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	601a      	str	r2, [r3, #0]

		/*Notify the app that STOPF generated by master */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 80015d8:	2102      	movs	r1, #2
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7fe ff7a 	bl	80004d4 <I2C_ApplicationEventCallback>

	}


	/* 5. Handle For interrupt generated by TXE event */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_TXE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ea:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2 && temp3){
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01b      	beq.n	800162a <I2C_EV_IRQHandling+0x124>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d018      	beq.n	800162a <I2C_EV_IRQHandling+0x124>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d015      	beq.n	800162a <I2C_EV_IRQHandling+0x124>
		/* TXE flag is set */
		/*chk for device mode */
		if(pI2CHandle -> pI2Cx ->SR2 & (1 << I2C_SR2_MSL)){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <I2C_EV_IRQHandling+0x10e>
			/* device in master mode data transmission */
			I2C_MasterHandleTXEInterrupt(pI2CHandle);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fe5a 	bl	80012c6 <I2C_MasterHandleTXEInterrupt>
 8001612:	e00a      	b.n	800162a <I2C_EV_IRQHandling+0x124>
		}
		else{
			/* devive is in slave mode */
			/* chk if the device is in transmit mode */
			if(pI2CHandle -> pI2Cx -> SR2 & (1 << I2C_SR2_TRA)){
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <I2C_EV_IRQHandling+0x124>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8001622:	2108      	movs	r1, #8
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7fe ff55 	bl	80004d4 <I2C_ApplicationEventCallback>

	}


	/* 6. Handle For interrupt generated by RXNE event */
	temp3 = pI2CHandle -> pI2Cx -> SR1 & (1 << I2C_SR1_RXNE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001634:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2 && temp3){
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <I2C_EV_IRQHandling+0x16e>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d018      	beq.n	8001674 <I2C_EV_IRQHandling+0x16e>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d015      	beq.n	8001674 <I2C_EV_IRQHandling+0x16e>
		/* RXNE flag is set */
		/*chk for device mode */
		if(pI2CHandle -> pI2Cx ->SR2 & (1 << I2C_SR2_MSL)){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <I2C_EV_IRQHandling+0x158>
			/* device in master mode data reception */
			I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fde9 	bl	800122e <I2C_MasterHandleRXNEInterrupt>


	}


}
 800165c:	e00a      	b.n	8001674 <I2C_EV_IRQHandling+0x16e>
			if(!(pI2CHandle -> pI2Cx -> SR2 & (1 << I2C_SR2_TRA))){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d103      	bne.n	8001674 <I2C_EV_IRQHandling+0x16e>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 800166c:	2109      	movs	r1, #9
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7fe ff30 	bl	80004d4 <I2C_ApplicationEventCallback>
}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <I2C_ER_IRQHandling>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

	/*Know the status of  ITERREN control bit in the CR2 */
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168e:	60fb      	str	r3, [r7, #12]


	/*Check for Bus error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00e      	beq.n	80016c0 <I2C_ER_IRQHandling+0x44>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00b      	beq.n	80016c0 <I2C_ER_IRQHandling+0x44>
	{
		/* This is Bus error */
		/* clear the buss error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016b6:	615a      	str	r2, [r3, #20]

	   /* notify the application about the error */
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80016b8:	2103      	movs	r1, #3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7fe ff0a 	bl	80004d4 <I2C_ApplicationEventCallback>
	}

	/* Check for arbitration lost error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016ca:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00e      	beq.n	80016f0 <I2C_ER_IRQHandling+0x74>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00b      	beq.n	80016f0 <I2C_ER_IRQHandling+0x74>
	{
		/*This is arbitration lost error*/
		/* clear the arbitration lost error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016e6:	615a      	str	r2, [r3, #20]

		/* notify the application about the error */
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 80016e8:	2104      	movs	r1, #4
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7fe fef2 	bl	80004d4 <I2C_ApplicationEventCallback>
	}

	/* Check for ACK failure  error */

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016fa:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00e      	beq.n	8001720 <I2C_ER_IRQHandling+0xa4>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <I2C_ER_IRQHandling+0xa4>
	{
		/* This is ACK failure error */
		/* clear the ACK failure error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001716:	615a      	str	r2, [r3, #20]

		/* notify the application about the error */
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001718:	2105      	movs	r1, #5
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe feda 	bl	80004d4 <I2C_ApplicationEventCallback>
	}

	/* Check for Overrun/underrun error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800172a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00e      	beq.n	8001750 <I2C_ER_IRQHandling+0xd4>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <I2C_ER_IRQHandling+0xd4>
	{
		/* This is Overrun/underrun */
		/* clear the Overrun/underrun error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001746:	615a      	str	r2, [r3, #20]

		/* notify the application about the error */
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001748:	2106      	movs	r1, #6
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe fec2 	bl	80004d4 <I2C_ApplicationEventCallback>
	}

	/* Check for Time out error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00e      	beq.n	8001780 <I2C_ER_IRQHandling+0x104>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00b      	beq.n	8001780 <I2C_ER_IRQHandling+0x104>
	{
		/* This is Time out error */
		/* clear the Time out error flag */
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001776:	615a      	str	r2, [r3, #20]

		/* notify the application about the error */
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8001778:	2107      	movs	r1, #7
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe feaa 	bl	80004d4 <I2C_ApplicationEventCallback>
	}



}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <std>:
 8001788:	2300      	movs	r3, #0
 800178a:	b510      	push	{r4, lr}
 800178c:	4604      	mov	r4, r0
 800178e:	e9c0 3300 	strd	r3, r3, [r0]
 8001792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001796:	6083      	str	r3, [r0, #8]
 8001798:	8181      	strh	r1, [r0, #12]
 800179a:	6643      	str	r3, [r0, #100]	@ 0x64
 800179c:	81c2      	strh	r2, [r0, #14]
 800179e:	6183      	str	r3, [r0, #24]
 80017a0:	4619      	mov	r1, r3
 80017a2:	2208      	movs	r2, #8
 80017a4:	305c      	adds	r0, #92	@ 0x5c
 80017a6:	f000 f9f9 	bl	8001b9c <memset>
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <std+0x58>)
 80017ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <std+0x5c>)
 80017b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <std+0x60>)
 80017b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80017b6:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <std+0x64>)
 80017b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <std+0x68>)
 80017bc:	6224      	str	r4, [r4, #32]
 80017be:	429c      	cmp	r4, r3
 80017c0:	d006      	beq.n	80017d0 <std+0x48>
 80017c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80017c6:	4294      	cmp	r4, r2
 80017c8:	d002      	beq.n	80017d0 <std+0x48>
 80017ca:	33d0      	adds	r3, #208	@ 0xd0
 80017cc:	429c      	cmp	r4, r3
 80017ce:	d105      	bne.n	80017dc <std+0x54>
 80017d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80017d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d8:	f000 ba58 	b.w	8001c8c <__retarget_lock_init_recursive>
 80017dc:	bd10      	pop	{r4, pc}
 80017de:	bf00      	nop
 80017e0:	080019ed 	.word	0x080019ed
 80017e4:	08001a0f 	.word	0x08001a0f
 80017e8:	08001a47 	.word	0x08001a47
 80017ec:	08001a6b 	.word	0x08001a6b
 80017f0:	200000e8 	.word	0x200000e8

080017f4 <stdio_exit_handler>:
 80017f4:	4a02      	ldr	r2, [pc, #8]	@ (8001800 <stdio_exit_handler+0xc>)
 80017f6:	4903      	ldr	r1, [pc, #12]	@ (8001804 <stdio_exit_handler+0x10>)
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <stdio_exit_handler+0x14>)
 80017fa:	f000 b869 	b.w	80018d0 <_fwalk_sglue>
 80017fe:	bf00      	nop
 8001800:	20000018 	.word	0x20000018
 8001804:	0800251d 	.word	0x0800251d
 8001808:	20000028 	.word	0x20000028

0800180c <cleanup_stdio>:
 800180c:	6841      	ldr	r1, [r0, #4]
 800180e:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <cleanup_stdio+0x34>)
 8001810:	4299      	cmp	r1, r3
 8001812:	b510      	push	{r4, lr}
 8001814:	4604      	mov	r4, r0
 8001816:	d001      	beq.n	800181c <cleanup_stdio+0x10>
 8001818:	f000 fe80 	bl	800251c <_fflush_r>
 800181c:	68a1      	ldr	r1, [r4, #8]
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <cleanup_stdio+0x38>)
 8001820:	4299      	cmp	r1, r3
 8001822:	d002      	beq.n	800182a <cleanup_stdio+0x1e>
 8001824:	4620      	mov	r0, r4
 8001826:	f000 fe79 	bl	800251c <_fflush_r>
 800182a:	68e1      	ldr	r1, [r4, #12]
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <cleanup_stdio+0x3c>)
 800182e:	4299      	cmp	r1, r3
 8001830:	d004      	beq.n	800183c <cleanup_stdio+0x30>
 8001832:	4620      	mov	r0, r4
 8001834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001838:	f000 be70 	b.w	800251c <_fflush_r>
 800183c:	bd10      	pop	{r4, pc}
 800183e:	bf00      	nop
 8001840:	200000e8 	.word	0x200000e8
 8001844:	20000150 	.word	0x20000150
 8001848:	200001b8 	.word	0x200001b8

0800184c <global_stdio_init.part.0>:
 800184c:	b510      	push	{r4, lr}
 800184e:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <global_stdio_init.part.0+0x30>)
 8001850:	4c0b      	ldr	r4, [pc, #44]	@ (8001880 <global_stdio_init.part.0+0x34>)
 8001852:	4a0c      	ldr	r2, [pc, #48]	@ (8001884 <global_stdio_init.part.0+0x38>)
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	4620      	mov	r0, r4
 8001858:	2200      	movs	r2, #0
 800185a:	2104      	movs	r1, #4
 800185c:	f7ff ff94 	bl	8001788 <std>
 8001860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001864:	2201      	movs	r2, #1
 8001866:	2109      	movs	r1, #9
 8001868:	f7ff ff8e 	bl	8001788 <std>
 800186c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001870:	2202      	movs	r2, #2
 8001872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001876:	2112      	movs	r1, #18
 8001878:	f7ff bf86 	b.w	8001788 <std>
 800187c:	20000220 	.word	0x20000220
 8001880:	200000e8 	.word	0x200000e8
 8001884:	080017f5 	.word	0x080017f5

08001888 <__sfp_lock_acquire>:
 8001888:	4801      	ldr	r0, [pc, #4]	@ (8001890 <__sfp_lock_acquire+0x8>)
 800188a:	f000 ba00 	b.w	8001c8e <__retarget_lock_acquire_recursive>
 800188e:	bf00      	nop
 8001890:	20000229 	.word	0x20000229

08001894 <__sfp_lock_release>:
 8001894:	4801      	ldr	r0, [pc, #4]	@ (800189c <__sfp_lock_release+0x8>)
 8001896:	f000 b9fb 	b.w	8001c90 <__retarget_lock_release_recursive>
 800189a:	bf00      	nop
 800189c:	20000229 	.word	0x20000229

080018a0 <__sinit>:
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	f7ff fff0 	bl	8001888 <__sfp_lock_acquire>
 80018a8:	6a23      	ldr	r3, [r4, #32]
 80018aa:	b11b      	cbz	r3, 80018b4 <__sinit+0x14>
 80018ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018b0:	f7ff bff0 	b.w	8001894 <__sfp_lock_release>
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__sinit+0x28>)
 80018b6:	6223      	str	r3, [r4, #32]
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <__sinit+0x2c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f5      	bne.n	80018ac <__sinit+0xc>
 80018c0:	f7ff ffc4 	bl	800184c <global_stdio_init.part.0>
 80018c4:	e7f2      	b.n	80018ac <__sinit+0xc>
 80018c6:	bf00      	nop
 80018c8:	0800180d 	.word	0x0800180d
 80018cc:	20000220 	.word	0x20000220

080018d0 <_fwalk_sglue>:
 80018d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018d4:	4607      	mov	r7, r0
 80018d6:	4688      	mov	r8, r1
 80018d8:	4614      	mov	r4, r2
 80018da:	2600      	movs	r6, #0
 80018dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018e0:	f1b9 0901 	subs.w	r9, r9, #1
 80018e4:	d505      	bpl.n	80018f2 <_fwalk_sglue+0x22>
 80018e6:	6824      	ldr	r4, [r4, #0]
 80018e8:	2c00      	cmp	r4, #0
 80018ea:	d1f7      	bne.n	80018dc <_fwalk_sglue+0xc>
 80018ec:	4630      	mov	r0, r6
 80018ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018f2:	89ab      	ldrh	r3, [r5, #12]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d907      	bls.n	8001908 <_fwalk_sglue+0x38>
 80018f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018fc:	3301      	adds	r3, #1
 80018fe:	d003      	beq.n	8001908 <_fwalk_sglue+0x38>
 8001900:	4629      	mov	r1, r5
 8001902:	4638      	mov	r0, r7
 8001904:	47c0      	blx	r8
 8001906:	4306      	orrs	r6, r0
 8001908:	3568      	adds	r5, #104	@ 0x68
 800190a:	e7e9      	b.n	80018e0 <_fwalk_sglue+0x10>

0800190c <iprintf>:
 800190c:	b40f      	push	{r0, r1, r2, r3}
 800190e:	b507      	push	{r0, r1, r2, lr}
 8001910:	4906      	ldr	r1, [pc, #24]	@ (800192c <iprintf+0x20>)
 8001912:	ab04      	add	r3, sp, #16
 8001914:	6808      	ldr	r0, [r1, #0]
 8001916:	f853 2b04 	ldr.w	r2, [r3], #4
 800191a:	6881      	ldr	r1, [r0, #8]
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	f000 fad9 	bl	8001ed4 <_vfiprintf_r>
 8001922:	b003      	add	sp, #12
 8001924:	f85d eb04 	ldr.w	lr, [sp], #4
 8001928:	b004      	add	sp, #16
 800192a:	4770      	bx	lr
 800192c:	20000024 	.word	0x20000024

08001930 <_puts_r>:
 8001930:	6a03      	ldr	r3, [r0, #32]
 8001932:	b570      	push	{r4, r5, r6, lr}
 8001934:	6884      	ldr	r4, [r0, #8]
 8001936:	4605      	mov	r5, r0
 8001938:	460e      	mov	r6, r1
 800193a:	b90b      	cbnz	r3, 8001940 <_puts_r+0x10>
 800193c:	f7ff ffb0 	bl	80018a0 <__sinit>
 8001940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001942:	07db      	lsls	r3, r3, #31
 8001944:	d405      	bmi.n	8001952 <_puts_r+0x22>
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	0598      	lsls	r0, r3, #22
 800194a:	d402      	bmi.n	8001952 <_puts_r+0x22>
 800194c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800194e:	f000 f99e 	bl	8001c8e <__retarget_lock_acquire_recursive>
 8001952:	89a3      	ldrh	r3, [r4, #12]
 8001954:	0719      	lsls	r1, r3, #28
 8001956:	d502      	bpl.n	800195e <_puts_r+0x2e>
 8001958:	6923      	ldr	r3, [r4, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d135      	bne.n	80019ca <_puts_r+0x9a>
 800195e:	4621      	mov	r1, r4
 8001960:	4628      	mov	r0, r5
 8001962:	f000 f8c5 	bl	8001af0 <__swsetup_r>
 8001966:	b380      	cbz	r0, 80019ca <_puts_r+0x9a>
 8001968:	f04f 35ff 	mov.w	r5, #4294967295
 800196c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800196e:	07da      	lsls	r2, r3, #31
 8001970:	d405      	bmi.n	800197e <_puts_r+0x4e>
 8001972:	89a3      	ldrh	r3, [r4, #12]
 8001974:	059b      	lsls	r3, r3, #22
 8001976:	d402      	bmi.n	800197e <_puts_r+0x4e>
 8001978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800197a:	f000 f989 	bl	8001c90 <__retarget_lock_release_recursive>
 800197e:	4628      	mov	r0, r5
 8001980:	bd70      	pop	{r4, r5, r6, pc}
 8001982:	2b00      	cmp	r3, #0
 8001984:	da04      	bge.n	8001990 <_puts_r+0x60>
 8001986:	69a2      	ldr	r2, [r4, #24]
 8001988:	429a      	cmp	r2, r3
 800198a:	dc17      	bgt.n	80019bc <_puts_r+0x8c>
 800198c:	290a      	cmp	r1, #10
 800198e:	d015      	beq.n	80019bc <_puts_r+0x8c>
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	6022      	str	r2, [r4, #0]
 8001996:	7019      	strb	r1, [r3, #0]
 8001998:	68a3      	ldr	r3, [r4, #8]
 800199a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800199e:	3b01      	subs	r3, #1
 80019a0:	60a3      	str	r3, [r4, #8]
 80019a2:	2900      	cmp	r1, #0
 80019a4:	d1ed      	bne.n	8001982 <_puts_r+0x52>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da11      	bge.n	80019ce <_puts_r+0x9e>
 80019aa:	4622      	mov	r2, r4
 80019ac:	210a      	movs	r1, #10
 80019ae:	4628      	mov	r0, r5
 80019b0:	f000 f85f 	bl	8001a72 <__swbuf_r>
 80019b4:	3001      	adds	r0, #1
 80019b6:	d0d7      	beq.n	8001968 <_puts_r+0x38>
 80019b8:	250a      	movs	r5, #10
 80019ba:	e7d7      	b.n	800196c <_puts_r+0x3c>
 80019bc:	4622      	mov	r2, r4
 80019be:	4628      	mov	r0, r5
 80019c0:	f000 f857 	bl	8001a72 <__swbuf_r>
 80019c4:	3001      	adds	r0, #1
 80019c6:	d1e7      	bne.n	8001998 <_puts_r+0x68>
 80019c8:	e7ce      	b.n	8001968 <_puts_r+0x38>
 80019ca:	3e01      	subs	r6, #1
 80019cc:	e7e4      	b.n	8001998 <_puts_r+0x68>
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	6022      	str	r2, [r4, #0]
 80019d4:	220a      	movs	r2, #10
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e7ee      	b.n	80019b8 <_puts_r+0x88>
	...

080019dc <puts>:
 80019dc:	4b02      	ldr	r3, [pc, #8]	@ (80019e8 <puts+0xc>)
 80019de:	4601      	mov	r1, r0
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	f7ff bfa5 	b.w	8001930 <_puts_r>
 80019e6:	bf00      	nop
 80019e8:	20000024 	.word	0x20000024

080019ec <__sread>:
 80019ec:	b510      	push	{r4, lr}
 80019ee:	460c      	mov	r4, r1
 80019f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019f4:	f000 f8fc 	bl	8001bf0 <_read_r>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	bfab      	itete	ge
 80019fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80019fe:	89a3      	ldrhlt	r3, [r4, #12]
 8001a00:	181b      	addge	r3, r3, r0
 8001a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001a06:	bfac      	ite	ge
 8001a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001a0a:	81a3      	strhlt	r3, [r4, #12]
 8001a0c:	bd10      	pop	{r4, pc}

08001a0e <__swrite>:
 8001a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a12:	461f      	mov	r7, r3
 8001a14:	898b      	ldrh	r3, [r1, #12]
 8001a16:	05db      	lsls	r3, r3, #23
 8001a18:	4605      	mov	r5, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4616      	mov	r6, r2
 8001a1e:	d505      	bpl.n	8001a2c <__swrite+0x1e>
 8001a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a24:	2302      	movs	r3, #2
 8001a26:	2200      	movs	r2, #0
 8001a28:	f000 f8d0 	bl	8001bcc <_lseek_r>
 8001a2c:	89a3      	ldrh	r3, [r4, #12]
 8001a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a36:	81a3      	strh	r3, [r4, #12]
 8001a38:	4632      	mov	r2, r6
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a42:	f000 b8e7 	b.w	8001c14 <_write_r>

08001a46 <__sseek>:
 8001a46:	b510      	push	{r4, lr}
 8001a48:	460c      	mov	r4, r1
 8001a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a4e:	f000 f8bd 	bl	8001bcc <_lseek_r>
 8001a52:	1c43      	adds	r3, r0, #1
 8001a54:	89a3      	ldrh	r3, [r4, #12]
 8001a56:	bf15      	itete	ne
 8001a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a62:	81a3      	strheq	r3, [r4, #12]
 8001a64:	bf18      	it	ne
 8001a66:	81a3      	strhne	r3, [r4, #12]
 8001a68:	bd10      	pop	{r4, pc}

08001a6a <__sclose>:
 8001a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a6e:	f000 b89d 	b.w	8001bac <_close_r>

08001a72 <__swbuf_r>:
 8001a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a74:	460e      	mov	r6, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	4605      	mov	r5, r0
 8001a7a:	b118      	cbz	r0, 8001a84 <__swbuf_r+0x12>
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	b90b      	cbnz	r3, 8001a84 <__swbuf_r+0x12>
 8001a80:	f7ff ff0e 	bl	80018a0 <__sinit>
 8001a84:	69a3      	ldr	r3, [r4, #24]
 8001a86:	60a3      	str	r3, [r4, #8]
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	071a      	lsls	r2, r3, #28
 8001a8c:	d501      	bpl.n	8001a92 <__swbuf_r+0x20>
 8001a8e:	6923      	ldr	r3, [r4, #16]
 8001a90:	b943      	cbnz	r3, 8001aa4 <__swbuf_r+0x32>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 f82b 	bl	8001af0 <__swsetup_r>
 8001a9a:	b118      	cbz	r0, 8001aa4 <__swbuf_r+0x32>
 8001a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	6922      	ldr	r2, [r4, #16]
 8001aa8:	1a98      	subs	r0, r3, r2
 8001aaa:	6963      	ldr	r3, [r4, #20]
 8001aac:	b2f6      	uxtb	r6, r6
 8001aae:	4283      	cmp	r3, r0
 8001ab0:	4637      	mov	r7, r6
 8001ab2:	dc05      	bgt.n	8001ac0 <__swbuf_r+0x4e>
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 fd30 	bl	800251c <_fflush_r>
 8001abc:	2800      	cmp	r0, #0
 8001abe:	d1ed      	bne.n	8001a9c <__swbuf_r+0x2a>
 8001ac0:	68a3      	ldr	r3, [r4, #8]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	60a3      	str	r3, [r4, #8]
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	6022      	str	r2, [r4, #0]
 8001acc:	701e      	strb	r6, [r3, #0]
 8001ace:	6962      	ldr	r2, [r4, #20]
 8001ad0:	1c43      	adds	r3, r0, #1
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d004      	beq.n	8001ae0 <__swbuf_r+0x6e>
 8001ad6:	89a3      	ldrh	r3, [r4, #12]
 8001ad8:	07db      	lsls	r3, r3, #31
 8001ada:	d5e1      	bpl.n	8001aa0 <__swbuf_r+0x2e>
 8001adc:	2e0a      	cmp	r6, #10
 8001ade:	d1df      	bne.n	8001aa0 <__swbuf_r+0x2e>
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f000 fd1a 	bl	800251c <_fflush_r>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d0d9      	beq.n	8001aa0 <__swbuf_r+0x2e>
 8001aec:	e7d6      	b.n	8001a9c <__swbuf_r+0x2a>
	...

08001af0 <__swsetup_r>:
 8001af0:	b538      	push	{r3, r4, r5, lr}
 8001af2:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <__swsetup_r+0xa8>)
 8001af4:	4605      	mov	r5, r0
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	460c      	mov	r4, r1
 8001afa:	b118      	cbz	r0, 8001b04 <__swsetup_r+0x14>
 8001afc:	6a03      	ldr	r3, [r0, #32]
 8001afe:	b90b      	cbnz	r3, 8001b04 <__swsetup_r+0x14>
 8001b00:	f7ff fece 	bl	80018a0 <__sinit>
 8001b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b08:	0719      	lsls	r1, r3, #28
 8001b0a:	d422      	bmi.n	8001b52 <__swsetup_r+0x62>
 8001b0c:	06da      	lsls	r2, r3, #27
 8001b0e:	d407      	bmi.n	8001b20 <__swsetup_r+0x30>
 8001b10:	2209      	movs	r2, #9
 8001b12:	602a      	str	r2, [r5, #0]
 8001b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b18:	81a3      	strh	r3, [r4, #12]
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1e:	e033      	b.n	8001b88 <__swsetup_r+0x98>
 8001b20:	0758      	lsls	r0, r3, #29
 8001b22:	d512      	bpl.n	8001b4a <__swsetup_r+0x5a>
 8001b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b26:	b141      	cbz	r1, 8001b3a <__swsetup_r+0x4a>
 8001b28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b2c:	4299      	cmp	r1, r3
 8001b2e:	d002      	beq.n	8001b36 <__swsetup_r+0x46>
 8001b30:	4628      	mov	r0, r5
 8001b32:	f000 f8af 	bl	8001c94 <_free_r>
 8001b36:	2300      	movs	r3, #0
 8001b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b40:	81a3      	strh	r3, [r4, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	6063      	str	r3, [r4, #4]
 8001b46:	6923      	ldr	r3, [r4, #16]
 8001b48:	6023      	str	r3, [r4, #0]
 8001b4a:	89a3      	ldrh	r3, [r4, #12]
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	81a3      	strh	r3, [r4, #12]
 8001b52:	6923      	ldr	r3, [r4, #16]
 8001b54:	b94b      	cbnz	r3, 8001b6a <__swsetup_r+0x7a>
 8001b56:	89a3      	ldrh	r3, [r4, #12]
 8001b58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b60:	d003      	beq.n	8001b6a <__swsetup_r+0x7a>
 8001b62:	4621      	mov	r1, r4
 8001b64:	4628      	mov	r0, r5
 8001b66:	f000 fd27 	bl	80025b8 <__smakebuf_r>
 8001b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b6e:	f013 0201 	ands.w	r2, r3, #1
 8001b72:	d00a      	beq.n	8001b8a <__swsetup_r+0x9a>
 8001b74:	2200      	movs	r2, #0
 8001b76:	60a2      	str	r2, [r4, #8]
 8001b78:	6962      	ldr	r2, [r4, #20]
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	61a2      	str	r2, [r4, #24]
 8001b7e:	6922      	ldr	r2, [r4, #16]
 8001b80:	b942      	cbnz	r2, 8001b94 <__swsetup_r+0xa4>
 8001b82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b86:	d1c5      	bne.n	8001b14 <__swsetup_r+0x24>
 8001b88:	bd38      	pop	{r3, r4, r5, pc}
 8001b8a:	0799      	lsls	r1, r3, #30
 8001b8c:	bf58      	it	pl
 8001b8e:	6962      	ldrpl	r2, [r4, #20]
 8001b90:	60a2      	str	r2, [r4, #8]
 8001b92:	e7f4      	b.n	8001b7e <__swsetup_r+0x8e>
 8001b94:	2000      	movs	r0, #0
 8001b96:	e7f7      	b.n	8001b88 <__swsetup_r+0x98>
 8001b98:	20000024 	.word	0x20000024

08001b9c <memset>:
 8001b9c:	4402      	add	r2, r0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d100      	bne.n	8001ba6 <memset+0xa>
 8001ba4:	4770      	bx	lr
 8001ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8001baa:	e7f9      	b.n	8001ba0 <memset+0x4>

08001bac <_close_r>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	4d06      	ldr	r5, [pc, #24]	@ (8001bc8 <_close_r+0x1c>)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	602b      	str	r3, [r5, #0]
 8001bb8:	f7fe fd1f 	bl	80005fa <_close>
 8001bbc:	1c43      	adds	r3, r0, #1
 8001bbe:	d102      	bne.n	8001bc6 <_close_r+0x1a>
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	b103      	cbz	r3, 8001bc6 <_close_r+0x1a>
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	20000224 	.word	0x20000224

08001bcc <_lseek_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4d07      	ldr	r5, [pc, #28]	@ (8001bec <_lseek_r+0x20>)
 8001bd0:	4604      	mov	r4, r0
 8001bd2:	4608      	mov	r0, r1
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	602a      	str	r2, [r5, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f7fe fd31 	bl	8000642 <_lseek>
 8001be0:	1c43      	adds	r3, r0, #1
 8001be2:	d102      	bne.n	8001bea <_lseek_r+0x1e>
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	b103      	cbz	r3, 8001bea <_lseek_r+0x1e>
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	20000224 	.word	0x20000224

08001bf0 <_read_r>:
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4d07      	ldr	r5, [pc, #28]	@ (8001c10 <_read_r+0x20>)
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	602a      	str	r2, [r5, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7fe fcc2 	bl	8000588 <_read>
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	d102      	bne.n	8001c0e <_read_r+0x1e>
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	b103      	cbz	r3, 8001c0e <_read_r+0x1e>
 8001c0c:	6023      	str	r3, [r4, #0]
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}
 8001c10:	20000224 	.word	0x20000224

08001c14 <_write_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4d07      	ldr	r5, [pc, #28]	@ (8001c34 <_write_r+0x20>)
 8001c18:	4604      	mov	r4, r0
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	602a      	str	r2, [r5, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7fe fccd 	bl	80005c2 <_write>
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	d102      	bne.n	8001c32 <_write_r+0x1e>
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	b103      	cbz	r3, 8001c32 <_write_r+0x1e>
 8001c30:	6023      	str	r3, [r4, #0]
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
 8001c34:	20000224 	.word	0x20000224

08001c38 <__errno>:
 8001c38:	4b01      	ldr	r3, [pc, #4]	@ (8001c40 <__errno+0x8>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000024 	.word	0x20000024

08001c44 <__libc_init_array>:
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	4d0d      	ldr	r5, [pc, #52]	@ (8001c7c <__libc_init_array+0x38>)
 8001c48:	4c0d      	ldr	r4, [pc, #52]	@ (8001c80 <__libc_init_array+0x3c>)
 8001c4a:	1b64      	subs	r4, r4, r5
 8001c4c:	10a4      	asrs	r4, r4, #2
 8001c4e:	2600      	movs	r6, #0
 8001c50:	42a6      	cmp	r6, r4
 8001c52:	d109      	bne.n	8001c68 <__libc_init_array+0x24>
 8001c54:	4d0b      	ldr	r5, [pc, #44]	@ (8001c84 <__libc_init_array+0x40>)
 8001c56:	4c0c      	ldr	r4, [pc, #48]	@ (8001c88 <__libc_init_array+0x44>)
 8001c58:	f000 fd1c 	bl	8002694 <_init>
 8001c5c:	1b64      	subs	r4, r4, r5
 8001c5e:	10a4      	asrs	r4, r4, #2
 8001c60:	2600      	movs	r6, #0
 8001c62:	42a6      	cmp	r6, r4
 8001c64:	d105      	bne.n	8001c72 <__libc_init_array+0x2e>
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c6c:	4798      	blx	r3
 8001c6e:	3601      	adds	r6, #1
 8001c70:	e7ee      	b.n	8001c50 <__libc_init_array+0xc>
 8001c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c76:	4798      	blx	r3
 8001c78:	3601      	adds	r6, #1
 8001c7a:	e7f2      	b.n	8001c62 <__libc_init_array+0x1e>
 8001c7c:	08002744 	.word	0x08002744
 8001c80:	08002744 	.word	0x08002744
 8001c84:	08002744 	.word	0x08002744
 8001c88:	08002748 	.word	0x08002748

08001c8c <__retarget_lock_init_recursive>:
 8001c8c:	4770      	bx	lr

08001c8e <__retarget_lock_acquire_recursive>:
 8001c8e:	4770      	bx	lr

08001c90 <__retarget_lock_release_recursive>:
 8001c90:	4770      	bx	lr
	...

08001c94 <_free_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4605      	mov	r5, r0
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d041      	beq.n	8001d20 <_free_r+0x8c>
 8001c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ca0:	1f0c      	subs	r4, r1, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bfb8      	it	lt
 8001ca6:	18e4      	addlt	r4, r4, r3
 8001ca8:	f000 f8e0 	bl	8001e6c <__malloc_lock>
 8001cac:	4a1d      	ldr	r2, [pc, #116]	@ (8001d24 <_free_r+0x90>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	b933      	cbnz	r3, 8001cc0 <_free_r+0x2c>
 8001cb2:	6063      	str	r3, [r4, #4]
 8001cb4:	6014      	str	r4, [r2, #0]
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cbc:	f000 b8dc 	b.w	8001e78 <__malloc_unlock>
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d908      	bls.n	8001cd6 <_free_r+0x42>
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	1821      	adds	r1, r4, r0
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	bf01      	itttt	eq
 8001ccc:	6819      	ldreq	r1, [r3, #0]
 8001cce:	685b      	ldreq	r3, [r3, #4]
 8001cd0:	1809      	addeq	r1, r1, r0
 8001cd2:	6021      	streq	r1, [r4, #0]
 8001cd4:	e7ed      	b.n	8001cb2 <_free_r+0x1e>
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	b10b      	cbz	r3, 8001ce0 <_free_r+0x4c>
 8001cdc:	42a3      	cmp	r3, r4
 8001cde:	d9fa      	bls.n	8001cd6 <_free_r+0x42>
 8001ce0:	6811      	ldr	r1, [r2, #0]
 8001ce2:	1850      	adds	r0, r2, r1
 8001ce4:	42a0      	cmp	r0, r4
 8001ce6:	d10b      	bne.n	8001d00 <_free_r+0x6c>
 8001ce8:	6820      	ldr	r0, [r4, #0]
 8001cea:	4401      	add	r1, r0
 8001cec:	1850      	adds	r0, r2, r1
 8001cee:	4283      	cmp	r3, r0
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	d1e0      	bne.n	8001cb6 <_free_r+0x22>
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	6053      	str	r3, [r2, #4]
 8001cfa:	4408      	add	r0, r1
 8001cfc:	6010      	str	r0, [r2, #0]
 8001cfe:	e7da      	b.n	8001cb6 <_free_r+0x22>
 8001d00:	d902      	bls.n	8001d08 <_free_r+0x74>
 8001d02:	230c      	movs	r3, #12
 8001d04:	602b      	str	r3, [r5, #0]
 8001d06:	e7d6      	b.n	8001cb6 <_free_r+0x22>
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	1821      	adds	r1, r4, r0
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	bf04      	itt	eq
 8001d10:	6819      	ldreq	r1, [r3, #0]
 8001d12:	685b      	ldreq	r3, [r3, #4]
 8001d14:	6063      	str	r3, [r4, #4]
 8001d16:	bf04      	itt	eq
 8001d18:	1809      	addeq	r1, r1, r0
 8001d1a:	6021      	streq	r1, [r4, #0]
 8001d1c:	6054      	str	r4, [r2, #4]
 8001d1e:	e7ca      	b.n	8001cb6 <_free_r+0x22>
 8001d20:	bd38      	pop	{r3, r4, r5, pc}
 8001d22:	bf00      	nop
 8001d24:	20000230 	.word	0x20000230

08001d28 <sbrk_aligned>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8001d68 <sbrk_aligned+0x40>)
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	6831      	ldr	r1, [r6, #0]
 8001d30:	4605      	mov	r5, r0
 8001d32:	b911      	cbnz	r1, 8001d3a <sbrk_aligned+0x12>
 8001d34:	f000 fc9e 	bl	8002674 <_sbrk_r>
 8001d38:	6030      	str	r0, [r6, #0]
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f000 fc99 	bl	8002674 <_sbrk_r>
 8001d42:	1c43      	adds	r3, r0, #1
 8001d44:	d103      	bne.n	8001d4e <sbrk_aligned+0x26>
 8001d46:	f04f 34ff 	mov.w	r4, #4294967295
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
 8001d4e:	1cc4      	adds	r4, r0, #3
 8001d50:	f024 0403 	bic.w	r4, r4, #3
 8001d54:	42a0      	cmp	r0, r4
 8001d56:	d0f8      	beq.n	8001d4a <sbrk_aligned+0x22>
 8001d58:	1a21      	subs	r1, r4, r0
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	f000 fc8a 	bl	8002674 <_sbrk_r>
 8001d60:	3001      	adds	r0, #1
 8001d62:	d1f2      	bne.n	8001d4a <sbrk_aligned+0x22>
 8001d64:	e7ef      	b.n	8001d46 <sbrk_aligned+0x1e>
 8001d66:	bf00      	nop
 8001d68:	2000022c 	.word	0x2000022c

08001d6c <_malloc_r>:
 8001d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d70:	1ccd      	adds	r5, r1, #3
 8001d72:	f025 0503 	bic.w	r5, r5, #3
 8001d76:	3508      	adds	r5, #8
 8001d78:	2d0c      	cmp	r5, #12
 8001d7a:	bf38      	it	cc
 8001d7c:	250c      	movcc	r5, #12
 8001d7e:	2d00      	cmp	r5, #0
 8001d80:	4606      	mov	r6, r0
 8001d82:	db01      	blt.n	8001d88 <_malloc_r+0x1c>
 8001d84:	42a9      	cmp	r1, r5
 8001d86:	d904      	bls.n	8001d92 <_malloc_r+0x26>
 8001d88:	230c      	movs	r3, #12
 8001d8a:	6033      	str	r3, [r6, #0]
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e68 <_malloc_r+0xfc>
 8001d96:	f000 f869 	bl	8001e6c <__malloc_lock>
 8001d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d9e:	461c      	mov	r4, r3
 8001da0:	bb44      	cbnz	r4, 8001df4 <_malloc_r+0x88>
 8001da2:	4629      	mov	r1, r5
 8001da4:	4630      	mov	r0, r6
 8001da6:	f7ff ffbf 	bl	8001d28 <sbrk_aligned>
 8001daa:	1c43      	adds	r3, r0, #1
 8001dac:	4604      	mov	r4, r0
 8001dae:	d158      	bne.n	8001e62 <_malloc_r+0xf6>
 8001db0:	f8d8 4000 	ldr.w	r4, [r8]
 8001db4:	4627      	mov	r7, r4
 8001db6:	2f00      	cmp	r7, #0
 8001db8:	d143      	bne.n	8001e42 <_malloc_r+0xd6>
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	d04b      	beq.n	8001e56 <_malloc_r+0xea>
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	4639      	mov	r1, r7
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	eb04 0903 	add.w	r9, r4, r3
 8001dc8:	f000 fc54 	bl	8002674 <_sbrk_r>
 8001dcc:	4581      	cmp	r9, r0
 8001dce:	d142      	bne.n	8001e56 <_malloc_r+0xea>
 8001dd0:	6821      	ldr	r1, [r4, #0]
 8001dd2:	1a6d      	subs	r5, r5, r1
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	4630      	mov	r0, r6
 8001dd8:	f7ff ffa6 	bl	8001d28 <sbrk_aligned>
 8001ddc:	3001      	adds	r0, #1
 8001dde:	d03a      	beq.n	8001e56 <_malloc_r+0xea>
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	442b      	add	r3, r5
 8001de4:	6023      	str	r3, [r4, #0]
 8001de6:	f8d8 3000 	ldr.w	r3, [r8]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	bb62      	cbnz	r2, 8001e48 <_malloc_r+0xdc>
 8001dee:	f8c8 7000 	str.w	r7, [r8]
 8001df2:	e00f      	b.n	8001e14 <_malloc_r+0xa8>
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	1b52      	subs	r2, r2, r5
 8001df8:	d420      	bmi.n	8001e3c <_malloc_r+0xd0>
 8001dfa:	2a0b      	cmp	r2, #11
 8001dfc:	d917      	bls.n	8001e2e <_malloc_r+0xc2>
 8001dfe:	1961      	adds	r1, r4, r5
 8001e00:	42a3      	cmp	r3, r4
 8001e02:	6025      	str	r5, [r4, #0]
 8001e04:	bf18      	it	ne
 8001e06:	6059      	strne	r1, [r3, #4]
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	bf08      	it	eq
 8001e0c:	f8c8 1000 	streq.w	r1, [r8]
 8001e10:	5162      	str	r2, [r4, r5]
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	4630      	mov	r0, r6
 8001e16:	f000 f82f 	bl	8001e78 <__malloc_unlock>
 8001e1a:	f104 000b 	add.w	r0, r4, #11
 8001e1e:	1d23      	adds	r3, r4, #4
 8001e20:	f020 0007 	bic.w	r0, r0, #7
 8001e24:	1ac2      	subs	r2, r0, r3
 8001e26:	bf1c      	itt	ne
 8001e28:	1a1b      	subne	r3, r3, r0
 8001e2a:	50a3      	strne	r3, [r4, r2]
 8001e2c:	e7af      	b.n	8001d8e <_malloc_r+0x22>
 8001e2e:	6862      	ldr	r2, [r4, #4]
 8001e30:	42a3      	cmp	r3, r4
 8001e32:	bf0c      	ite	eq
 8001e34:	f8c8 2000 	streq.w	r2, [r8]
 8001e38:	605a      	strne	r2, [r3, #4]
 8001e3a:	e7eb      	b.n	8001e14 <_malloc_r+0xa8>
 8001e3c:	4623      	mov	r3, r4
 8001e3e:	6864      	ldr	r4, [r4, #4]
 8001e40:	e7ae      	b.n	8001da0 <_malloc_r+0x34>
 8001e42:	463c      	mov	r4, r7
 8001e44:	687f      	ldr	r7, [r7, #4]
 8001e46:	e7b6      	b.n	8001db6 <_malloc_r+0x4a>
 8001e48:	461a      	mov	r2, r3
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	d1fb      	bne.n	8001e48 <_malloc_r+0xdc>
 8001e50:	2300      	movs	r3, #0
 8001e52:	6053      	str	r3, [r2, #4]
 8001e54:	e7de      	b.n	8001e14 <_malloc_r+0xa8>
 8001e56:	230c      	movs	r3, #12
 8001e58:	6033      	str	r3, [r6, #0]
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f000 f80c 	bl	8001e78 <__malloc_unlock>
 8001e60:	e794      	b.n	8001d8c <_malloc_r+0x20>
 8001e62:	6005      	str	r5, [r0, #0]
 8001e64:	e7d6      	b.n	8001e14 <_malloc_r+0xa8>
 8001e66:	bf00      	nop
 8001e68:	20000230 	.word	0x20000230

08001e6c <__malloc_lock>:
 8001e6c:	4801      	ldr	r0, [pc, #4]	@ (8001e74 <__malloc_lock+0x8>)
 8001e6e:	f7ff bf0e 	b.w	8001c8e <__retarget_lock_acquire_recursive>
 8001e72:	bf00      	nop
 8001e74:	20000228 	.word	0x20000228

08001e78 <__malloc_unlock>:
 8001e78:	4801      	ldr	r0, [pc, #4]	@ (8001e80 <__malloc_unlock+0x8>)
 8001e7a:	f7ff bf09 	b.w	8001c90 <__retarget_lock_release_recursive>
 8001e7e:	bf00      	nop
 8001e80:	20000228 	.word	0x20000228

08001e84 <__sfputc_r>:
 8001e84:	6893      	ldr	r3, [r2, #8]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	b410      	push	{r4}
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	da07      	bge.n	8001ea0 <__sfputc_r+0x1c>
 8001e90:	6994      	ldr	r4, [r2, #24]
 8001e92:	42a3      	cmp	r3, r4
 8001e94:	db01      	blt.n	8001e9a <__sfputc_r+0x16>
 8001e96:	290a      	cmp	r1, #10
 8001e98:	d102      	bne.n	8001ea0 <__sfputc_r+0x1c>
 8001e9a:	bc10      	pop	{r4}
 8001e9c:	f7ff bde9 	b.w	8001a72 <__swbuf_r>
 8001ea0:	6813      	ldr	r3, [r2, #0]
 8001ea2:	1c58      	adds	r0, r3, #1
 8001ea4:	6010      	str	r0, [r2, #0]
 8001ea6:	7019      	strb	r1, [r3, #0]
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	bc10      	pop	{r4}
 8001eac:	4770      	bx	lr

08001eae <__sfputs_r>:
 8001eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb0:	4606      	mov	r6, r0
 8001eb2:	460f      	mov	r7, r1
 8001eb4:	4614      	mov	r4, r2
 8001eb6:	18d5      	adds	r5, r2, r3
 8001eb8:	42ac      	cmp	r4, r5
 8001eba:	d101      	bne.n	8001ec0 <__sfputs_r+0x12>
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	e007      	b.n	8001ed0 <__sfputs_r+0x22>
 8001ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ec4:	463a      	mov	r2, r7
 8001ec6:	4630      	mov	r0, r6
 8001ec8:	f7ff ffdc 	bl	8001e84 <__sfputc_r>
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	d1f3      	bne.n	8001eb8 <__sfputs_r+0xa>
 8001ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ed4 <_vfiprintf_r>:
 8001ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed8:	460d      	mov	r5, r1
 8001eda:	b09d      	sub	sp, #116	@ 0x74
 8001edc:	4614      	mov	r4, r2
 8001ede:	4698      	mov	r8, r3
 8001ee0:	4606      	mov	r6, r0
 8001ee2:	b118      	cbz	r0, 8001eec <_vfiprintf_r+0x18>
 8001ee4:	6a03      	ldr	r3, [r0, #32]
 8001ee6:	b90b      	cbnz	r3, 8001eec <_vfiprintf_r+0x18>
 8001ee8:	f7ff fcda 	bl	80018a0 <__sinit>
 8001eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001eee:	07d9      	lsls	r1, r3, #31
 8001ef0:	d405      	bmi.n	8001efe <_vfiprintf_r+0x2a>
 8001ef2:	89ab      	ldrh	r3, [r5, #12]
 8001ef4:	059a      	lsls	r2, r3, #22
 8001ef6:	d402      	bmi.n	8001efe <_vfiprintf_r+0x2a>
 8001ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001efa:	f7ff fec8 	bl	8001c8e <__retarget_lock_acquire_recursive>
 8001efe:	89ab      	ldrh	r3, [r5, #12]
 8001f00:	071b      	lsls	r3, r3, #28
 8001f02:	d501      	bpl.n	8001f08 <_vfiprintf_r+0x34>
 8001f04:	692b      	ldr	r3, [r5, #16]
 8001f06:	b99b      	cbnz	r3, 8001f30 <_vfiprintf_r+0x5c>
 8001f08:	4629      	mov	r1, r5
 8001f0a:	4630      	mov	r0, r6
 8001f0c:	f7ff fdf0 	bl	8001af0 <__swsetup_r>
 8001f10:	b170      	cbz	r0, 8001f30 <_vfiprintf_r+0x5c>
 8001f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f14:	07dc      	lsls	r4, r3, #31
 8001f16:	d504      	bpl.n	8001f22 <_vfiprintf_r+0x4e>
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	b01d      	add	sp, #116	@ 0x74
 8001f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f22:	89ab      	ldrh	r3, [r5, #12]
 8001f24:	0598      	lsls	r0, r3, #22
 8001f26:	d4f7      	bmi.n	8001f18 <_vfiprintf_r+0x44>
 8001f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f2a:	f7ff feb1 	bl	8001c90 <__retarget_lock_release_recursive>
 8001f2e:	e7f3      	b.n	8001f18 <_vfiprintf_r+0x44>
 8001f30:	2300      	movs	r3, #0
 8001f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f34:	2320      	movs	r3, #32
 8001f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f3e:	2330      	movs	r3, #48	@ 0x30
 8001f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80020f0 <_vfiprintf_r+0x21c>
 8001f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f48:	f04f 0901 	mov.w	r9, #1
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	469a      	mov	sl, r3
 8001f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f54:	b10a      	cbz	r2, 8001f5a <_vfiprintf_r+0x86>
 8001f56:	2a25      	cmp	r2, #37	@ 0x25
 8001f58:	d1f9      	bne.n	8001f4e <_vfiprintf_r+0x7a>
 8001f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8001f5e:	d00b      	beq.n	8001f78 <_vfiprintf_r+0xa4>
 8001f60:	465b      	mov	r3, fp
 8001f62:	4622      	mov	r2, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	4630      	mov	r0, r6
 8001f68:	f7ff ffa1 	bl	8001eae <__sfputs_r>
 8001f6c:	3001      	adds	r0, #1
 8001f6e:	f000 80a7 	beq.w	80020c0 <_vfiprintf_r+0x1ec>
 8001f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f74:	445a      	add	r2, fp
 8001f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f78:	f89a 3000 	ldrb.w	r3, [sl]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 809f 	beq.w	80020c0 <_vfiprintf_r+0x1ec>
 8001f82:	2300      	movs	r3, #0
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f8c:	f10a 0a01 	add.w	sl, sl, #1
 8001f90:	9304      	str	r3, [sp, #16]
 8001f92:	9307      	str	r3, [sp, #28]
 8001f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f9a:	4654      	mov	r4, sl
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fa2:	4853      	ldr	r0, [pc, #332]	@ (80020f0 <_vfiprintf_r+0x21c>)
 8001fa4:	f7fe f934 	bl	8000210 <memchr>
 8001fa8:	9a04      	ldr	r2, [sp, #16]
 8001faa:	b9d8      	cbnz	r0, 8001fe4 <_vfiprintf_r+0x110>
 8001fac:	06d1      	lsls	r1, r2, #27
 8001fae:	bf44      	itt	mi
 8001fb0:	2320      	movmi	r3, #32
 8001fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fb6:	0713      	lsls	r3, r2, #28
 8001fb8:	bf44      	itt	mi
 8001fba:	232b      	movmi	r3, #43	@ 0x2b
 8001fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8001fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fc6:	d015      	beq.n	8001ff4 <_vfiprintf_r+0x120>
 8001fc8:	9a07      	ldr	r2, [sp, #28]
 8001fca:	4654      	mov	r4, sl
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f04f 0c0a 	mov.w	ip, #10
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fd8:	3b30      	subs	r3, #48	@ 0x30
 8001fda:	2b09      	cmp	r3, #9
 8001fdc:	d94b      	bls.n	8002076 <_vfiprintf_r+0x1a2>
 8001fde:	b1b0      	cbz	r0, 800200e <_vfiprintf_r+0x13a>
 8001fe0:	9207      	str	r2, [sp, #28]
 8001fe2:	e014      	b.n	800200e <_vfiprintf_r+0x13a>
 8001fe4:	eba0 0308 	sub.w	r3, r0, r8
 8001fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	9304      	str	r3, [sp, #16]
 8001ff0:	46a2      	mov	sl, r4
 8001ff2:	e7d2      	b.n	8001f9a <_vfiprintf_r+0xc6>
 8001ff4:	9b03      	ldr	r3, [sp, #12]
 8001ff6:	1d19      	adds	r1, r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	9103      	str	r1, [sp, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bfbb      	ittet	lt
 8002000:	425b      	neglt	r3, r3
 8002002:	f042 0202 	orrlt.w	r2, r2, #2
 8002006:	9307      	strge	r3, [sp, #28]
 8002008:	9307      	strlt	r3, [sp, #28]
 800200a:	bfb8      	it	lt
 800200c:	9204      	strlt	r2, [sp, #16]
 800200e:	7823      	ldrb	r3, [r4, #0]
 8002010:	2b2e      	cmp	r3, #46	@ 0x2e
 8002012:	d10a      	bne.n	800202a <_vfiprintf_r+0x156>
 8002014:	7863      	ldrb	r3, [r4, #1]
 8002016:	2b2a      	cmp	r3, #42	@ 0x2a
 8002018:	d132      	bne.n	8002080 <_vfiprintf_r+0x1ac>
 800201a:	9b03      	ldr	r3, [sp, #12]
 800201c:	1d1a      	adds	r2, r3, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	9203      	str	r2, [sp, #12]
 8002022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002026:	3402      	adds	r4, #2
 8002028:	9305      	str	r3, [sp, #20]
 800202a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80020f4 <_vfiprintf_r+0x220>
 800202e:	7821      	ldrb	r1, [r4, #0]
 8002030:	2203      	movs	r2, #3
 8002032:	4650      	mov	r0, sl
 8002034:	f7fe f8ec 	bl	8000210 <memchr>
 8002038:	b138      	cbz	r0, 800204a <_vfiprintf_r+0x176>
 800203a:	9b04      	ldr	r3, [sp, #16]
 800203c:	eba0 000a 	sub.w	r0, r0, sl
 8002040:	2240      	movs	r2, #64	@ 0x40
 8002042:	4082      	lsls	r2, r0
 8002044:	4313      	orrs	r3, r2
 8002046:	3401      	adds	r4, #1
 8002048:	9304      	str	r3, [sp, #16]
 800204a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800204e:	482a      	ldr	r0, [pc, #168]	@ (80020f8 <_vfiprintf_r+0x224>)
 8002050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002054:	2206      	movs	r2, #6
 8002056:	f7fe f8db 	bl	8000210 <memchr>
 800205a:	2800      	cmp	r0, #0
 800205c:	d03f      	beq.n	80020de <_vfiprintf_r+0x20a>
 800205e:	4b27      	ldr	r3, [pc, #156]	@ (80020fc <_vfiprintf_r+0x228>)
 8002060:	bb1b      	cbnz	r3, 80020aa <_vfiprintf_r+0x1d6>
 8002062:	9b03      	ldr	r3, [sp, #12]
 8002064:	3307      	adds	r3, #7
 8002066:	f023 0307 	bic.w	r3, r3, #7
 800206a:	3308      	adds	r3, #8
 800206c:	9303      	str	r3, [sp, #12]
 800206e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002070:	443b      	add	r3, r7
 8002072:	9309      	str	r3, [sp, #36]	@ 0x24
 8002074:	e76a      	b.n	8001f4c <_vfiprintf_r+0x78>
 8002076:	fb0c 3202 	mla	r2, ip, r2, r3
 800207a:	460c      	mov	r4, r1
 800207c:	2001      	movs	r0, #1
 800207e:	e7a8      	b.n	8001fd2 <_vfiprintf_r+0xfe>
 8002080:	2300      	movs	r3, #0
 8002082:	3401      	adds	r4, #1
 8002084:	9305      	str	r3, [sp, #20]
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 0c0a 	mov.w	ip, #10
 800208c:	4620      	mov	r0, r4
 800208e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002092:	3a30      	subs	r2, #48	@ 0x30
 8002094:	2a09      	cmp	r2, #9
 8002096:	d903      	bls.n	80020a0 <_vfiprintf_r+0x1cc>
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0c6      	beq.n	800202a <_vfiprintf_r+0x156>
 800209c:	9105      	str	r1, [sp, #20]
 800209e:	e7c4      	b.n	800202a <_vfiprintf_r+0x156>
 80020a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80020a4:	4604      	mov	r4, r0
 80020a6:	2301      	movs	r3, #1
 80020a8:	e7f0      	b.n	800208c <_vfiprintf_r+0x1b8>
 80020aa:	ab03      	add	r3, sp, #12
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	462a      	mov	r2, r5
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <_vfiprintf_r+0x22c>)
 80020b2:	a904      	add	r1, sp, #16
 80020b4:	4630      	mov	r0, r6
 80020b6:	f3af 8000 	nop.w
 80020ba:	4607      	mov	r7, r0
 80020bc:	1c78      	adds	r0, r7, #1
 80020be:	d1d6      	bne.n	800206e <_vfiprintf_r+0x19a>
 80020c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020c2:	07d9      	lsls	r1, r3, #31
 80020c4:	d405      	bmi.n	80020d2 <_vfiprintf_r+0x1fe>
 80020c6:	89ab      	ldrh	r3, [r5, #12]
 80020c8:	059a      	lsls	r2, r3, #22
 80020ca:	d402      	bmi.n	80020d2 <_vfiprintf_r+0x1fe>
 80020cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020ce:	f7ff fddf 	bl	8001c90 <__retarget_lock_release_recursive>
 80020d2:	89ab      	ldrh	r3, [r5, #12]
 80020d4:	065b      	lsls	r3, r3, #25
 80020d6:	f53f af1f 	bmi.w	8001f18 <_vfiprintf_r+0x44>
 80020da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020dc:	e71e      	b.n	8001f1c <_vfiprintf_r+0x48>
 80020de:	ab03      	add	r3, sp, #12
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	462a      	mov	r2, r5
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <_vfiprintf_r+0x22c>)
 80020e6:	a904      	add	r1, sp, #16
 80020e8:	4630      	mov	r0, r6
 80020ea:	f000 f879 	bl	80021e0 <_printf_i>
 80020ee:	e7e4      	b.n	80020ba <_vfiprintf_r+0x1e6>
 80020f0:	08002708 	.word	0x08002708
 80020f4:	0800270e 	.word	0x0800270e
 80020f8:	08002712 	.word	0x08002712
 80020fc:	00000000 	.word	0x00000000
 8002100:	08001eaf 	.word	0x08001eaf

08002104 <_printf_common>:
 8002104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002108:	4616      	mov	r6, r2
 800210a:	4698      	mov	r8, r3
 800210c:	688a      	ldr	r2, [r1, #8]
 800210e:	690b      	ldr	r3, [r1, #16]
 8002110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002114:	4293      	cmp	r3, r2
 8002116:	bfb8      	it	lt
 8002118:	4613      	movlt	r3, r2
 800211a:	6033      	str	r3, [r6, #0]
 800211c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002120:	4607      	mov	r7, r0
 8002122:	460c      	mov	r4, r1
 8002124:	b10a      	cbz	r2, 800212a <_printf_common+0x26>
 8002126:	3301      	adds	r3, #1
 8002128:	6033      	str	r3, [r6, #0]
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	0699      	lsls	r1, r3, #26
 800212e:	bf42      	ittt	mi
 8002130:	6833      	ldrmi	r3, [r6, #0]
 8002132:	3302      	addmi	r3, #2
 8002134:	6033      	strmi	r3, [r6, #0]
 8002136:	6825      	ldr	r5, [r4, #0]
 8002138:	f015 0506 	ands.w	r5, r5, #6
 800213c:	d106      	bne.n	800214c <_printf_common+0x48>
 800213e:	f104 0a19 	add.w	sl, r4, #25
 8002142:	68e3      	ldr	r3, [r4, #12]
 8002144:	6832      	ldr	r2, [r6, #0]
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	42ab      	cmp	r3, r5
 800214a:	dc26      	bgt.n	800219a <_printf_common+0x96>
 800214c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	3b00      	subs	r3, #0
 8002154:	bf18      	it	ne
 8002156:	2301      	movne	r3, #1
 8002158:	0692      	lsls	r2, r2, #26
 800215a:	d42b      	bmi.n	80021b4 <_printf_common+0xb0>
 800215c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002160:	4641      	mov	r1, r8
 8002162:	4638      	mov	r0, r7
 8002164:	47c8      	blx	r9
 8002166:	3001      	adds	r0, #1
 8002168:	d01e      	beq.n	80021a8 <_printf_common+0xa4>
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	6922      	ldr	r2, [r4, #16]
 800216e:	f003 0306 	and.w	r3, r3, #6
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf02      	ittt	eq
 8002176:	68e5      	ldreq	r5, [r4, #12]
 8002178:	6833      	ldreq	r3, [r6, #0]
 800217a:	1aed      	subeq	r5, r5, r3
 800217c:	68a3      	ldr	r3, [r4, #8]
 800217e:	bf0c      	ite	eq
 8002180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002184:	2500      	movne	r5, #0
 8002186:	4293      	cmp	r3, r2
 8002188:	bfc4      	itt	gt
 800218a:	1a9b      	subgt	r3, r3, r2
 800218c:	18ed      	addgt	r5, r5, r3
 800218e:	2600      	movs	r6, #0
 8002190:	341a      	adds	r4, #26
 8002192:	42b5      	cmp	r5, r6
 8002194:	d11a      	bne.n	80021cc <_printf_common+0xc8>
 8002196:	2000      	movs	r0, #0
 8002198:	e008      	b.n	80021ac <_printf_common+0xa8>
 800219a:	2301      	movs	r3, #1
 800219c:	4652      	mov	r2, sl
 800219e:	4641      	mov	r1, r8
 80021a0:	4638      	mov	r0, r7
 80021a2:	47c8      	blx	r9
 80021a4:	3001      	adds	r0, #1
 80021a6:	d103      	bne.n	80021b0 <_printf_common+0xac>
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b0:	3501      	adds	r5, #1
 80021b2:	e7c6      	b.n	8002142 <_printf_common+0x3e>
 80021b4:	18e1      	adds	r1, r4, r3
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	2030      	movs	r0, #48	@ 0x30
 80021ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80021be:	4422      	add	r2, r4
 80021c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021c8:	3302      	adds	r3, #2
 80021ca:	e7c7      	b.n	800215c <_printf_common+0x58>
 80021cc:	2301      	movs	r3, #1
 80021ce:	4622      	mov	r2, r4
 80021d0:	4641      	mov	r1, r8
 80021d2:	4638      	mov	r0, r7
 80021d4:	47c8      	blx	r9
 80021d6:	3001      	adds	r0, #1
 80021d8:	d0e6      	beq.n	80021a8 <_printf_common+0xa4>
 80021da:	3601      	adds	r6, #1
 80021dc:	e7d9      	b.n	8002192 <_printf_common+0x8e>
	...

080021e0 <_printf_i>:
 80021e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021e4:	7e0f      	ldrb	r7, [r1, #24]
 80021e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021e8:	2f78      	cmp	r7, #120	@ 0x78
 80021ea:	4691      	mov	r9, r2
 80021ec:	4680      	mov	r8, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	469a      	mov	sl, r3
 80021f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021f6:	d807      	bhi.n	8002208 <_printf_i+0x28>
 80021f8:	2f62      	cmp	r7, #98	@ 0x62
 80021fa:	d80a      	bhi.n	8002212 <_printf_i+0x32>
 80021fc:	2f00      	cmp	r7, #0
 80021fe:	f000 80d1 	beq.w	80023a4 <_printf_i+0x1c4>
 8002202:	2f58      	cmp	r7, #88	@ 0x58
 8002204:	f000 80b8 	beq.w	8002378 <_printf_i+0x198>
 8002208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800220c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002210:	e03a      	b.n	8002288 <_printf_i+0xa8>
 8002212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002216:	2b15      	cmp	r3, #21
 8002218:	d8f6      	bhi.n	8002208 <_printf_i+0x28>
 800221a:	a101      	add	r1, pc, #4	@ (adr r1, 8002220 <_printf_i+0x40>)
 800221c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002220:	08002279 	.word	0x08002279
 8002224:	0800228d 	.word	0x0800228d
 8002228:	08002209 	.word	0x08002209
 800222c:	08002209 	.word	0x08002209
 8002230:	08002209 	.word	0x08002209
 8002234:	08002209 	.word	0x08002209
 8002238:	0800228d 	.word	0x0800228d
 800223c:	08002209 	.word	0x08002209
 8002240:	08002209 	.word	0x08002209
 8002244:	08002209 	.word	0x08002209
 8002248:	08002209 	.word	0x08002209
 800224c:	0800238b 	.word	0x0800238b
 8002250:	080022b7 	.word	0x080022b7
 8002254:	08002345 	.word	0x08002345
 8002258:	08002209 	.word	0x08002209
 800225c:	08002209 	.word	0x08002209
 8002260:	080023ad 	.word	0x080023ad
 8002264:	08002209 	.word	0x08002209
 8002268:	080022b7 	.word	0x080022b7
 800226c:	08002209 	.word	0x08002209
 8002270:	08002209 	.word	0x08002209
 8002274:	0800234d 	.word	0x0800234d
 8002278:	6833      	ldr	r3, [r6, #0]
 800227a:	1d1a      	adds	r2, r3, #4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6032      	str	r2, [r6, #0]
 8002280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002288:	2301      	movs	r3, #1
 800228a:	e09c      	b.n	80023c6 <_printf_i+0x1e6>
 800228c:	6833      	ldr	r3, [r6, #0]
 800228e:	6820      	ldr	r0, [r4, #0]
 8002290:	1d19      	adds	r1, r3, #4
 8002292:	6031      	str	r1, [r6, #0]
 8002294:	0606      	lsls	r6, r0, #24
 8002296:	d501      	bpl.n	800229c <_printf_i+0xbc>
 8002298:	681d      	ldr	r5, [r3, #0]
 800229a:	e003      	b.n	80022a4 <_printf_i+0xc4>
 800229c:	0645      	lsls	r5, r0, #25
 800229e:	d5fb      	bpl.n	8002298 <_printf_i+0xb8>
 80022a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80022a4:	2d00      	cmp	r5, #0
 80022a6:	da03      	bge.n	80022b0 <_printf_i+0xd0>
 80022a8:	232d      	movs	r3, #45	@ 0x2d
 80022aa:	426d      	negs	r5, r5
 80022ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022b0:	4858      	ldr	r0, [pc, #352]	@ (8002414 <_printf_i+0x234>)
 80022b2:	230a      	movs	r3, #10
 80022b4:	e011      	b.n	80022da <_printf_i+0xfa>
 80022b6:	6821      	ldr	r1, [r4, #0]
 80022b8:	6833      	ldr	r3, [r6, #0]
 80022ba:	0608      	lsls	r0, r1, #24
 80022bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80022c0:	d402      	bmi.n	80022c8 <_printf_i+0xe8>
 80022c2:	0649      	lsls	r1, r1, #25
 80022c4:	bf48      	it	mi
 80022c6:	b2ad      	uxthmi	r5, r5
 80022c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80022ca:	4852      	ldr	r0, [pc, #328]	@ (8002414 <_printf_i+0x234>)
 80022cc:	6033      	str	r3, [r6, #0]
 80022ce:	bf14      	ite	ne
 80022d0:	230a      	movne	r3, #10
 80022d2:	2308      	moveq	r3, #8
 80022d4:	2100      	movs	r1, #0
 80022d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022da:	6866      	ldr	r6, [r4, #4]
 80022dc:	60a6      	str	r6, [r4, #8]
 80022de:	2e00      	cmp	r6, #0
 80022e0:	db05      	blt.n	80022ee <_printf_i+0x10e>
 80022e2:	6821      	ldr	r1, [r4, #0]
 80022e4:	432e      	orrs	r6, r5
 80022e6:	f021 0104 	bic.w	r1, r1, #4
 80022ea:	6021      	str	r1, [r4, #0]
 80022ec:	d04b      	beq.n	8002386 <_printf_i+0x1a6>
 80022ee:	4616      	mov	r6, r2
 80022f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80022f4:	fb03 5711 	mls	r7, r3, r1, r5
 80022f8:	5dc7      	ldrb	r7, [r0, r7]
 80022fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022fe:	462f      	mov	r7, r5
 8002300:	42bb      	cmp	r3, r7
 8002302:	460d      	mov	r5, r1
 8002304:	d9f4      	bls.n	80022f0 <_printf_i+0x110>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d10b      	bne.n	8002322 <_printf_i+0x142>
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	07df      	lsls	r7, r3, #31
 800230e:	d508      	bpl.n	8002322 <_printf_i+0x142>
 8002310:	6923      	ldr	r3, [r4, #16]
 8002312:	6861      	ldr	r1, [r4, #4]
 8002314:	4299      	cmp	r1, r3
 8002316:	bfde      	ittt	le
 8002318:	2330      	movle	r3, #48	@ 0x30
 800231a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800231e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002322:	1b92      	subs	r2, r2, r6
 8002324:	6122      	str	r2, [r4, #16]
 8002326:	f8cd a000 	str.w	sl, [sp]
 800232a:	464b      	mov	r3, r9
 800232c:	aa03      	add	r2, sp, #12
 800232e:	4621      	mov	r1, r4
 8002330:	4640      	mov	r0, r8
 8002332:	f7ff fee7 	bl	8002104 <_printf_common>
 8002336:	3001      	adds	r0, #1
 8002338:	d14a      	bne.n	80023d0 <_printf_i+0x1f0>
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
 800233e:	b004      	add	sp, #16
 8002340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	6023      	str	r3, [r4, #0]
 800234c:	4832      	ldr	r0, [pc, #200]	@ (8002418 <_printf_i+0x238>)
 800234e:	2778      	movs	r7, #120	@ 0x78
 8002350:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	6831      	ldr	r1, [r6, #0]
 8002358:	061f      	lsls	r7, r3, #24
 800235a:	f851 5b04 	ldr.w	r5, [r1], #4
 800235e:	d402      	bmi.n	8002366 <_printf_i+0x186>
 8002360:	065f      	lsls	r7, r3, #25
 8002362:	bf48      	it	mi
 8002364:	b2ad      	uxthmi	r5, r5
 8002366:	6031      	str	r1, [r6, #0]
 8002368:	07d9      	lsls	r1, r3, #31
 800236a:	bf44      	itt	mi
 800236c:	f043 0320 	orrmi.w	r3, r3, #32
 8002370:	6023      	strmi	r3, [r4, #0]
 8002372:	b11d      	cbz	r5, 800237c <_printf_i+0x19c>
 8002374:	2310      	movs	r3, #16
 8002376:	e7ad      	b.n	80022d4 <_printf_i+0xf4>
 8002378:	4826      	ldr	r0, [pc, #152]	@ (8002414 <_printf_i+0x234>)
 800237a:	e7e9      	b.n	8002350 <_printf_i+0x170>
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	f023 0320 	bic.w	r3, r3, #32
 8002382:	6023      	str	r3, [r4, #0]
 8002384:	e7f6      	b.n	8002374 <_printf_i+0x194>
 8002386:	4616      	mov	r6, r2
 8002388:	e7bd      	b.n	8002306 <_printf_i+0x126>
 800238a:	6833      	ldr	r3, [r6, #0]
 800238c:	6825      	ldr	r5, [r4, #0]
 800238e:	6961      	ldr	r1, [r4, #20]
 8002390:	1d18      	adds	r0, r3, #4
 8002392:	6030      	str	r0, [r6, #0]
 8002394:	062e      	lsls	r6, r5, #24
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	d501      	bpl.n	800239e <_printf_i+0x1be>
 800239a:	6019      	str	r1, [r3, #0]
 800239c:	e002      	b.n	80023a4 <_printf_i+0x1c4>
 800239e:	0668      	lsls	r0, r5, #25
 80023a0:	d5fb      	bpl.n	800239a <_printf_i+0x1ba>
 80023a2:	8019      	strh	r1, [r3, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	6123      	str	r3, [r4, #16]
 80023a8:	4616      	mov	r6, r2
 80023aa:	e7bc      	b.n	8002326 <_printf_i+0x146>
 80023ac:	6833      	ldr	r3, [r6, #0]
 80023ae:	1d1a      	adds	r2, r3, #4
 80023b0:	6032      	str	r2, [r6, #0]
 80023b2:	681e      	ldr	r6, [r3, #0]
 80023b4:	6862      	ldr	r2, [r4, #4]
 80023b6:	2100      	movs	r1, #0
 80023b8:	4630      	mov	r0, r6
 80023ba:	f7fd ff29 	bl	8000210 <memchr>
 80023be:	b108      	cbz	r0, 80023c4 <_printf_i+0x1e4>
 80023c0:	1b80      	subs	r0, r0, r6
 80023c2:	6060      	str	r0, [r4, #4]
 80023c4:	6863      	ldr	r3, [r4, #4]
 80023c6:	6123      	str	r3, [r4, #16]
 80023c8:	2300      	movs	r3, #0
 80023ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023ce:	e7aa      	b.n	8002326 <_printf_i+0x146>
 80023d0:	6923      	ldr	r3, [r4, #16]
 80023d2:	4632      	mov	r2, r6
 80023d4:	4649      	mov	r1, r9
 80023d6:	4640      	mov	r0, r8
 80023d8:	47d0      	blx	sl
 80023da:	3001      	adds	r0, #1
 80023dc:	d0ad      	beq.n	800233a <_printf_i+0x15a>
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	079b      	lsls	r3, r3, #30
 80023e2:	d413      	bmi.n	800240c <_printf_i+0x22c>
 80023e4:	68e0      	ldr	r0, [r4, #12]
 80023e6:	9b03      	ldr	r3, [sp, #12]
 80023e8:	4298      	cmp	r0, r3
 80023ea:	bfb8      	it	lt
 80023ec:	4618      	movlt	r0, r3
 80023ee:	e7a6      	b.n	800233e <_printf_i+0x15e>
 80023f0:	2301      	movs	r3, #1
 80023f2:	4632      	mov	r2, r6
 80023f4:	4649      	mov	r1, r9
 80023f6:	4640      	mov	r0, r8
 80023f8:	47d0      	blx	sl
 80023fa:	3001      	adds	r0, #1
 80023fc:	d09d      	beq.n	800233a <_printf_i+0x15a>
 80023fe:	3501      	adds	r5, #1
 8002400:	68e3      	ldr	r3, [r4, #12]
 8002402:	9903      	ldr	r1, [sp, #12]
 8002404:	1a5b      	subs	r3, r3, r1
 8002406:	42ab      	cmp	r3, r5
 8002408:	dcf2      	bgt.n	80023f0 <_printf_i+0x210>
 800240a:	e7eb      	b.n	80023e4 <_printf_i+0x204>
 800240c:	2500      	movs	r5, #0
 800240e:	f104 0619 	add.w	r6, r4, #25
 8002412:	e7f5      	b.n	8002400 <_printf_i+0x220>
 8002414:	08002719 	.word	0x08002719
 8002418:	0800272a 	.word	0x0800272a

0800241c <__sflush_r>:
 800241c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	0716      	lsls	r6, r2, #28
 8002424:	4605      	mov	r5, r0
 8002426:	460c      	mov	r4, r1
 8002428:	d454      	bmi.n	80024d4 <__sflush_r+0xb8>
 800242a:	684b      	ldr	r3, [r1, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	dc02      	bgt.n	8002436 <__sflush_r+0x1a>
 8002430:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	dd48      	ble.n	80024c8 <__sflush_r+0xac>
 8002436:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002438:	2e00      	cmp	r6, #0
 800243a:	d045      	beq.n	80024c8 <__sflush_r+0xac>
 800243c:	2300      	movs	r3, #0
 800243e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002442:	682f      	ldr	r7, [r5, #0]
 8002444:	6a21      	ldr	r1, [r4, #32]
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	d030      	beq.n	80024ac <__sflush_r+0x90>
 800244a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	0759      	lsls	r1, r3, #29
 8002450:	d505      	bpl.n	800245e <__sflush_r+0x42>
 8002452:	6863      	ldr	r3, [r4, #4]
 8002454:	1ad2      	subs	r2, r2, r3
 8002456:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002458:	b10b      	cbz	r3, 800245e <__sflush_r+0x42>
 800245a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800245c:	1ad2      	subs	r2, r2, r3
 800245e:	2300      	movs	r3, #0
 8002460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002462:	6a21      	ldr	r1, [r4, #32]
 8002464:	4628      	mov	r0, r5
 8002466:	47b0      	blx	r6
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	89a3      	ldrh	r3, [r4, #12]
 800246c:	d106      	bne.n	800247c <__sflush_r+0x60>
 800246e:	6829      	ldr	r1, [r5, #0]
 8002470:	291d      	cmp	r1, #29
 8002472:	d82b      	bhi.n	80024cc <__sflush_r+0xb0>
 8002474:	4a28      	ldr	r2, [pc, #160]	@ (8002518 <__sflush_r+0xfc>)
 8002476:	40ca      	lsrs	r2, r1
 8002478:	07d6      	lsls	r6, r2, #31
 800247a:	d527      	bpl.n	80024cc <__sflush_r+0xb0>
 800247c:	2200      	movs	r2, #0
 800247e:	6062      	str	r2, [r4, #4]
 8002480:	04d9      	lsls	r1, r3, #19
 8002482:	6922      	ldr	r2, [r4, #16]
 8002484:	6022      	str	r2, [r4, #0]
 8002486:	d504      	bpl.n	8002492 <__sflush_r+0x76>
 8002488:	1c42      	adds	r2, r0, #1
 800248a:	d101      	bne.n	8002490 <__sflush_r+0x74>
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	b903      	cbnz	r3, 8002492 <__sflush_r+0x76>
 8002490:	6560      	str	r0, [r4, #84]	@ 0x54
 8002492:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002494:	602f      	str	r7, [r5, #0]
 8002496:	b1b9      	cbz	r1, 80024c8 <__sflush_r+0xac>
 8002498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800249c:	4299      	cmp	r1, r3
 800249e:	d002      	beq.n	80024a6 <__sflush_r+0x8a>
 80024a0:	4628      	mov	r0, r5
 80024a2:	f7ff fbf7 	bl	8001c94 <_free_r>
 80024a6:	2300      	movs	r3, #0
 80024a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80024aa:	e00d      	b.n	80024c8 <__sflush_r+0xac>
 80024ac:	2301      	movs	r3, #1
 80024ae:	4628      	mov	r0, r5
 80024b0:	47b0      	blx	r6
 80024b2:	4602      	mov	r2, r0
 80024b4:	1c50      	adds	r0, r2, #1
 80024b6:	d1c9      	bne.n	800244c <__sflush_r+0x30>
 80024b8:	682b      	ldr	r3, [r5, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0c6      	beq.n	800244c <__sflush_r+0x30>
 80024be:	2b1d      	cmp	r3, #29
 80024c0:	d001      	beq.n	80024c6 <__sflush_r+0xaa>
 80024c2:	2b16      	cmp	r3, #22
 80024c4:	d11d      	bne.n	8002502 <__sflush_r+0xe6>
 80024c6:	602f      	str	r7, [r5, #0]
 80024c8:	2000      	movs	r0, #0
 80024ca:	e021      	b.n	8002510 <__sflush_r+0xf4>
 80024cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024d0:	b21b      	sxth	r3, r3
 80024d2:	e01a      	b.n	800250a <__sflush_r+0xee>
 80024d4:	690f      	ldr	r7, [r1, #16]
 80024d6:	2f00      	cmp	r7, #0
 80024d8:	d0f6      	beq.n	80024c8 <__sflush_r+0xac>
 80024da:	0793      	lsls	r3, r2, #30
 80024dc:	680e      	ldr	r6, [r1, #0]
 80024de:	bf08      	it	eq
 80024e0:	694b      	ldreq	r3, [r1, #20]
 80024e2:	600f      	str	r7, [r1, #0]
 80024e4:	bf18      	it	ne
 80024e6:	2300      	movne	r3, #0
 80024e8:	1bf6      	subs	r6, r6, r7
 80024ea:	608b      	str	r3, [r1, #8]
 80024ec:	2e00      	cmp	r6, #0
 80024ee:	ddeb      	ble.n	80024c8 <__sflush_r+0xac>
 80024f0:	6a21      	ldr	r1, [r4, #32]
 80024f2:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80024f6:	4633      	mov	r3, r6
 80024f8:	463a      	mov	r2, r7
 80024fa:	4628      	mov	r0, r5
 80024fc:	47e0      	blx	ip
 80024fe:	2800      	cmp	r0, #0
 8002500:	dc07      	bgt.n	8002512 <__sflush_r+0xf6>
 8002502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800250a:	81a3      	strh	r3, [r4, #12]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002512:	4407      	add	r7, r0
 8002514:	1a36      	subs	r6, r6, r0
 8002516:	e7e9      	b.n	80024ec <__sflush_r+0xd0>
 8002518:	20400001 	.word	0x20400001

0800251c <_fflush_r>:
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	690b      	ldr	r3, [r1, #16]
 8002520:	4605      	mov	r5, r0
 8002522:	460c      	mov	r4, r1
 8002524:	b913      	cbnz	r3, 800252c <_fflush_r+0x10>
 8002526:	2500      	movs	r5, #0
 8002528:	4628      	mov	r0, r5
 800252a:	bd38      	pop	{r3, r4, r5, pc}
 800252c:	b118      	cbz	r0, 8002536 <_fflush_r+0x1a>
 800252e:	6a03      	ldr	r3, [r0, #32]
 8002530:	b90b      	cbnz	r3, 8002536 <_fflush_r+0x1a>
 8002532:	f7ff f9b5 	bl	80018a0 <__sinit>
 8002536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f3      	beq.n	8002526 <_fflush_r+0xa>
 800253e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002540:	07d0      	lsls	r0, r2, #31
 8002542:	d404      	bmi.n	800254e <_fflush_r+0x32>
 8002544:	0599      	lsls	r1, r3, #22
 8002546:	d402      	bmi.n	800254e <_fflush_r+0x32>
 8002548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800254a:	f7ff fba0 	bl	8001c8e <__retarget_lock_acquire_recursive>
 800254e:	4628      	mov	r0, r5
 8002550:	4621      	mov	r1, r4
 8002552:	f7ff ff63 	bl	800241c <__sflush_r>
 8002556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002558:	07da      	lsls	r2, r3, #31
 800255a:	4605      	mov	r5, r0
 800255c:	d4e4      	bmi.n	8002528 <_fflush_r+0xc>
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	059b      	lsls	r3, r3, #22
 8002562:	d4e1      	bmi.n	8002528 <_fflush_r+0xc>
 8002564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002566:	f7ff fb93 	bl	8001c90 <__retarget_lock_release_recursive>
 800256a:	e7dd      	b.n	8002528 <_fflush_r+0xc>

0800256c <__swhatbuf_r>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	460c      	mov	r4, r1
 8002570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002574:	2900      	cmp	r1, #0
 8002576:	b096      	sub	sp, #88	@ 0x58
 8002578:	4615      	mov	r5, r2
 800257a:	461e      	mov	r6, r3
 800257c:	da0d      	bge.n	800259a <__swhatbuf_r+0x2e>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	bf14      	ite	ne
 800258a:	2340      	movne	r3, #64	@ 0x40
 800258c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002590:	2000      	movs	r0, #0
 8002592:	6031      	str	r1, [r6, #0]
 8002594:	602b      	str	r3, [r5, #0]
 8002596:	b016      	add	sp, #88	@ 0x58
 8002598:	bd70      	pop	{r4, r5, r6, pc}
 800259a:	466a      	mov	r2, sp
 800259c:	f000 f848 	bl	8002630 <_fstat_r>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	dbec      	blt.n	800257e <__swhatbuf_r+0x12>
 80025a4:	9901      	ldr	r1, [sp, #4]
 80025a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80025aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80025ae:	4259      	negs	r1, r3
 80025b0:	4159      	adcs	r1, r3
 80025b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025b6:	e7eb      	b.n	8002590 <__swhatbuf_r+0x24>

080025b8 <__smakebuf_r>:
 80025b8:	898b      	ldrh	r3, [r1, #12]
 80025ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025bc:	079d      	lsls	r5, r3, #30
 80025be:	4606      	mov	r6, r0
 80025c0:	460c      	mov	r4, r1
 80025c2:	d507      	bpl.n	80025d4 <__smakebuf_r+0x1c>
 80025c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	6123      	str	r3, [r4, #16]
 80025cc:	2301      	movs	r3, #1
 80025ce:	6163      	str	r3, [r4, #20]
 80025d0:	b003      	add	sp, #12
 80025d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d4:	ab01      	add	r3, sp, #4
 80025d6:	466a      	mov	r2, sp
 80025d8:	f7ff ffc8 	bl	800256c <__swhatbuf_r>
 80025dc:	9f00      	ldr	r7, [sp, #0]
 80025de:	4605      	mov	r5, r0
 80025e0:	4639      	mov	r1, r7
 80025e2:	4630      	mov	r0, r6
 80025e4:	f7ff fbc2 	bl	8001d6c <_malloc_r>
 80025e8:	b948      	cbnz	r0, 80025fe <__smakebuf_r+0x46>
 80025ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ee:	059a      	lsls	r2, r3, #22
 80025f0:	d4ee      	bmi.n	80025d0 <__smakebuf_r+0x18>
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	81a3      	strh	r3, [r4, #12]
 80025fc:	e7e2      	b.n	80025c4 <__smakebuf_r+0xc>
 80025fe:	89a3      	ldrh	r3, [r4, #12]
 8002600:	6020      	str	r0, [r4, #0]
 8002602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002606:	81a3      	strh	r3, [r4, #12]
 8002608:	9b01      	ldr	r3, [sp, #4]
 800260a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800260e:	b15b      	cbz	r3, 8002628 <__smakebuf_r+0x70>
 8002610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002614:	4630      	mov	r0, r6
 8002616:	f000 f81d 	bl	8002654 <_isatty_r>
 800261a:	b128      	cbz	r0, 8002628 <__smakebuf_r+0x70>
 800261c:	89a3      	ldrh	r3, [r4, #12]
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	81a3      	strh	r3, [r4, #12]
 8002628:	89a3      	ldrh	r3, [r4, #12]
 800262a:	431d      	orrs	r5, r3
 800262c:	81a5      	strh	r5, [r4, #12]
 800262e:	e7cf      	b.n	80025d0 <__smakebuf_r+0x18>

08002630 <_fstat_r>:
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	4d07      	ldr	r5, [pc, #28]	@ (8002650 <_fstat_r+0x20>)
 8002634:	2300      	movs	r3, #0
 8002636:	4604      	mov	r4, r0
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	602b      	str	r3, [r5, #0]
 800263e:	f7fd ffe7 	bl	8000610 <_fstat>
 8002642:	1c43      	adds	r3, r0, #1
 8002644:	d102      	bne.n	800264c <_fstat_r+0x1c>
 8002646:	682b      	ldr	r3, [r5, #0]
 8002648:	b103      	cbz	r3, 800264c <_fstat_r+0x1c>
 800264a:	6023      	str	r3, [r4, #0]
 800264c:	bd38      	pop	{r3, r4, r5, pc}
 800264e:	bf00      	nop
 8002650:	20000224 	.word	0x20000224

08002654 <_isatty_r>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	4d06      	ldr	r5, [pc, #24]	@ (8002670 <_isatty_r+0x1c>)
 8002658:	2300      	movs	r3, #0
 800265a:	4604      	mov	r4, r0
 800265c:	4608      	mov	r0, r1
 800265e:	602b      	str	r3, [r5, #0]
 8002660:	f7fd ffe5 	bl	800062e <_isatty>
 8002664:	1c43      	adds	r3, r0, #1
 8002666:	d102      	bne.n	800266e <_isatty_r+0x1a>
 8002668:	682b      	ldr	r3, [r5, #0]
 800266a:	b103      	cbz	r3, 800266e <_isatty_r+0x1a>
 800266c:	6023      	str	r3, [r4, #0]
 800266e:	bd38      	pop	{r3, r4, r5, pc}
 8002670:	20000224 	.word	0x20000224

08002674 <_sbrk_r>:
 8002674:	b538      	push	{r3, r4, r5, lr}
 8002676:	4d06      	ldr	r5, [pc, #24]	@ (8002690 <_sbrk_r+0x1c>)
 8002678:	2300      	movs	r3, #0
 800267a:	4604      	mov	r4, r0
 800267c:	4608      	mov	r0, r1
 800267e:	602b      	str	r3, [r5, #0]
 8002680:	f7fd ffec 	bl	800065c <_sbrk>
 8002684:	1c43      	adds	r3, r0, #1
 8002686:	d102      	bne.n	800268e <_sbrk_r+0x1a>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	b103      	cbz	r3, 800268e <_sbrk_r+0x1a>
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	bd38      	pop	{r3, r4, r5, pc}
 8002690:	20000224 	.word	0x20000224

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
