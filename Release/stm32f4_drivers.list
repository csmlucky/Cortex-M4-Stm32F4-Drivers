
stm32f4_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bb8  08000bb8  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bb8  08000bb8  00002018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000bb8  08000bb8  00002018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000bb8  08000bb8  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bb8  08000bb8  00001bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000bbc  08000bbc  00001bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000bc0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000018  08000bd8  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08000bd8  00002058  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001371  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004cc  00000000  00000000  000033b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00003880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000010b  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00001404  00000000  00000000  00003aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000856  00000000  00000000  00004eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00005745  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000004d8  00000000  00000000  00005788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005c  00000000  00000000  00005c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ba0 	.word	0x08000ba0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08000ba0 	.word	0x08000ba0

08000204 <I2C1_GPIOInits>:



 /* This Fn is used to Initialize the GPIO_PIns to behave as SPI2 */

void I2C1_GPIOInits(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2C1_Pins;

	I2C1_Pins.pGPIOx = GPIOB;
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <I2C1_GPIOInits+0x40>)
 800020c:	607b      	str	r3, [r7, #4]
	I2C1_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	I2C1_Pins.GPIO_PinConfig.GPIO_AltrFnMode = 4;
 8000212:	2304      	movs	r3, #4
 8000214:	737b      	strb	r3, [r7, #13]
	I2C1_Pins.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 8000216:	2302      	movs	r3, #2
 8000218:	72fb      	strb	r3, [r7, #11]
	I2C1_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800021a:	2301      	movs	r3, #1
 800021c:	72bb      	strb	r3, [r7, #10]
	I2C1_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800021e:	2301      	movs	r3, #1
 8000220:	733b      	strb	r3, [r7, #12]


	/* SCL */
	I2C1_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000222:	2308      	movs	r3, #8
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(& I2C1_Pins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f957 	bl	80004dc <GPIO_Init>

	/* SDA */
	I2C1_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800022e:	2309      	movs	r3, #9
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(& I2C1_Pins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f951 	bl	80004dc <GPIO_Init>



}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020400 	.word	0x40020400

08000248 <I2C1_Inits>:


/*
 * SPI2 Initialization
 */
void I2C1_Inits(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <I2C1_Inits+0x2c>)
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <I2C1_Inits+0x30>)
 8000250:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000252:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <I2C1_Inits+0x2c>)
 8000254:	2201      	movs	r2, #1
 8000256:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <I2C1_Inits+0x2c>)
 800025a:	2200      	movs	r2, #0
 800025c:	60da      	str	r2, [r3, #12]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCLK_SPEED_SM;
 800025e:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <I2C1_Inits+0x2c>)
 8000260:	4a06      	ldr	r2, [pc, #24]	@ (800027c <I2C1_Inits+0x34>)
 8000262:	605a      	str	r2, [r3, #4]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000264:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <I2C1_Inits+0x2c>)
 8000266:	2260      	movs	r2, #96	@ 0x60
 8000268:	721a      	strb	r2, [r3, #8]

	I2C_Init(&I2C1Handle);
 800026a:	4802      	ldr	r0, [pc, #8]	@ (8000274 <I2C1_Inits+0x2c>)
 800026c:	f000 fb9a 	bl	80009a4 <I2C_Init>

}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000034 	.word	0x20000034
 8000278:	40005400 	.word	0x40005400
 800027c:	000186a0 	.word	0x000186a0

08000280 <GPIO_Button_Inits>:


/*
 * GPIO-Button INit
 */
void GPIO_Button_Inits(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 8000286:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <GPIO_Button_Inits+0x2c>)
 8000288:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800028a:	230d      	movs	r3, #13
 800028c:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028e:	2300      	movs	r3, #0
 8000290:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinOPSpeed = GPIO_SPEED_FAST;
 8000292:	2302      	movs	r3, #2
 8000294:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NOPUPD;
 8000296:	2300      	movs	r3, #0
 8000298:	733b      	strb	r3, [r7, #12]

	GPIO_Init(&GpioButton);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f91d 	bl	80004dc <GPIO_Init>

}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40020800 	.word	0x40020800

080002b0 <main>:
	/* debounce */
	delay();
}


int main (void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	/* Initialize the button */
	GPIO_Button_Inits();
 80002b4:	f7ff ffe4 	bl	8000280 <GPIO_Button_Inits>

	/* Initialize I2C pins : Configure the GPIO pins to behave as I2C1 */
	I2C1_GPIOInits();
 80002b8:	f7ff ffa4 	bl	8000204 <I2C1_GPIOInits>

	/* Configure I2C peripheral */
	I2C1_Inits();
 80002bc:	f7ff ffc4 	bl	8000248 <I2C1_Inits>

	/* Enable peripheral control */
	I2C_PeripheralControl(I2C1, ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	4807      	ldr	r0, [pc, #28]	@ (80002e0 <main+0x30>)
 80002c4:	f000 fc2c 	bl	8000b20 <I2C_PeripheralControl>

	/* configure ack control in CR1 after enabling the peripheral i2c*/
	I2C1Handle.pI2Cx -> CR1 |= (I2C1Handle.I2C_Config.I2C_AckControl << 10);
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <main+0x34>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	6819      	ldr	r1, [r3, #0]
 80002ce:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <main+0x34>)
 80002d0:	7a5b      	ldrb	r3, [r3, #9]
 80002d2:	029a      	lsls	r2, r3, #10
 80002d4:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <main+0x34>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	430a      	orrs	r2, r1
 80002da:	601a      	str	r2, [r3, #0]

	while(1){
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <main+0x2c>
 80002e0:	40005400 	.word	0x40005400
 80002e4:	20000034 	.word	0x20000034

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	@ (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	@ (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	@ (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	@ (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 fc1f 	bl	8000b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031a:	f7ff ffc9 	bl	80002b0 <main>

0800031e <LoopForever>:

LoopForever:
  b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800032c:	08000bc0 	.word	0x08000bc0
  ldr r2, =_sbss
 8000330:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000334:	20000058 	.word	0x20000058

08000338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <GPIO_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d157      	bne.n	80003fe <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a59      	ldr	r2, [pc, #356]	@ (80004b8 <GPIO_PeriClockControl+0x17c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x28>
 8000356:	4b59      	ldr	r3, [pc, #356]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035a:	4a58      	ldr	r2, [pc, #352]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
	}
}
 8000362:	e0a3      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a56      	ldr	r2, [pc, #344]	@ (80004c0 <GPIO_PeriClockControl+0x184>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriClockControl+0x3e>
 800036c:	4b53      	ldr	r3, [pc, #332]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000370:	4a52      	ldr	r2, [pc, #328]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000378:	e098      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_EN();
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a51      	ldr	r2, [pc, #324]	@ (80004c4 <GPIO_PeriClockControl+0x188>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x54>
 8000382:	4b4e      	ldr	r3, [pc, #312]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000386:	4a4d      	ldr	r2, [pc, #308]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038e:	e08d      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a4d      	ldr	r2, [pc, #308]	@ (80004c8 <GPIO_PeriClockControl+0x18c>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x6a>
 8000398:	4b48      	ldr	r3, [pc, #288]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039c:	4a47      	ldr	r2, [pc, #284]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a4:	e082      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_EN();
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a48      	ldr	r2, [pc, #288]	@ (80004cc <GPIO_PeriClockControl+0x190>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0x80>
 80003ae:	4b43      	ldr	r3, [pc, #268]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b2:	4a42      	ldr	r2, [pc, #264]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80003b4:	f043 0310 	orr.w	r3, r3, #16
 80003b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ba:	e077      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_EN();
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a44      	ldr	r2, [pc, #272]	@ (80004d0 <GPIO_PeriClockControl+0x194>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0x96>
 80003c4:	4b3d      	ldr	r3, [pc, #244]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c8:	4a3c      	ldr	r2, [pc, #240]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d0:	e06c      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_EN();
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a3f      	ldr	r2, [pc, #252]	@ (80004d4 <GPIO_PeriClockControl+0x198>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0xac>
 80003da:	4b38      	ldr	r3, [pc, #224]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003de:	4a37      	ldr	r2, [pc, #220]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80003e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e6:	e061      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_EN();
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a3b      	ldr	r2, [pc, #236]	@ (80004d8 <GPIO_PeriClockControl+0x19c>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d15d      	bne.n	80004ac <GPIO_PeriClockControl+0x170>
 80003f0:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f4:	4a31      	ldr	r2, [pc, #196]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80003f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fc:	e056      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA) GPIOA_PCLK_DI();
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a2d      	ldr	r2, [pc, #180]	@ (80004b8 <GPIO_PeriClockControl+0x17c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0xd8>
 8000406:	4b2d      	ldr	r3, [pc, #180]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040a:	4a2c      	ldr	r2, [pc, #176]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800040c:	f023 0301 	bic.w	r3, r3, #1
 8000410:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000412:	e04b      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB) GPIOB_PCLK_DI();
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a2a      	ldr	r2, [pc, #168]	@ (80004c0 <GPIO_PeriClockControl+0x184>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0xee>
 800041c:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000420:	4a26      	ldr	r2, [pc, #152]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000422:	f023 0302 	bic.w	r3, r3, #2
 8000426:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000428:	e040      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC) GPIOC_PCLK_DI();
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a25      	ldr	r2, [pc, #148]	@ (80004c4 <GPIO_PeriClockControl+0x188>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x104>
 8000432:	4b22      	ldr	r3, [pc, #136]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000436:	4a21      	ldr	r2, [pc, #132]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000438:	f023 0304 	bic.w	r3, r3, #4
 800043c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043e:	e035      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a21      	ldr	r2, [pc, #132]	@ (80004c8 <GPIO_PeriClockControl+0x18c>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x11a>
 8000448:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044c:	4a1b      	ldr	r2, [pc, #108]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800044e:	f023 0308 	bic.w	r3, r3, #8
 8000452:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000454:	e02a      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE) GPIOE_PCLK_DI();
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a1c      	ldr	r2, [pc, #112]	@ (80004cc <GPIO_PeriClockControl+0x190>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClockControl+0x130>
 800045e:	4b17      	ldr	r3, [pc, #92]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000462:	4a16      	ldr	r2, [pc, #88]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000464:	f023 0310 	bic.w	r3, r3, #16
 8000468:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046a:	e01f      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF) GPIOF_PCLK_DI();
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a18      	ldr	r2, [pc, #96]	@ (80004d0 <GPIO_PeriClockControl+0x194>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0x146>
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000478:	4a10      	ldr	r2, [pc, #64]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800047a:	f023 0320 	bic.w	r3, r3, #32
 800047e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000480:	e014      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG) GPIOG_PCLK_DI();
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a13      	ldr	r2, [pc, #76]	@ (80004d4 <GPIO_PeriClockControl+0x198>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0x15c>
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048e:	4a0b      	ldr	r2, [pc, #44]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 8000490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000494:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000496:	e009      	b.n	80004ac <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH) GPIOH_PCLK_DI();
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a0f      	ldr	r2, [pc, #60]	@ (80004d8 <GPIO_PeriClockControl+0x19c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d105      	bne.n	80004ac <GPIO_PeriClockControl+0x170>
 80004a0:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a4:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <GPIO_PeriClockControl+0x180>)
 80004a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020400 	.word	0x40020400
 80004c4:	40020800 	.word	0x40020800
 80004c8:	40020c00 	.word	0x40020c00
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40021400 	.word	0x40021400
 80004d4:	40021800 	.word	0x40021800
 80004d8:	40021c00 	.word	0x40021c00

080004dc <GPIO_Init>:
 *
 * @return		-
 *
 * @note		-
 ************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

	/* Enable GPIO peripheral Clock */
	GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2101      	movs	r1, #1
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff26 	bl	800033c <GPIO_PeriClockControl>

	uint32_t temp = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
	/* 1. Configure the mode for the given gpio pin */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d820      	bhi.n	800053e <GPIO_Init+0x62>
		/*Normal GPIO configurations */
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //need to clear bit field before sets
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	2103      	movs	r1, #3
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	400a      	ands	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6819      	ldr	r1, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	430a      	orrs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	e0c8      	b.n	80006d0 <GPIO_Init+0x1f4>
	}
	else{
		/* Interrupt configuration */

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	795b      	ldrb	r3, [r3, #5]
 8000542:	2b05      	cmp	r3, #5
 8000544:	d117      	bne.n	8000576 <GPIO_Init+0x9a>
			/* 1. configure falling edge FTSR */
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000546:	4b47      	ldr	r3, [pc, #284]	@ (8000664 <GPIO_Init+0x188>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7912      	ldrb	r2, [r2, #4]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a43      	ldr	r2, [pc, #268]	@ (8000664 <GPIO_Init+0x188>)
 8000558:	430b      	orrs	r3, r1
 800055a:	60d3      	str	r3, [r2, #12]

			/* clear same bit in RTSR */
			EXTI -> RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800055c:	4b41      	ldr	r3, [pc, #260]	@ (8000664 <GPIO_Init+0x188>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	43d2      	mvns	r2, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a3d      	ldr	r2, [pc, #244]	@ (8000664 <GPIO_Init+0x188>)
 8000570:	400b      	ands	r3, r1
 8000572:	6093      	str	r3, [r2, #8]
 8000574:	e035      	b.n	80005e2 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	2b04      	cmp	r3, #4
 800057c:	d117      	bne.n	80005ae <GPIO_Init+0xd2>
			/* 1. configure raising edge RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800057e:	4b39      	ldr	r3, [pc, #228]	@ (8000664 <GPIO_Init+0x188>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	7912      	ldrb	r2, [r2, #4]
 8000586:	4611      	mov	r1, r2
 8000588:	2201      	movs	r2, #1
 800058a:	408a      	lsls	r2, r1
 800058c:	4611      	mov	r1, r2
 800058e:	4a35      	ldr	r2, [pc, #212]	@ (8000664 <GPIO_Init+0x188>)
 8000590:	430b      	orrs	r3, r1
 8000592:	6093      	str	r3, [r2, #8]

			/* clear same bit in FTSR */
			EXTI -> FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000594:	4b33      	ldr	r3, [pc, #204]	@ (8000664 <GPIO_Init+0x188>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000664 <GPIO_Init+0x188>)
 80005a8:	400b      	ands	r3, r1
 80005aa:	60d3      	str	r3, [r2, #12]
 80005ac:	e019      	b.n	80005e2 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b06      	cmp	r3, #6
 80005b4:	d115      	bne.n	80005e2 <GPIO_Init+0x106>
			/* 1. configure both falling and raising edge FTSR, RTSR */
			EXTI -> RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000664 <GPIO_Init+0x188>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <GPIO_Init+0x188>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6093      	str	r3, [r2, #8]
			EXTI -> FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <GPIO_Init+0x188>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <GPIO_Init+0x188>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	60d3      	str	r3, [r2, #12]
		}
		/* 2. Configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber) / 4; //selects SYSCFG_EXTIR 0 to 3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	089b      	lsrs	r3, r3, #2
 80005e8:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4; //selects position in SYSCFG_EXTIR 0 to 3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	f003 0303 	and.w	r3, r3, #3
 80005f2:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000668 <GPIO_Init+0x18c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d044      	beq.n	8000688 <GPIO_Init+0x1ac>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1a      	ldr	r2, [pc, #104]	@ (800066c <GPIO_Init+0x190>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d02b      	beq.n	8000660 <GPIO_Init+0x184>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <GPIO_Init+0x194>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d024      	beq.n	800065c <GPIO_Init+0x180>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <GPIO_Init+0x198>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d01d      	beq.n	8000658 <GPIO_Init+0x17c>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <GPIO_Init+0x19c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d016      	beq.n	8000654 <GPIO_Init+0x178>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a14      	ldr	r2, [pc, #80]	@ (800067c <GPIO_Init+0x1a0>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d00f      	beq.n	8000650 <GPIO_Init+0x174>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a12      	ldr	r2, [pc, #72]	@ (8000680 <GPIO_Init+0x1a4>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d008      	beq.n	800064c <GPIO_Init+0x170>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a11      	ldr	r2, [pc, #68]	@ (8000684 <GPIO_Init+0x1a8>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d101      	bne.n	8000648 <GPIO_Init+0x16c>
 8000644:	2307      	movs	r3, #7
 8000646:	e020      	b.n	800068a <GPIO_Init+0x1ae>
 8000648:	2300      	movs	r3, #0
 800064a:	e01e      	b.n	800068a <GPIO_Init+0x1ae>
 800064c:	2306      	movs	r3, #6
 800064e:	e01c      	b.n	800068a <GPIO_Init+0x1ae>
 8000650:	2305      	movs	r3, #5
 8000652:	e01a      	b.n	800068a <GPIO_Init+0x1ae>
 8000654:	2304      	movs	r3, #4
 8000656:	e018      	b.n	800068a <GPIO_Init+0x1ae>
 8000658:	2303      	movs	r3, #3
 800065a:	e016      	b.n	800068a <GPIO_Init+0x1ae>
 800065c:	2302      	movs	r3, #2
 800065e:	e014      	b.n	800068a <GPIO_Init+0x1ae>
 8000660:	2301      	movs	r3, #1
 8000662:	e012      	b.n	800068a <GPIO_Init+0x1ae>
 8000664:	40013c00 	.word	0x40013c00
 8000668:	40020000 	.word	0x40020000
 800066c:	40020400 	.word	0x40020400
 8000670:	40020800 	.word	0x40020800
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40021000 	.word	0x40021000
 800067c:	40021400 	.word	0x40021400
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00
 8000688:	2300      	movs	r3, #0
 800068a:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 800068c:	4b6d      	ldr	r3, [pc, #436]	@ (8000844 <GPIO_Init+0x368>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000690:	4a6c      	ldr	r2, [pc, #432]	@ (8000844 <GPIO_Init+0x368>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG -> EXTICR[temp1] |= (portcode << (4 *temp2));
 8000698:	4a6b      	ldr	r2, [pc, #428]	@ (8000848 <GPIO_Init+0x36c>)
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	3302      	adds	r3, #2
 800069e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a2:	7a79      	ldrb	r1, [r7, #9]
 80006a4:	7abb      	ldrb	r3, [r7, #10]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	4966      	ldr	r1, [pc, #408]	@ (8000848 <GPIO_Init+0x36c>)
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	4302      	orrs	r2, r0
 80006b4:	3302      	adds	r3, #2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. Enable EXTI interrupt delivery using IMR */
		EXTI -> IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80006ba:	4b64      	ldr	r3, [pc, #400]	@ (800084c <GPIO_Init+0x370>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	7912      	ldrb	r2, [r2, #4]
 80006c2:	4611      	mov	r1, r2
 80006c4:	2201      	movs	r2, #1
 80006c6:	408a      	lsls	r2, r1
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a60      	ldr	r2, [pc, #384]	@ (800084c <GPIO_Init+0x370>)
 80006cc:	430b      	orrs	r3, r1
 80006ce:	6013      	str	r3, [r2, #0]
	}

	/* 3. Configure the speed */
	temp = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	79db      	ldrb	r3, [r3, #7]
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	2103      	movs	r1, #3
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	400a      	ands	r2, r1
 8000702:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6899      	ldr	r1, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	430a      	orrs	r2, r1
 8000712:	609a      	str	r2, [r3, #8]

	/* 4. Configure the Pull-up / Pull-down */
	temp = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
	temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7a1b      	ldrb	r3, [r3, #8]
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	2103      	movs	r1, #3
 8000738:	fa01 f303 	lsl.w	r3, r1, r3
 800073c:	43db      	mvns	r3, r3
 800073e:	4619      	mov	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	400a      	ands	r2, r1
 8000746:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	68d9      	ldr	r1, [r3, #12]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	430a      	orrs	r2, r1
 8000756:	60da      	str	r2, [r3, #12]

	/* 5. Configure the output type */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d81f      	bhi.n	80007a0 <GPIO_Init+0x2c4>
		temp = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
		temp = pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	799b      	ldrb	r3, [r3, #6]
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << (pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));	//clearing
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	4619      	mov	r1, r3
 8000780:	2301      	movs	r3, #1
 8000782:	408b      	lsls	r3, r1
 8000784:	43db      	mvns	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	400a      	ands	r2, r1
 800078e:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6859      	ldr	r1, [r3, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	430a      	orrs	r2, r1
 800079e:	605a      	str	r2, [r3, #4]
	}

	/* Configure Alternate Function mode */
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d149      	bne.n	800083c <GPIO_Init+0x360>

		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	f003 0307 	and.w	r3, r3, #7
 80007b0:	723b      	strb	r3, [r7, #8]

		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber <= 7){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	d820      	bhi.n	80007fc <GPIO_Init+0x320>
			temp = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a5b      	ldrb	r3, [r3, #9]
 80007c2:	461a      	mov	r2, r3
 80007c4:	7a3b      	ldrb	r3, [r7, #8]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRL &= ~(0xf << (4 * temp1));
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6a1a      	ldr	r2, [r3, #32]
 80007d4:	7a3b      	ldrb	r3, [r7, #8]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	210f      	movs	r1, #15
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	400a      	ands	r2, r1
 80007e8:	621a      	str	r2, [r3, #32]
			pGPIOHandle -> pGPIOx ->AFRL |= temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6a19      	ldr	r1, [r3, #32]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	621a      	str	r2, [r3, #32]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
		}
	}
}
 80007fa:	e01f      	b.n	800083c <GPIO_Init+0x360>
			temp = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
			temp = pGPIOHandle -> GPIO_PinConfig.GPIO_AltrFnMode << (4 * temp1);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7a5b      	ldrb	r3, [r3, #9]
 8000804:	461a      	mov	r2, r3
 8000806:	7a3b      	ldrb	r3, [r7, #8]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle -> pGPIOx ->AFRH &= ~(0xf << (4 * temp1)); //clearing
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000816:	7a3b      	ldrb	r3, [r7, #8]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	210f      	movs	r1, #15
 800081c:	fa01 f303 	lsl.w	r3, r1, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	400a      	ands	r2, r1
 800082a:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle -> pGPIOx ->AFRH |= temp;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	430a      	orrs	r2, r1
 800083a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40013800 	.word	0x40013800
 800084c:	40013c00 	.word	0x40013c00

08000850 <I2C_GetPCLK1Value>:
 *
 * @return		-uint32_t
 *
 * @note		-
 */
uint32_t  I2C_GetPCLK1Value (void){
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0

	uint32_t  pclk1, systemClk;
	uint16_t ahbp;
	uint8_t clkSrc, temp, apb1p;

	clkSrc = (RCC -> CFGR >> 2) & 0x3;
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <I2C_GetPCLK1Value+0x90>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 0303 	and.w	r3, r3, #3
 8000862:	723b      	strb	r3, [r7, #8]

	if(clkSrc == 0) systemClk = HSI_CLK_FREQ;
 8000864:	7a3b      	ldrb	r3, [r7, #8]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d102      	bne.n	8000870 <I2C_GetPCLK1Value+0x20>
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <I2C_GetPCLK1Value+0x94>)
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e004      	b.n	800087a <I2C_GetPCLK1Value+0x2a>
	else if(clkSrc == 1) systemClk = HSE_CLK_FREQ;
 8000870:	7a3b      	ldrb	r3, [r7, #8]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d101      	bne.n	800087a <I2C_GetPCLK1Value+0x2a>
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <I2C_GetPCLK1Value+0x98>)
 8000878:	60fb      	str	r3, [r7, #12]

	temp = (RCC -> CFGR >> 4) & 0xF;
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <I2C_GetPCLK1Value+0x90>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	091b      	lsrs	r3, r3, #4
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	71fb      	strb	r3, [r7, #7]

	if(temp < 8) ahbp = 1;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d802      	bhi.n	8000894 <I2C_GetPCLK1Value+0x44>
 800088e:	2301      	movs	r3, #1
 8000890:	817b      	strh	r3, [r7, #10]
 8000892:	e005      	b.n	80008a0 <I2C_GetPCLK1Value+0x50>
	else ahbp = ahb_PreScaler[temp - 8];
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3b08      	subs	r3, #8
 8000898:	4a14      	ldr	r2, [pc, #80]	@ (80008ec <I2C_GetPCLK1Value+0x9c>)
 800089a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089e:	817b      	strh	r3, [r7, #10]


	temp = (RCC -> CFGR >> 10) & 0x7;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <I2C_GetPCLK1Value+0x90>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	0a9b      	lsrs	r3, r3, #10
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	71fb      	strb	r3, [r7, #7]

	if(temp < 4) apb1p = 1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d802      	bhi.n	80008ba <I2C_GetPCLK1Value+0x6a>
 80008b4:	2301      	movs	r3, #1
 80008b6:	727b      	strb	r3, [r7, #9]
 80008b8:	e004      	b.n	80008c4 <I2C_GetPCLK1Value+0x74>
	else apb1p = abp1_PreScaler[temp - 4];
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3b04      	subs	r3, #4
 80008be:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <I2C_GetPCLK1Value+0xa0>)
 80008c0:	5cd3      	ldrb	r3, [r2, r3]
 80008c2:	727b      	strb	r3, [r7, #9]

	pclk1 = (systemClk / ahbp /apb1p);
 80008c4:	897b      	ldrh	r3, [r7, #10]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80008cc:	7a7b      	ldrb	r3, [r7, #9]
 80008ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d2:	603b      	str	r3, [r7, #0]

	return pclk1;
 80008d4:	683b      	ldr	r3, [r7, #0]


}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40023800 	.word	0x40023800
 80008e4:	00f42400 	.word	0x00f42400
 80008e8:	007a1200 	.word	0x007a1200
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000014 	.word	0x20000014

080008f4 <I2C_PeriClockControl>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE){
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d120      	bne.n	8000948 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1) I2C1_PCLK_EN();
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a22      	ldr	r2, [pc, #136]	@ (8000994 <I2C_PeriClockControl+0xa0>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <I2C_PeriClockControl+0x28>
 800090e:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	4a21      	ldr	r2, [pc, #132]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000918:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C2) I2C2_PCLK_DI();
		else if (pI2Cx == I2C3) I2C3_PCLK_DI();

	}

}
 800091a:	e035      	b.n	8000988 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2) I2C2_PCLK_EN();
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <I2C_PeriClockControl+0xa8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d106      	bne.n	8000932 <I2C_PeriClockControl+0x3e>
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 800092a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800092e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000930:	e02a      	b.n	8000988 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3) I2C3_PCLK_EN();
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a1a      	ldr	r2, [pc, #104]	@ (80009a0 <I2C_PeriClockControl+0xac>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d126      	bne.n	8000988 <I2C_PeriClockControl+0x94>
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	4a16      	ldr	r2, [pc, #88]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 8000940:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000944:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000946:	e01f      	b.n	8000988 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1) I2C1_PCLK_DI();
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <I2C_PeriClockControl+0xa0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d106      	bne.n	800095e <I2C_PeriClockControl+0x6a>
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a10      	ldr	r2, [pc, #64]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 8000956:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800095c:	e014      	b.n	8000988 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2) I2C2_PCLK_DI();
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <I2C_PeriClockControl+0xa8>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <I2C_PeriClockControl+0x80>
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 800096c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000972:	e009      	b.n	8000988 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3) I2C3_PCLK_DI();
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <I2C_PeriClockControl+0xac>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d105      	bne.n	8000988 <I2C_PeriClockControl+0x94>
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <I2C_PeriClockControl+0xa4>)
 8000982:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40005400 	.word	0x40005400
 8000998:	40023800 	.word	0x40023800
 800099c:	40005800 	.word	0x40005800
 80009a0:	40005c00 	.word	0x40005c00

080009a4 <I2C_Init>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]

	/*Enable Peripheral clock */
	I2C_PeriClockControl(pI2CHandle -> pI2Cx, ENABLE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff9c 	bl	80008f4 <I2C_PeriClockControl>

	/* configure ack control in CR1*/
	tempreg |= ((pI2CHandle -> I2C_Config.I2C_AckControl) << 10);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7a5b      	ldrb	r3, [r3, #9]
 80009c0:	029b      	lsls	r3, r3, #10
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> CR1 |= (tempreg & 0xFFFF);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6819      	ldr	r1, [r3, #0]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]

	/* configure FREQ field in CR2 */
	tempreg = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
	tempreg |= (I2C_GetPCLK1Value() / 1000000U);
 80009de:	f7ff ff37 	bl	8000850 <I2C_GetPCLK1Value>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a4b      	ldr	r2, [pc, #300]	@ (8000b14 <I2C_Init+0x170>)
 80009e6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ea:	0c9b      	lsrs	r3, r3, #18
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> CR2 |= (tempreg & 0x3F);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6859      	ldr	r1, [r3, #4]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	605a      	str	r2, [r3, #4]

	/* program the device own address */
	tempreg |= (pI2CHandle -> I2C_Config.I2C_DeviceAddress) << 1;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7a1b      	ldrb	r3, [r3, #8]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
	/* I2C_OAR1 14 bit always should be kept at 1 as per reference manual */
	tempreg |= (1 << 14);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	60fb      	str	r3, [r7, #12]
	pI2CHandle -> pI2Cx -> OAR1 |= tempreg;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6899      	ldr	r1, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	430a      	orrs	r2, r1
 8000a28:	609a      	str	r2, [r3, #8]

	/*CCR calculation */
	uint16_t ccrValue = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle -> I2C_Config.I2C_SCLSpeed <= I2C_SCLK_SPEED_SM){
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4a38      	ldr	r2, [pc, #224]	@ (8000b18 <I2C_Init+0x174>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d80f      	bhi.n	8000a5c <I2C_Init+0xb8>
		/* standard freq mode*/
		ccrValue = (I2C_GetPCLK1Value() / (2 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 8000a3c:	f7ff ff08 	bl	8000850 <I2C_GetPCLK1Value>
 8000a40:	4602      	mov	r2, r0
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccrValue & 0xFFF);
 8000a4e:	897b      	ldrh	r3, [r7, #10]
 8000a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e02c      	b.n	8000ab6 <I2C_Init+0x112>
	}
	else{
		/* Fast freq mode */

		/* set F/S bit in CCR to enable fast mode*/
		tempreg |= (1 << 15);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a62:	60fb      	str	r3, [r7, #12]
		/* configure duty cycle */
		tempreg |= (pI2CHandle ->I2C_Config.I2C_FMDutyCycle << 14);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	039b      	lsls	r3, r3, #14
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

		/* ccr calc */
		if(pI2CHandle ->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10b      	bne.n	8000a90 <I2C_Init+0xec>
			ccrValue = (I2C_GetPCLK1Value() / (3 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 8000a78:	f7ff feea 	bl	8000850 <I2C_GetPCLK1Value>
 8000a7c:	4601      	mov	r1, r0
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a8c:	817b      	strh	r3, [r7, #10]
 8000a8e:	e00c      	b.n	8000aaa <I2C_Init+0x106>
		}
		else{
			ccrValue = (I2C_GetPCLK1Value() / (25 * pI2CHandle -> I2C_Config.I2C_SCLSpeed));
 8000a90:	f7ff fede 	bl	8000850 <I2C_GetPCLK1Value>
 8000a94:	4601      	mov	r1, r0
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	009a      	lsls	r2, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aa8:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccrValue & 0xFFF);
 8000aaa:	897b      	ldrh	r3, [r7, #10]
 8000aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle -> pI2Cx -> CCR |= tempreg;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	69d9      	ldr	r1, [r3, #28]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	61da      	str	r2, [r3, #28]

	/* configure TRISE reg */
	if(pI2CHandle -> I2C_Config.I2C_SCLSpeed <= I2C_SCLK_SPEED_SM){
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	4a13      	ldr	r2, [pc, #76]	@ (8000b18 <I2C_Init+0x174>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d809      	bhi.n	8000ae4 <I2C_Init+0x140>
		/* standard mode */
		tempreg = (I2C_GetPCLK1Value() / 1000000U) + 1;
 8000ad0:	f7ff febe 	bl	8000850 <I2C_GetPCLK1Value>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <I2C_Init+0x170>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	0c9b      	lsrs	r3, r3, #18
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	e00d      	b.n	8000b00 <I2C_Init+0x15c>
	}
	else{
		/* Fast mode */
		tempreg = (I2C_GetPCLK1Value() * 300/ 1000000000U) + 1;
 8000ae4:	f7ff feb4 	bl	8000850 <I2C_GetPCLK1Value>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000aee:	fb02 f303 	mul.w	r3, r2, r3
 8000af2:	0a5b      	lsrs	r3, r3, #9
 8000af4:	4a09      	ldr	r2, [pc, #36]	@ (8000b1c <I2C_Init+0x178>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	09db      	lsrs	r3, r3, #7
 8000afc:	3301      	adds	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle -> pI2Cx ->TRISE = (tempreg & 0x3F);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b0a:	621a      	str	r2, [r3, #32]
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	431bde83 	.word	0x431bde83
 8000b18:	000186a0 	.word	0x000186a0
 8000b1c:	00044b83 	.word	0x00044b83

08000b20 <I2C_PeripheralControl>:
 *
 * @return		-
 *
 * @note		-
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000b2c:	78fb      	ldrb	r3, [r7, #3]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d106      	bne.n	8000b40 <I2C_PeripheralControl+0x20>
		pI2Cx -> CR1 |= (1 << I2C_CR1_PE);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	}
	else{
		pI2Cx -> CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000b3e:	e005      	b.n	8000b4c <I2C_PeripheralControl+0x2c>
		pI2Cx -> CR1 &= ~(1 << I2C_CR1_PE);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f023 0201 	bic.w	r2, r3, #1
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
	...

08000b58 <__libc_init_array>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	4d0d      	ldr	r5, [pc, #52]	@ (8000b90 <__libc_init_array+0x38>)
 8000b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8000b94 <__libc_init_array+0x3c>)
 8000b5e:	1b64      	subs	r4, r4, r5
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	2600      	movs	r6, #0
 8000b64:	42a6      	cmp	r6, r4
 8000b66:	d109      	bne.n	8000b7c <__libc_init_array+0x24>
 8000b68:	4d0b      	ldr	r5, [pc, #44]	@ (8000b98 <__libc_init_array+0x40>)
 8000b6a:	4c0c      	ldr	r4, [pc, #48]	@ (8000b9c <__libc_init_array+0x44>)
 8000b6c:	f000 f818 	bl	8000ba0 <_init>
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	10a4      	asrs	r4, r4, #2
 8000b74:	2600      	movs	r6, #0
 8000b76:	42a6      	cmp	r6, r4
 8000b78:	d105      	bne.n	8000b86 <__libc_init_array+0x2e>
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
 8000b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b80:	4798      	blx	r3
 8000b82:	3601      	adds	r6, #1
 8000b84:	e7ee      	b.n	8000b64 <__libc_init_array+0xc>
 8000b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b8a:	4798      	blx	r3
 8000b8c:	3601      	adds	r6, #1
 8000b8e:	e7f2      	b.n	8000b76 <__libc_init_array+0x1e>
 8000b90:	08000bb8 	.word	0x08000bb8
 8000b94:	08000bb8 	.word	0x08000bb8
 8000b98:	08000bb8 	.word	0x08000bb8
 8000b9c:	08000bbc 	.word	0x08000bbc

08000ba0 <_init>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	bf00      	nop
 8000ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba6:	bc08      	pop	{r3}
 8000ba8:	469e      	mov	lr, r3
 8000baa:	4770      	bx	lr

08000bac <_fini>:
 8000bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bae:	bf00      	nop
 8000bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bb2:	bc08      	pop	{r3}
 8000bb4:	469e      	mov	lr, r3
 8000bb6:	4770      	bx	lr
